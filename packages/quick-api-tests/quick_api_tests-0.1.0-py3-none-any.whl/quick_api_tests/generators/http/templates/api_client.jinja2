# coding: utf-8
{%- set service_name = service_name %}
{%- set version = version %}
{%- set api_name = api_name %}
"""
    {{ service_name|to_snake_case }}

    Generated by quick https://github.com/ValeriyMenshikov/quick)

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any
from httpx import Response
from quick.http_client.client import BaseClient
{% if models %}
from clients.http.{{ service_name|to_snake_case }}.models.api_models import (
    {% for model in models %}
    {{ model }},
    {% endfor %}
)
{% endif %}



class {{ api_name }}Api(BaseClient):
    {%- for data in data_list %}
    {%- set method = data.get('method') %}
    {%- set path = data.get('path', None) %}
    {%- set request_body = data.get('request_body') %}
    {%- set summary = data.get('summary') %}
    {%- set responses = data.get('responses') %}
    {%- set success_response = responses.get('200', None) or responses.get('201', None) %}
    {%- set query_parameters = data.get('query_parameters', None) %}
    {%- set path_parameters = data.get('path_parameters', None) %}
    {%- set headers = data.get('headers', None) %}
    {%- set headers = headers|sort(attribute='required', reverse=True) %}

    async def {{ method }}_{{ path|to_snake_case }}(
        self,
        {%- if request_body %}
        {{ request_body|to_snake_case }}: {{ request_body }}, # noqa: E501
        {%- endif %}
        {%- if path_parameters %}
        {%- for path_param in path_parameters %}
        {{ path_param.get('name')|to_snake_case }}: {{ path_param.get('type') }},
        {%- endfor %}
        {%- endif %}
        {%- if query_parameters %}
        {%- for query_param in query_parameters %}
        {{ query_param.get('name')|to_snake_case }}: {{ query_param.get('type') }},
        {%- endfor %}
        {%- endif %}
        {%- if headers %}
        {%- for header in headers %}
        {{ header.get('name')|to_snake_case }}: {{ header.get('type') }} {% if header.get('required') %}{% elif header.get('type') == 'str' %} = "" {% else %} = {{ header.get('default') }}{% endif %},
        {%- endfor %}
        {%- endif %}
        **kwargs,
    ) -> {{ success_response if success_response else 'Response' }}:
        """
        {{ summary.strip() | wordwrap(width=120) if summary else 'No summary description' }}.

        Args:
            {%- if request_body %}
            {{ request_body|to_snake_case }}({{ request_body }}): ...
            {%- endif %}
            {%- if path_parameters %}
            {%- for path_param in path_parameters %}
            {{ path_param.get('name')|to_snake_case }}({{ path_param.get('type')}}{% if path_param.get('required')%}, required{% else %}, optional{% endif %}): {{ path_param.get('description', '') | wordwrap(width=50) if path_param.get('description') else '...' }}
            {%- endfor %}
            {%- endif %}
            {%- if query_parameters %}
            {%- for query_param in query_parameters %}
            {{ query_param.get('name')|to_snake_case }}({{ query_param.get('type') }}{% if query_param.get('required')%}, required{% else %}, optional{% endif %}): {{ query_param.get('description', '') | wordwrap(width=50) if query_param.get('description') else '...' }}
            {%- endfor %}
            {%- endif %}
            {%- if headers %}
            {%- for header in headers %}
            {{ header.get('name')|to_snake_case }}({{ header.get('type') }}{% if header.get('required')%}, required{% else %}, optional{% endif %}): {{ header.get('description', '')  | wordwrap(width=50) if header.get('description') else '...' }}
            {%- endfor %}
            {%- endif %}
            **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

        Returns:
            {{ success_response if success_response else 'None' }}: ...
        """  # noqa: D205,E501

        {%- if query_parameters %}
        # process the query parameters
        params_map = {
            {%- for query_param in query_parameters %}
            "{{ query_param.get('name') }}": {{ query_param.get('name')|to_snake_case }},
            {%- endfor %}
            }
        params = self._set_params(params_map)
        {%- endif %}

        {%- if headers %}
        # process the header parameters
        headers_map = {
            {%- for header in headers %}
            "{{ header.get('name') }}": {{ header.get('name')|to_snake_case }},
            {%- endfor %}
        }
        headers = self._set_params(headers_map)
        headers_from_kwargs = kwargs.get("headers")
        if headers_from_kwargs:
            headers.update(headers_from_kwargs)
        {%- endif %}

        response = await self.{{ method }}_{{ path|to_snake_case }}_with_http_info(
            {%- if path_parameters %}
            {%- for path_param in path_parameters %}
            {{ path_param.get('name')|to_snake_case }}={{ path_param.get('name')|to_snake_case }},
            {%- endfor %}
            {%- endif %}
            {%- if request_body %}
            {{ request_body|to_snake_case }}={{ request_body|to_snake_case }}, # noqa: E501
            {%- endif %}
            {%- if query_parameters %}
            params=params,
            {%- endif %}
            **kwargs,
        )
        {%- if success_response %}
        return {{ success_response }}(**response.json())
        {%- else %}
        return response
        {%- endif %}


    async def {{ method }}_{{ path|to_snake_case }}_with_http_info(
        self,
        {%- if request_body %}
        {{ request_body|to_snake_case }}: {{ request_body }}, # noqa: E501
        {%- endif %}
        {%- if path_parameters %}
        {%- for path_param in path_parameters %}
        {{ path_param.get('name')|to_snake_case }}: {{ path_param.get('type') }},
        {%- endfor %}
        {%- endif %}
        {%- if query_parameters %}
        {%- for query_param in query_parameters %}
        {{ query_param.get('name')|to_snake_case }}: {{ query_param.get('type') }},
        {%- endfor %}
        {%- endif %}
        {%- if headers %}
        {%- for header in headers %}
        {{ header.get('name')|to_snake_case }}: {{ header.get('type') }} {% if header.get('required') %}{% elif header.get('type') == 'str' %} = "" {% else %} = {{ header.get('default') }}{% endif %},
        {%- endfor %}
        {%- endif %}
        **kwargs,
    ) -> Response:
        """
        {{ summary.strip() | wordwrap(width=120) if summary else 'No summary description' }}.

        Args:
            {%- if request_body %}
            {{ request_body|to_snake_case }}({{ request_body }}): ...
            {%- endif %}
            {%- if path_parameters %}
            {%- for path_param in path_parameters %}
            {{ path_param.get('name')|to_snake_case }}({{ path_param.get('type') }}): {{ path_param.get('description', '') | wordwrap(width=50) if path_param.get('description') else '...' }}
            {%- endfor %}
            {%- endif %}
            {%- if query_parameters %}
            {%- for query_param in query_parameters %}
            {{ query_param.get('name')|to_snake_case }}({{ query_param.get('type') }}): {{ query_param.get('description', '') | wordwrap(width=50) if query_param.get('description') else '...' }}
            {%- endfor %}
            {%- endif %}
            {%- if headers %}
            {%- for header in headers %}
            {{ header.get('name')|to_snake_case }}({{ header.get('type') }}{% if header.get('required') %}, required{% else %}, optional{% endif %}): {{ header.get('description', '')  | wordwrap(width=50) if header.get('description') else '...' }}
            {%- endfor %}
            {%- endif %}
            **kwargs: аргументы поддерживаемые библиотекой httpx (data, files, headers и т.п.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        {%- if query_parameters %}
        # process the query parameters
        params_map = {
            {%- for query_param in query_parameters %}
            "{{ query_param.get('name') }}": {{ query_param.get('name')|to_snake_case }},
            {%- endfor %}
            }
        params = self._set_params(params_map)
        {%- endif %}

        {%- if headers %}
        # process the header parameters
        headers_map = {
            {%- for header in headers %}
            "{{ header.get('name') }}": {{ header.get('name')|to_snake_case }},
            {%- endfor %}
        }
        headers = self._set_params(headers_map)
        headers_from_kwargs = kwargs.get("headers")
        if headers_from_kwargs:
            headers.update(headers_from_kwargs)
        {%- endif %}

        response = await self.{{ method }}(
            {%- if path %}
            url=f"{{ path }}",
            {%- endif %}
            {%- if request_body %}
            json={{ request_body|to_snake_case }}.model_dump(exclude_none=True, by_alias=True), # noqa: E501
            {%- endif %}
            {%- if query_parameters %}
            params=params,
            {%- endif %}
            **kwargs,
        )
        return response
        {%- endfor %}


    @staticmethod
    def _set_params(params_map: dict) -> dict:
        """Sets the params for the request if they are not None."""
        params = {}
        for param_name, param_value in params_map.items():
            if param_value:
                params[param_name] = param_value
        return params