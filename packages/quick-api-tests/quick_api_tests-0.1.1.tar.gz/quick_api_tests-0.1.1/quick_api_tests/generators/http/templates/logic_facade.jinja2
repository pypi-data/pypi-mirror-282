# coding: utf-8
"""
    {{ service_name|to_snake_case }}

    Generated by quick https://github.com/ValeriyMenshikov/quick)

"""  # noqa: E501
{%- set service_name = service_name %}
{%- set api_names = api_names %}
from logic.http.{{ service_name|to_snake_case }} import {{ service_name|to_camel_case }}WrapperFacade


class {{ service_name|to_camel_case }}LogicFacade({{ service_name|to_camel_case }}WrapperFacade):
    """
    Композитный фасад для реализации методов объединяющих логику нескольких классов логики одного сервиса.
    При перегенерации, методы реализованные в этом классе не потеряются.

    Пример:
    def composite_method_name(self, param1: int, param2: str, param3: bool) -> dict:
        response1 = self.first_service_name_api.wrapper_method_name(param1)
        response1 = self.second_service_name_api.wrapper_method_name(param2)
        response1 = self.third_service_name_api.wrapper_method_name(param3)
        return {"result": response1.json()["key"] + response2.json()["key"] + response3.json()["key"]}
    """