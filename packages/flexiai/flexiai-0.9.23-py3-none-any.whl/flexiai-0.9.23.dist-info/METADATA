Metadata-Version: 2.1
Name: flexiai
Version: 0.9.23
Summary: FlexiAI is a versatile and powerful AI framework designed to streamline the integration and management                 of OpenAI and Azure OpenAI services. With advanced Retrieval-Augmented Generation (RAG) capabilities,                  FlexiAI enables developers to build sophisticated AI-driven applications efficiently and effectively.
Home-page: https://github.com/SavinRazvan/flexiai
Author: Savin Ionut Razvan
Author-email: razvan.i.savin@gmail.com
Project-URL: Bug Reports, https://github.com/SavinRazvan/flexiai/issues
Project-URL: Source, https://github.com/SavinRazvan/flexiai
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: annotated-types ==0.7.0
Requires-Dist: anyio ==4.4.0
Requires-Dist: azure-common ==1.1.28
Requires-Dist: azure-core ==1.30.2
Requires-Dist: azure-identity ==1.17.1
Requires-Dist: azure-mgmt-core ==1.4.0
Requires-Dist: azure-mgmt-resource ==23.1.1
Requires-Dist: httpx ==0.27.0
Requires-Dist: numpy ==2.0.0
Requires-Dist: openai ==1.35.0
Requires-Dist: pandas ==2.2.2
Requires-Dist: pydantic ==2.7.4
Requires-Dist: python-dotenv ==1.0.1
Requires-Dist: requests ==2.32.3
Requires-Dist: pytest ==8.2.2
Requires-Dist: setuptools >=70.2.0

# FlexiAI

FlexiAI is a robust AI framework designed to efficiently manage interactions with both OpenAI and Azure OpenAI services. Featuring an advanced Retrieval-Augmented Generation (RAG) module, this framework provides developers with the tools to seamlessly integrate advanced AI functionalities into their applications, leveraging the extensive capabilities of OpenAI and Azure OpenAI for enhanced performance and scalability.

## Table of Contents

- [Features](#features)
- [Installation](#installation)
- [Setup](#setup)
- [Usage](#usage)
- [Documentation](#documentation)
- [Contributing](#contributing)
- [License](#license)
- [Contact](#contact)

## Features

- **Multi-Platform Support**: Seamlessly integrates with both OpenAI and Azure OpenAI services, ensuring flexibility and broad compatibility.
- **Configurable and Extensible**: Offers an easily configurable and highly extensible framework, allowing customization to meet specific project needs and scalability requirements.
- **Robust Logging**: Incorporates comprehensive logging capabilities, facilitating effective debugging and monitoring for a smooth development and operational experience.
- **Task Management**: Efficiently manages and executes a wide range of tasks, ensuring streamlined operations and enhanced productivity.
- **Retrieval-Augmented Generation (RAG)**: The framework empowers AI assistants to dynamically call external functions or services, enabling real-time retrieval of information. This capability allows the assistant to handle complex operations efficiently, making the solution more versatile and powerful.
- **Examples and Tests**: Provides a rich set of example scripts and comprehensive tests, enabling quick onboarding and ensuring reliable performance from the outset.
- **Secure and Scalable**: Designed with security and scalability in mind, making it suitable for both small projects and large enterprise applications.
- **Community-Driven**: Actively maintained and supported by a community of developers, ensuring continuous improvement and up-to-date features.

## Installation

### Install with `pip`

To install the FlexiAI framework using `pip`, simply run:

```bash
pip install flexiai
```

After installing, create a `.env` file in your project root directory with the following template:

```bash
# ========================== #
# Example .env file template #
# ========================== #

# Your OpenAI API key
OPENAI_API_KEY='your_openai_api_key_here'

# Your Azure OpenAI API key
AZURE_OPENAI_API_KEY='your_azure_openai_api_key_here'
# Your Azure OpenAI endpoint
AZURE_OPENAI_ENDPOINT='your_azure_openai_endpoint_here'
# Azure OpenAI API version
AZURE_OPENAI_API_VERSION='2024-05-01-preview'

# Credential type (either 'openai' or 'azure')
CREDENTIAL_TYPE='openai'
```

### Install from Source

To install the FlexiAI framework from source, clone the repository and use the provided setup script.

```bash
git clone https://github.com/SavinRazvan/flexiai.git
cd flexiai
python setup.py install
```

Alternatively, you can install the required dependencies using `pip`.

```bash
pip install -r requirements.txt
```

## Setup

Before using FlexiAI, set up your environment variables. You can use a `.env` file in the root directory. Here's an example template:

```bash
# Your OpenAI API key
OPENAI_API_KEY='your_openai_api_key_here'

# Your Azure OpenAI API key
AZURE_OPENAI_API_KEY='your_azure_openai_api_key_here'
# Your Azure OpenAI endpoint
AZURE_OPENAI_ENDPOINT='your_azure_openai_endpoint_here'
# Azure OpenAI API version
AZURE_OPENAI_API_VERSION='2024-05-01-preview'

# Credential type (either 'openai' or 'azure')
CREDENTIAL_TYPE='openai'
```

For more detailed setup instructions, including using virtual environments and troubleshooting, refer to the [Setup Guide](docs/setup.md).

## Usage

### Basic Usage

Hereâ€™s a quick example of how to use FlexiAI to interact with OpenAI:

```python
import logging
import os
import platform
from flexiai.core.flexiai_client import FlexiAI
from flexiai.config.logging_config import setup_logging

def clear_console():
    """Clears the console depending on the operating system."""
    if platform.system() == "Windows":
        os.system('cls')
    else:
        os.system('clear')

def main():
    # Setup logging
    setup_logging()

    # Initialize FlexiAI
    flexiai = FlexiAI()

    # Use the given assistant ID
    assistant_id = 'asst_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' # Replace with the actual assistant ID
    
    # Create a new thread
    try:
        thread = flexiai.create_thread()
        thread_id = thread.id
        logging.info(f"Created thread with ID: {thread_id}")
    except Exception as e:
        logging.error(f"Error creating thread: {e}")
        return

    # Variable to store all messages
    all_messages = []
    seen_message_ids = set()

    # Loop to continuously get user input and interact with the assistant
    while True:
        # Get user input
        user_message = input("You: ")

        # Exit the loop if the user types 'exit'
        if user_message.lower() == 'exit':
            print("Exiting...")
            break

        # Run the thread and handle required actions
        try:
            flexiai.create_advanced_run(assistant_id, thread_id, user_message)
            messages = flexiai.retrieve_messages(thread_id, limit=2)  
            
            # Store the extracted messages
            for msg in messages:
                if msg['message_id'] not in seen_message_ids:
                    all_messages.append(msg)
                    seen_message_ids.add(msg['message_id'])

            # Clear console and print the stored messages in the desired format
            clear_console()
            for msg in all_messages:
                role = "ðŸ¤– Assistant" if msg['role'] == "assistant" else "ðŸ§‘ You"
                print(f"{role}: {msg['content']}")
        except Exception as e:
            logging.error(f"Error running thread: {e}")

if __name__ == "__main__":
    main()
```

### Creating `user_flexiai_rag` Directory and Files

In your project root directory, you need to create the following structure to enable the Retrieval-Augmented Generation (RAG) module:

```python
ðŸ“¦your_project_root
 â”£ ðŸ“‚user_flexiai_rag
 â”ƒ â”£ ðŸ“‚data
 â”ƒ â”ƒ â”— ðŸ“œproducts.csv
 â”ƒ â”£ ðŸ“œ__init__.py
 â”ƒ â”£ ðŸ“œuser_function_mapping.py
 â”ƒ â”£ ðŸ“œuser_helpers.py
 â”ƒ â”— ðŸ“œuser_task_manager.py
 â”£ ðŸ“‚logs
 â”ƒ â”— ðŸ“œapp.log
 â”£ ðŸ“œrequirements.txt
 â”£ ðŸ“œ.env
 â”£  ...
 â”£ ðŸ“‚ other folders ...
 â”£ ðŸ“œ other files ...
 â”£  ...
```

#### Step-by-Step Instructions:

1. **Create the `user_flexiai_rag` Directory**:
   ```bash
   mkdir -p user_flexiai_rag/data
   ```

2. **Create the `__init__.py` File**:
   ```bash
   touch user_flexiai_rag/__init__.py
   ```

   This file can be left empty, but it is required to indicate that `user_flexiai_rag` is a package.

3. **Create the `user_function_mapping.py` File**:
   ```bash
   touch user_flexiai_rag/user_function_mapping.py
   ```

4. **Create the `user_helpers.py` File**:
   ```bash
   touch user_flexiai_rag/user_helpers.py
   ```

5. **Create the `user_task_manager.py` File**:
   ```bash
   touch user_flexiai_rag/user_task_manager.py
   ```

6. **Create the `products.csv` File**:
   ```bash
   touch user_flexiai_rag/data/products.csv
   ```

Here's an example content for each file:

#### `user_flexiai_rag/user_function_mapping.py`
```python
# user_flexiai_rag/user_function_mapping.py
from flexiai.user_flexiai_rag.user_task_manager import UserTaskManager


def register_user_tasks():
    """
    Register user-defined tasks with the FlexiAI framework.

    Returns:
        tuple: A tuple containing the personal function mappings and assistant
        function mappings.
    """
    # Initialize UserTaskManager to access user-defined tasks
    task_manager = UserTaskManager()

    personal_function_mapping = {
        'search_youtube': task_manager.search_youtube,
        'search_products': task_manager.search_products,
        # Add other personal functions here
        # 'another_assistnat_personal_function': task_manager.another_assistnat_personal_function
    }

    assistant_function_mapping = {
        # Add other functions that call assistants here -> the function names must end with "_assistant"
        # 'call_example_assistant': task_manager.call_example_assistant,
    }

    return personal_function_mapping, assistant_function_mapping
```

#### `user_flexiai_rag/user_helpers.py`
```python
import subprocess
import logging

def format_product(product):
    """
    Formats product details into a readable string.

    Args:
        product (dict): A dictionary containing product details. Expected keys are 'product_id', 
                        'product_name', 'brand', 'price', 'stock', 'rating', 'warranty_years', 
                        'category', 'release_date', and 'customer_reviews'.

    Returns:
        str: A formatted string containing the product details.
    """
    return (
        f"Product ID: {product['product_id']}\n"
        f"Product Name: {product['product_name']}\n"
        f"Brand: {product['brand']}\n"
        f"Price: ${product['price']}\n"
        f"Stock: {product['stock']}\n"
        f"Rating: {product['rating']}\n"
        f"Warranty Years: {product['warranty_years']}\n"
        f"Category: {product['category']}\n"
        f"Release Date: {product['release_date']}\n"
        f"Customer Reviews: {product['customer_reviews']}\n\n"
    )
```

#### `user_flexiai_rag/user_task_manager.py`
```python
import logging
import subprocess
import urllib.parse
import pandas as pd
from flexiai.config.logging_config import setup_logging
from flexiai.user_flexiai_rag.user_helpers import format_product

# Set up logging using your custom configuration
setup_logging()

class UserTaskManager:
    """
    UserTaskManager class handles user-defined tasks.
    """

    def __init__(self):
        """
        Initializes the UserTaskManager instance, setting up the logger.
        """
        self.logger = logging.getLogger(__name__)

    def search_youtube(self, query):
        """
        Searches YouTube for the given query and opens the search results page
        in the default web browser.

        Args:
            query (str): The search query string.

        Returns:
            dict: A dictionary containing the status, message, and result (URL)
        """
        if not query:
            return {
                "status": False,
                "message": "Query cannot be empty.",
                "result": None
            }

        try:
            # Normalize spaces to ensure consistent encoding
            query_normalized = query.replace(" ", "+")
            query_encoded = urllib.parse.quote(query_normalized)
            youtube_search_url = (
                f"https://www.youtube.com/results?search_query={query_encoded}"
            )
            self.logger.info(f"Opening YouTube search for query: {query}")

            # subprocess.run(['cmd.exe', '/c', 'start', '', youtube_search_url], check=True)

            # Use PowerShell to open the URL
            subprocess.run(
                ['powershell.exe', '-Command', 'Start-Process', youtube_search_url],
                check=True
            )

            self.logger.info("YouTube search page opened successfully.")
            return {
                "status": True,
                "message": "YouTube search page opened successfully.",
                "result": youtube_search_url
            }
        except subprocess.CalledProcessError as e:
            error_message = f"Subprocess error: {str(e)}"
            self.logger.error(error_message, exc_info=True)
            return {
                "status": False,
                "message": error_message,
                "result": None
            }
        except Exception as e:
            error_message = f"Failed to open YouTube search for query: {query}. Error: {str(e)}"
            self.logger.error(error_message, exc_info=True)
            return {
                "status": False,
                "message": error_message,
                "result": None
            }


    def search_products(self, **kwargs):
        # Implementation of search_products method
        pass

    # And other functions you need
```

For detailed usage examples and advanced functionalities, refer to the [Usage Guide](docs/usage.md).

## Documentation

The FlexiAI framework comes with comprehensive documentation to help you get started and make the most out of its capabilities:

- [API Reference](docs/api_reference.md)
- [Setup Guide](docs/setup.md)
- [Usage Guide](docs/usage.md)
- [Contributing Guide](docs/contributing.md)

## Contributing

We welcome contributions from the community. If you want to contribute to FlexiAI, please read our [Contributing Guide](docs/contributing.md) to get started.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE.txt) file for details.

## Contact

For any inquiries or support, please contact Savin Ionut Razvan at razvan.i.savin@gmail.com.
