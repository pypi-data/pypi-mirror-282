[tool.poetry]
name = "f-lib"
version = "0.4.1"
authors = ["Kyle Finley <kyle@finley.sh>"]
classifiers = [
  # https://pypi.org/classifiers/
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Utilities",
  "Typing :: Typed",
]
description = "Python library created by Kyle Finley, for Kyle Finley."
documentation = "https://f-lib.readthedocs.io"
homepage = "https://f-lib.readthedocs.io"
keywords = []
license = "Apache-2.0"
maintainers = []
packages = [
  {include = "f_lib"},
]
readme = "README.md"
repository = "https://github.com/finleyfamily/f-lib"

[tool.poetry.dependencies]
python = "^3.11"
platformdirs = "^4.1.0"
pydantic = "^2.7.4"
pydantic-settings = "^2.3.4"
rich = "^13.7.1"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.1"

[tool.poetry.group.docs.dependencies]
doc8 = "^1.1.1"
furo = "^2024.5.6"
sphinx = "^7.3.7"
sphinx-autobuild = "^2024.4.16"
sphinx-copybutton = "^0.5.2"
sphinx-design = "^0.6.0"
sphinxcontrib-apidoc = "^0.5.0"
sphinxcontrib-jquery = "^4.1"

[tool.poetry.group.lint.dependencies]
black = "^24.4.2"
ruff = "^0.5.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
pytest-subprocess = "^1.5.0"
pytest-sugar = "^1.0.0"
pytest-xdist = "^3.6.0"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[tool.poetry.urls]
bugs = "https://github.com/finleyfamily/f-lib/issues"
changelog = "https://github.com/finleyfamily/f-lib/releases"
issues = "https://github.com/finleyfamily/f-lib/issues"

[tool.black]
force-exclude = '''
/(
    \.eggs
  | \.git
  | \.venv
  | _build
  | build
  | dist
  | node_modules
)/
'''
include = '\.pyi?$'
line-length = 100
target-version = ["py311", "py312"]

[tool.coverage.report]
exclude_lines = [
  "@overload",
  "cov: ignore",  # standard exclude comment
  "if TYPE_CHECKING:",  # excluded blocks
  "if __name__ == .__main__.:",
  "raise AssertionError",  # defensive exceptions
  "raise NotImplementedError",
]
fail_under = 100
precision = 2
show_missing = true

[tool.coverage.run]
branch = false  # not correctly reported - https://github.com/nedbat/coveragepy/issues/605
omit = [
  "*/type_defs.py",
]

[tool.doc8]
ignore = [
  "D001",  # Line too long
]

[tool.poetry-dynamic-versioning]  # poetry self add "poetry-dynamic-versioning[plugin]"
bump = true
enable = false
fix-shallow-repository = true
metadata = false
strict = true
style = "pep440"

[tool.pyright]
exclude = [
  "**/.eggs",
  "**/.git",
  "**/.venv",
  "**/__pycache__",
  "**/docs",
  "**/node_modules",
  "**/typings",
]
pythonPlatform = "All"
pythonVersion = "3.11"
reportDuplicateImport = "none"
reportImportCycles = "none"
reportIncompatibleMethodOverride = "warning"
reportMissingTypeStubs = "none"
reportPrivateUsage = "none"
reportUnknownMemberType = "none"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportUnusedImport = "none"
reportUnusedVariable = "none"
strictParameterNoneValue = false
typeCheckingMode = "strict"
useLibraryCodeForTypes = true
venv = ".venv"

[tool.pytest.ini_options]
addopts = [
  "--cov-config=pyproject.toml",
]
filterwarnings = [
  "ignore::pytest_mock.PytestMockWarning",
]
markers = [
  "wip: isolate tests currently being worked on.",
]
python_classes = ["Test*"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
testpaths = ["tests"]

[tool.ruff]  # https://docs.astral.sh/ruff/settings/#top-level
force-exclude = true
line-length = 120
show-fixes = true
target-version = "py311"

[tool.ruff.lint]  # https://docs.astral.sh/ruff/settings/#lint
ignore = [
  "ANN101",  # Missing type annotation for `self` in method
  "ANN102",  # Missing type annotation for `cls` in classmethod
  "COM812",  # Trailing comma missing
  "D203",  # 1 blank line required before class docstring
  "D213",  # Multi-line docstring summary should start at the second line
  "D215",  # Section underline is over-indented
  "D403",  # First word of the first line should be capitalized
  "D406",  # Section name should end with a newline
  "D407",  # Missing dashed underline after section
  "D408",  # Section underline should be in the line following the section's name
  "D409",  # Section underline should match the length of its name
  "ERA001",  # Found commented-out code  # NOTE (kyle): incorrectly detects cspell
  "FIX002",  # Line contains TODO
  "TD003",  # Missing issue link on the line following this TODO
  "TID252",  # Relative imports from parent modules are banned
]
select = ["ALL"]

[tool.ruff.lint.extend-per-file-ignores]  # https://docs.astral.sh/ruff/settings/#lintextend-per-file-ignores
"*.py" = [
  "PYI024",  # Use `typing.NamedTuple` instead of `collections.namedtuple` - should only apply to pyi
]
"tests/*" = [
  "FBT001",  # Boolean positional arg in function definition - this is fine here
  "FBT003",  # Boolean positional value in function call - this is fine here
  "PT004",  # Fixture does not return anything, add leading underscore
  "S101",  # Use of `assert` detected - this is fine here
  "S108",  # Probable insecure usage of temporary file or directory
  "S301",  # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data
  "S604",  # Function call with `shell=True` parameter identified - this is fine here
  "SLF001",  # Private member accessed - fine in tests
]

[tool.ruff.lint.flake8-type-checking]  # https://docs.astral.sh/ruff/settings/#lint_flake8-type-checking_runtime-evaluated-base-classes
runtime-evaluated-base-classes = [
  "pydantic.BaseModel",
  "pydantic.BeforeValidator",
]

[tool.ruff.lint.pydocstyle]  # https://docs.astral.sh/ruff/settings/#lintpydocstyle
convention = "google"

[tool.ruff.lint.pylint]  # https://docs.astral.sh/ruff/settings/#lintpylint
allow-magic-value-types = ["bytes", "int", "str"]
max-args = 15
max-returns = 10

[tool.tomlsort]
all = true
in_place = true
sort_first = ["tool", "tool.poetry"]
spaces_before_inline_comment = 2
trailing_comma_inline_array = true
overrides."tool.poetry".first = ["name", "version"]
overrides."tool.poetry.dependencies".first = ["python"]

[build-system]
build-backend = "poetry_dynamic_versioning.backend"
requires = ["poetry-core>=1.0.7", "poetry-dynamic-versioning>=1.2.0,<2.0.0"]
