# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _subsets
else:
    import _subsets

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _subsets.delete_SwigPyIterator

    def value(self):
        return _subsets.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _subsets.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _subsets.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _subsets.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _subsets.SwigPyIterator_equal(self, x)

    def copy(self):
        return _subsets.SwigPyIterator_copy(self)

    def next(self):
        return _subsets.SwigPyIterator_next(self)

    def __next__(self):
        return _subsets.SwigPyIterator___next__(self)

    def previous(self):
        return _subsets.SwigPyIterator_previous(self)

    def advance(self, n):
        return _subsets.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _subsets.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _subsets.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _subsets.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _subsets.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _subsets.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _subsets.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _subsets:
_subsets.SwigPyIterator_swigregister(SwigPyIterator)

class MyVectorVector_u64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _subsets.MyVectorVector_u64_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _subsets.MyVectorVector_u64___nonzero__(self)

    def __bool__(self):
        return _subsets.MyVectorVector_u64___bool__(self)

    def __len__(self):
        return _subsets.MyVectorVector_u64___len__(self)

    def __getslice__(self, i, j):
        return _subsets.MyVectorVector_u64___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _subsets.MyVectorVector_u64___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _subsets.MyVectorVector_u64___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _subsets.MyVectorVector_u64___delitem__(self, *args)

    def __getitem__(self, *args):
        return _subsets.MyVectorVector_u64___getitem__(self, *args)

    def __setitem__(self, *args):
        return _subsets.MyVectorVector_u64___setitem__(self, *args)

    def pop(self):
        return _subsets.MyVectorVector_u64_pop(self)

    def append(self, x):
        return _subsets.MyVectorVector_u64_append(self, x)

    def empty(self):
        return _subsets.MyVectorVector_u64_empty(self)

    def size(self):
        return _subsets.MyVectorVector_u64_size(self)

    def swap(self, v):
        return _subsets.MyVectorVector_u64_swap(self, v)

    def begin(self):
        return _subsets.MyVectorVector_u64_begin(self)

    def end(self):
        return _subsets.MyVectorVector_u64_end(self)

    def rbegin(self):
        return _subsets.MyVectorVector_u64_rbegin(self)

    def rend(self):
        return _subsets.MyVectorVector_u64_rend(self)

    def clear(self):
        return _subsets.MyVectorVector_u64_clear(self)

    def get_allocator(self):
        return _subsets.MyVectorVector_u64_get_allocator(self)

    def pop_back(self):
        return _subsets.MyVectorVector_u64_pop_back(self)

    def erase(self, *args):
        return _subsets.MyVectorVector_u64_erase(self, *args)

    def __init__(self, *args):
        _subsets.MyVectorVector_u64_swiginit(self, _subsets.new_MyVectorVector_u64(*args))

    def push_back(self, x):
        return _subsets.MyVectorVector_u64_push_back(self, x)

    def front(self):
        return _subsets.MyVectorVector_u64_front(self)

    def back(self):
        return _subsets.MyVectorVector_u64_back(self)

    def assign(self, n, x):
        return _subsets.MyVectorVector_u64_assign(self, n, x)

    def resize(self, *args):
        return _subsets.MyVectorVector_u64_resize(self, *args)

    def insert(self, *args):
        return _subsets.MyVectorVector_u64_insert(self, *args)

    def reserve(self, n):
        return _subsets.MyVectorVector_u64_reserve(self, n)

    def capacity(self):
        return _subsets.MyVectorVector_u64_capacity(self)
    __swig_destroy__ = _subsets.delete_MyVectorVector_u64

# Register MyVectorVector_u64 in _subsets:
_subsets.MyVectorVector_u64_swigregister(MyVectorVector_u64)

class MyVector_u64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _subsets.MyVector_u64_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _subsets.MyVector_u64___nonzero__(self)

    def __bool__(self):
        return _subsets.MyVector_u64___bool__(self)

    def __len__(self):
        return _subsets.MyVector_u64___len__(self)

    def __getslice__(self, i, j):
        return _subsets.MyVector_u64___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _subsets.MyVector_u64___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _subsets.MyVector_u64___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _subsets.MyVector_u64___delitem__(self, *args)

    def __getitem__(self, *args):
        return _subsets.MyVector_u64___getitem__(self, *args)

    def __setitem__(self, *args):
        return _subsets.MyVector_u64___setitem__(self, *args)

    def pop(self):
        return _subsets.MyVector_u64_pop(self)

    def append(self, x):
        return _subsets.MyVector_u64_append(self, x)

    def empty(self):
        return _subsets.MyVector_u64_empty(self)

    def size(self):
        return _subsets.MyVector_u64_size(self)

    def swap(self, v):
        return _subsets.MyVector_u64_swap(self, v)

    def begin(self):
        return _subsets.MyVector_u64_begin(self)

    def end(self):
        return _subsets.MyVector_u64_end(self)

    def rbegin(self):
        return _subsets.MyVector_u64_rbegin(self)

    def rend(self):
        return _subsets.MyVector_u64_rend(self)

    def clear(self):
        return _subsets.MyVector_u64_clear(self)

    def get_allocator(self):
        return _subsets.MyVector_u64_get_allocator(self)

    def pop_back(self):
        return _subsets.MyVector_u64_pop_back(self)

    def erase(self, *args):
        return _subsets.MyVector_u64_erase(self, *args)

    def __init__(self, *args):
        _subsets.MyVector_u64_swiginit(self, _subsets.new_MyVector_u64(*args))

    def push_back(self, x):
        return _subsets.MyVector_u64_push_back(self, x)

    def front(self):
        return _subsets.MyVector_u64_front(self)

    def back(self):
        return _subsets.MyVector_u64_back(self)

    def assign(self, n, x):
        return _subsets.MyVector_u64_assign(self, n, x)

    def resize(self, *args):
        return _subsets.MyVector_u64_resize(self, *args)

    def insert(self, *args):
        return _subsets.MyVector_u64_insert(self, *args)

    def reserve(self, n):
        return _subsets.MyVector_u64_reserve(self, n)

    def capacity(self):
        return _subsets.MyVector_u64_capacity(self)
    __swig_destroy__ = _subsets.delete_MyVector_u64

# Register MyVector_u64 in _subsets:
_subsets.MyVector_u64_swigregister(MyVector_u64)

class MyVector_i64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _subsets.MyVector_i64_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _subsets.MyVector_i64___nonzero__(self)

    def __bool__(self):
        return _subsets.MyVector_i64___bool__(self)

    def __len__(self):
        return _subsets.MyVector_i64___len__(self)

    def __getslice__(self, i, j):
        return _subsets.MyVector_i64___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _subsets.MyVector_i64___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _subsets.MyVector_i64___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _subsets.MyVector_i64___delitem__(self, *args)

    def __getitem__(self, *args):
        return _subsets.MyVector_i64___getitem__(self, *args)

    def __setitem__(self, *args):
        return _subsets.MyVector_i64___setitem__(self, *args)

    def pop(self):
        return _subsets.MyVector_i64_pop(self)

    def append(self, x):
        return _subsets.MyVector_i64_append(self, x)

    def empty(self):
        return _subsets.MyVector_i64_empty(self)

    def size(self):
        return _subsets.MyVector_i64_size(self)

    def swap(self, v):
        return _subsets.MyVector_i64_swap(self, v)

    def begin(self):
        return _subsets.MyVector_i64_begin(self)

    def end(self):
        return _subsets.MyVector_i64_end(self)

    def rbegin(self):
        return _subsets.MyVector_i64_rbegin(self)

    def rend(self):
        return _subsets.MyVector_i64_rend(self)

    def clear(self):
        return _subsets.MyVector_i64_clear(self)

    def get_allocator(self):
        return _subsets.MyVector_i64_get_allocator(self)

    def pop_back(self):
        return _subsets.MyVector_i64_pop_back(self)

    def erase(self, *args):
        return _subsets.MyVector_i64_erase(self, *args)

    def __init__(self, *args):
        _subsets.MyVector_i64_swiginit(self, _subsets.new_MyVector_i64(*args))

    def push_back(self, x):
        return _subsets.MyVector_i64_push_back(self, x)

    def front(self):
        return _subsets.MyVector_i64_front(self)

    def back(self):
        return _subsets.MyVector_i64_back(self)

    def assign(self, n, x):
        return _subsets.MyVector_i64_assign(self, n, x)

    def resize(self, *args):
        return _subsets.MyVector_i64_resize(self, *args)

    def insert(self, *args):
        return _subsets.MyVector_i64_insert(self, *args)

    def reserve(self, n):
        return _subsets.MyVector_i64_reserve(self, n)

    def capacity(self):
        return _subsets.MyVector_i64_capacity(self)
    __swig_destroy__ = _subsets.delete_MyVector_i64

# Register MyVector_i64 in _subsets:
_subsets.MyVector_i64_swigregister(MyVector_i64)

class MyVector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _subsets.MyVector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _subsets.MyVector_int___nonzero__(self)

    def __bool__(self):
        return _subsets.MyVector_int___bool__(self)

    def __len__(self):
        return _subsets.MyVector_int___len__(self)

    def __getslice__(self, i, j):
        return _subsets.MyVector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _subsets.MyVector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _subsets.MyVector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _subsets.MyVector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _subsets.MyVector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _subsets.MyVector_int___setitem__(self, *args)

    def pop(self):
        return _subsets.MyVector_int_pop(self)

    def append(self, x):
        return _subsets.MyVector_int_append(self, x)

    def empty(self):
        return _subsets.MyVector_int_empty(self)

    def size(self):
        return _subsets.MyVector_int_size(self)

    def swap(self, v):
        return _subsets.MyVector_int_swap(self, v)

    def begin(self):
        return _subsets.MyVector_int_begin(self)

    def end(self):
        return _subsets.MyVector_int_end(self)

    def rbegin(self):
        return _subsets.MyVector_int_rbegin(self)

    def rend(self):
        return _subsets.MyVector_int_rend(self)

    def clear(self):
        return _subsets.MyVector_int_clear(self)

    def get_allocator(self):
        return _subsets.MyVector_int_get_allocator(self)

    def pop_back(self):
        return _subsets.MyVector_int_pop_back(self)

    def erase(self, *args):
        return _subsets.MyVector_int_erase(self, *args)

    def __init__(self, *args):
        _subsets.MyVector_int_swiginit(self, _subsets.new_MyVector_int(*args))

    def push_back(self, x):
        return _subsets.MyVector_int_push_back(self, x)

    def front(self):
        return _subsets.MyVector_int_front(self)

    def back(self):
        return _subsets.MyVector_int_back(self)

    def assign(self, n, x):
        return _subsets.MyVector_int_assign(self, n, x)

    def resize(self, *args):
        return _subsets.MyVector_int_resize(self, *args)

    def insert(self, *args):
        return _subsets.MyVector_int_insert(self, *args)

    def reserve(self, n):
        return _subsets.MyVector_int_reserve(self, n)

    def capacity(self):
        return _subsets.MyVector_int_capacity(self)
    __swig_destroy__ = _subsets.delete_MyVector_int

# Register MyVector_int in _subsets:
_subsets.MyVector_int_swigregister(MyVector_int)

class MySet_uint64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _subsets.MySet_uint64_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _subsets.MySet_uint64___nonzero__(self)

    def __bool__(self):
        return _subsets.MySet_uint64___bool__(self)

    def __len__(self):
        return _subsets.MySet_uint64___len__(self)

    def append(self, x):
        return _subsets.MySet_uint64_append(self, x)

    def __contains__(self, x):
        return _subsets.MySet_uint64___contains__(self, x)

    def __getitem__(self, i):
        return _subsets.MySet_uint64___getitem__(self, i)

    def add(self, x):
        return _subsets.MySet_uint64_add(self, x)

    def discard(self, x):
        return _subsets.MySet_uint64_discard(self, x)

    def __init__(self, *args):
        _subsets.MySet_uint64_swiginit(self, _subsets.new_MySet_uint64(*args))

    def empty(self):
        return _subsets.MySet_uint64_empty(self)

    def size(self):
        return _subsets.MySet_uint64_size(self)

    def clear(self):
        return _subsets.MySet_uint64_clear(self)

    def swap(self, v):
        return _subsets.MySet_uint64_swap(self, v)

    def count(self, x):
        return _subsets.MySet_uint64_count(self, x)

    def begin(self):
        return _subsets.MySet_uint64_begin(self)

    def end(self):
        return _subsets.MySet_uint64_end(self)

    def rbegin(self):
        return _subsets.MySet_uint64_rbegin(self)

    def rend(self):
        return _subsets.MySet_uint64_rend(self)

    def erase(self, *args):
        return _subsets.MySet_uint64_erase(self, *args)

    def find(self, x):
        return _subsets.MySet_uint64_find(self, x)

    def lower_bound(self, x):
        return _subsets.MySet_uint64_lower_bound(self, x)

    def upper_bound(self, x):
        return _subsets.MySet_uint64_upper_bound(self, x)

    def equal_range(self, x):
        return _subsets.MySet_uint64_equal_range(self, x)

    def insert(self, __x):
        return _subsets.MySet_uint64_insert(self, __x)
    __swig_destroy__ = _subsets.delete_MySet_uint64

# Register MySet_uint64 in _subsets:
_subsets.MySet_uint64_swigregister(MySet_uint64)

class MyMap_PII_u64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _subsets.MyMap_PII_u64_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _subsets.MyMap_PII_u64___nonzero__(self)

    def __bool__(self):
        return _subsets.MyMap_PII_u64___bool__(self)

    def __len__(self):
        return _subsets.MyMap_PII_u64___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _subsets.MyMap_PII_u64___getitem__(self, key)

    def __delitem__(self, key):
        return _subsets.MyMap_PII_u64___delitem__(self, key)

    def has_key(self, key):
        return _subsets.MyMap_PII_u64_has_key(self, key)

    def keys(self):
        return _subsets.MyMap_PII_u64_keys(self)

    def values(self):
        return _subsets.MyMap_PII_u64_values(self)

    def items(self):
        return _subsets.MyMap_PII_u64_items(self)

    def __contains__(self, key):
        return _subsets.MyMap_PII_u64___contains__(self, key)

    def key_iterator(self):
        return _subsets.MyMap_PII_u64_key_iterator(self)

    def value_iterator(self):
        return _subsets.MyMap_PII_u64_value_iterator(self)

    def __setitem__(self, *args):
        return _subsets.MyMap_PII_u64___setitem__(self, *args)

    def asdict(self):
        return _subsets.MyMap_PII_u64_asdict(self)

    def __init__(self, *args):
        _subsets.MyMap_PII_u64_swiginit(self, _subsets.new_MyMap_PII_u64(*args))

    def empty(self):
        return _subsets.MyMap_PII_u64_empty(self)

    def size(self):
        return _subsets.MyMap_PII_u64_size(self)

    def swap(self, v):
        return _subsets.MyMap_PII_u64_swap(self, v)

    def begin(self):
        return _subsets.MyMap_PII_u64_begin(self)

    def end(self):
        return _subsets.MyMap_PII_u64_end(self)

    def rbegin(self):
        return _subsets.MyMap_PII_u64_rbegin(self)

    def rend(self):
        return _subsets.MyMap_PII_u64_rend(self)

    def clear(self):
        return _subsets.MyMap_PII_u64_clear(self)

    def get_allocator(self):
        return _subsets.MyMap_PII_u64_get_allocator(self)

    def count(self, x):
        return _subsets.MyMap_PII_u64_count(self, x)

    def erase(self, *args):
        return _subsets.MyMap_PII_u64_erase(self, *args)

    def find(self, x):
        return _subsets.MyMap_PII_u64_find(self, x)

    def lower_bound(self, x):
        return _subsets.MyMap_PII_u64_lower_bound(self, x)

    def upper_bound(self, x):
        return _subsets.MyMap_PII_u64_upper_bound(self, x)
    __swig_destroy__ = _subsets.delete_MyMap_PII_u64

# Register MyMap_PII_u64 in _subsets:
_subsets.MyMap_PII_u64_swigregister(MyMap_PII_u64)


import ctypes


def HI(x):
    return _subsets.HI(x)

def LO(x):
    return _subsets.LO(x)

def HICEIL(x):
    return _subsets.HICEIL(x)
class BitSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_subsets.BitSet_n_get, _subsets.BitSet_n_set)
    data = property(_subsets.BitSet_data_get, _subsets.BitSet_data_set)
    VERSION_SPARSE = _subsets.BitSet_VERSION_SPARSE
    VERSION_DENSE = _subsets.BitSet_VERSION_DENSE
    MARKER_END = _subsets.BitSet_MARKER_END
    QUIET = property(_subsets.BitSet_QUIET_get, _subsets.BitSet_QUIET_set)

    @staticmethod
    def set_quiet(value=True):
        return _subsets.BitSet_set_quiet(value)

    def __init__(self, *args):
        _subsets.BitSet_swiginit(self, _subsets.new_BitSet(*args))

    def copy(self):
        return _subsets.BitSet_copy(self)

    def resize(self, n):
        return _subsets.BitSet_resize(self, n)

    def nwords(self):
        return _subsets.BitSet_nwords(self)

    def _trim(self):
        return _subsets.BitSet__trim(self)

    def clear(self):
        return _subsets.BitSet_clear(self)

    def empty(self):
        return _subsets.BitSet_empty(self)

    def fill(self):
        return _subsets.BitSet_fill(self)

    def is_empty(self):
        return _subsets.BitSet_is_empty(self)

    def is_full(self):
        return _subsets.BitSet_is_full(self)

    def save_to_file(self, *args):
        return _subsets.BitSet_save_to_file(self, *args)

    @staticmethod
    def load_from_file(*args):
        return _subsets.BitSet_load_from_file(*args)

    def str(self):
        return _subsets.BitSet_str(self)

    def info(self):
        return _subsets.BitSet_info(self)

    def get_hash(self):
        return _subsets.BitSet_get_hash(self)

    def get(self, i):
        return _subsets.BitSet_get(self, i)

    def unset(self, i):
        return _subsets.BitSet_unset(self, i)

    def set(self, *args):
        return _subsets.BitSet_set(self, *args)

    def add(self, x):
        return _subsets.BitSet_add(self, x)

    def remove(self, x):
        return _subsets.BitSet_remove(self, x)

    def discard(self, x):
        return _subsets.BitSet_discard(self, x)

    def __eq__(self, bs):
        return _subsets.BitSet___eq__(self, bs)

    def __ne__(self, bs):
        return _subsets.BitSet___ne__(self, bs)

    def __lt__(self, bs):
        return _subsets.BitSet___lt__(self, bs)

    def __gt__(self, bs):
        return _subsets.BitSet___gt__(self, bs)

    def __le__(self, bs):
        return _subsets.BitSet___le__(self, bs)

    def __ge__(self, bs):
        return _subsets.BitSet___ge__(self, bs)

    def __ior__(self, bs):
        return _subsets.BitSet___ior__(self, bs)

    def __ixor__(self, bs):
        return _subsets.BitSet___ixor__(self, bs)

    def __iand__(self, bs):
        return _subsets.BitSet___iand__(self, bs)

    def __isub__(self, bs):
        return _subsets.BitSet___isub__(self, bs)

    def __xor__(self, bs):
        return _subsets.BitSet___xor__(self, bs)

    def __or__(self, bs):
        return _subsets.BitSet___or__(self, bs)

    def __and__(self, bs):
        return _subsets.BitSet___and__(self, bs)

    def __sub__(self, bs):
        return _subsets.BitSet___sub__(self, bs)

    def iter_support(self, func):
        return _subsets.BitSet_iter_support(self, func)

    def get_support(self):
        return _subsets.BitSet_get_support(self)

    def get_weight(self):
        return _subsets.BitSet_get_weight(self)

    def do_Complement(self):
        return _subsets.BitSet_do_Complement(self)

    def Complement(self):
        return _subsets.BitSet_Complement(self)

    def _get_data_ptr(self):
        return _subsets.BitSet__get_data_ptr(self)

    def __bool__(self):
        return not self.is_empty()

    def __str__(self):
        return self.str()

    def __repr__(self):
        return self.info()

    def __contains__(self, x):
        return bool(self.get(x))

    def __iter__(self):
        return iter(self.get_support())

    def __len__(self):
        return self.get_weight()

    def __getstate__(self):
        data = ctypes.string_at(self._get_data_ptr(), self.data.size() * 8)
        return self.n, self.data.size(), data

    def __setstate__(self, st):
        n, l, data = st
        self.__init__(n)
        assert self.data.size() == l
        dst = self._get_data_ptr()
        src = self._bytes_to_ctypes(data)
        ctypes.memmove(dst, src, len(data))
        return self

    __swig_destroy__ = _subsets.delete_BitSet

    @staticmethod
    def _bytes_to_ctypes(data):
        try:
    # version for pypy, fails on python (non writeable)
            return (ctypes.c_char * len(data)).from_buffer(data)
        except:
    # version for python, fails on pypy (makes extra copies)
            return ctypes.cast(data, ctypes.c_void_p)

    __swig_destroy__ = _subsets.delete_BitSet

# Register BitSet in _subsets:
_subsets.BitSet_swigregister(BitSet)
cvar = _subsets.cvar

def BitSet_set_quiet(value=True):
    return _subsets.BitSet_set_quiet(value)

def BitSet_load_from_file(*args):
    return _subsets.BitSet_load_from_file(*args)


from binteger import Bin

class DenseSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_subsets.DenseSet_n_get, _subsets.DenseSet_n_set)
    data = property(_subsets.DenseSet_data_get, _subsets.DenseSet_data_set)

    @staticmethod
    def set_quiet(value=True):
        return _subsets.DenseSet_set_quiet(value)

    def __init__(self, *args):
        _subsets.DenseSet_swiginit(self, _subsets.new_DenseSet(*args))

    def copy(self):
        return _subsets.DenseSet_copy(self)

    def resize(self, n):
        return _subsets.DenseSet_resize(self, n)

    def clear(self):
        return _subsets.DenseSet_clear(self)

    def empty(self):
        return _subsets.DenseSet_empty(self)

    def fill(self):
        return _subsets.DenseSet_fill(self)

    def is_empty(self):
        return _subsets.DenseSet_is_empty(self)

    def is_full(self):
        return _subsets.DenseSet_is_full(self)

    def save_to_file(self, filename):
        return _subsets.DenseSet_save_to_file(self, filename)

    @staticmethod
    def load_from_file(filename):
        return _subsets.DenseSet_load_from_file(filename)

    def get_hash(self):
        return _subsets.DenseSet_get_hash(self)

    def info(self):
        return _subsets.DenseSet_info(self)

    def get(self, x):
        return _subsets.DenseSet_get(self, x)

    def flip(self, x):
        return _subsets.DenseSet_flip(self, x)

    def unset(self, x):
        return _subsets.DenseSet_unset(self, x)

    def set(self, *args):
        return _subsets.DenseSet_set(self, *args)

    def add(self, x):
        return _subsets.DenseSet_add(self, x)

    def remove(self, x):
        return _subsets.DenseSet_remove(self, x)

    def discard(self, x):
        return _subsets.DenseSet_discard(self, x)

    def is_compatible_set(self, b):
        return _subsets.DenseSet_is_compatible_set(self, b)

    def __eq__(self, b):
        return _subsets.DenseSet___eq__(self, b)

    def __ne__(self, b):
        return _subsets.DenseSet___ne__(self, b)

    def __lt__(self, b):
        return _subsets.DenseSet___lt__(self, b)

    def __le__(self, b):
        return _subsets.DenseSet___le__(self, b)

    def __gt__(self, b):
        return _subsets.DenseSet___gt__(self, b)

    def __ge__(self, b):
        return _subsets.DenseSet___ge__(self, b)

    def __ior__(self, b):
        return _subsets.DenseSet___ior__(self, b)

    def __ixor__(self, b):
        return _subsets.DenseSet___ixor__(self, b)

    def __iand__(self, b):
        return _subsets.DenseSet___iand__(self, b)

    def __isub__(self, b):
        return _subsets.DenseSet___isub__(self, b)

    def __or__(self, b):
        return _subsets.DenseSet___or__(self, b)

    def __xor__(self, b):
        return _subsets.DenseSet___xor__(self, b)

    def __and__(self, b):
        return _subsets.DenseSet___and__(self, b)

    def __sub__(self, b):
        return _subsets.DenseSet___sub__(self, b)

    def get_head_fixed(self, h, value):
        return _subsets.DenseSet_get_head_fixed(self, h, value)

    def iter_support(self, func):
        return _subsets.DenseSet_iter_support(self, func)

    def get_support(self):
        return _subsets.DenseSet_get_support(self)

    def get_weight(self):
        return _subsets.DenseSet_get_weight(self)

    def get_counts_by_weights(self):
        return _subsets.DenseSet_get_counts_by_weights(self)

    def get_counts_by_weight_pairs(self, n1, n2):
        return _subsets.DenseSet_get_counts_by_weight_pairs(self, n1, n2)

    def str_stat_by_weights(self):
        return _subsets.DenseSet_str_stat_by_weights(self)

    def str_stat_by_weight_pairs(self, n1, n2):
        return _subsets.DenseSet_str_stat_by_weight_pairs(self, n1, n2)

    def do_Sweep_OR_up(self, *args):
        return _subsets.DenseSet_do_Sweep_OR_up(self, *args)

    def do_Sweep_OR_down(self, *args):
        return _subsets.DenseSet_do_Sweep_OR_down(self, *args)

    def do_Sweep_XOR_up(self, *args):
        return _subsets.DenseSet_do_Sweep_XOR_up(self, *args)

    def do_Sweep_XOR_down(self, *args):
        return _subsets.DenseSet_do_Sweep_XOR_down(self, *args)

    def do_Sweep_AND_up(self, *args):
        return _subsets.DenseSet_do_Sweep_AND_up(self, *args)

    def do_Sweep_AND_down(self, *args):
        return _subsets.DenseSet_do_Sweep_AND_down(self, *args)

    def do_Sweep_SWAP(self, *args):
        return _subsets.DenseSet_do_Sweep_SWAP(self, *args)

    def do_Sweep_LESS_up(self, *args):
        return _subsets.DenseSet_do_Sweep_LESS_up(self, *args)

    def do_Sweep_MORE_down(self, *args):
        return _subsets.DenseSet_do_Sweep_MORE_down(self, *args)

    def do_UnsetUp(self, *args):
        return _subsets.DenseSet_do_UnsetUp(self, *args)

    def do_UnsetDown(self, *args):
        return _subsets.DenseSet_do_UnsetDown(self, *args)

    def do_SetUp(self, *args):
        return _subsets.DenseSet_do_SetUp(self, *args)

    def do_SetDown(self, *args):
        return _subsets.DenseSet_do_SetDown(self, *args)

    def do_Mobius(self, *args):
        return _subsets.DenseSet_do_Mobius(self, *args)

    def do_ParitySet(self, *args):
        return _subsets.DenseSet_do_ParitySet(self, *args)

    def do_Complement(self):
        return _subsets.DenseSet_do_Complement(self)

    def do_Not(self, *args):
        return _subsets.DenseSet_do_Not(self, *args)

    def do_UpperSet(self, *args):
        return _subsets.DenseSet_do_UpperSet(self, *args)

    def do_LowerSet(self, *args):
        return _subsets.DenseSet_do_LowerSet(self, *args)

    def do_MinSet(self, *args):
        return _subsets.DenseSet_do_MinSet(self, *args)

    def do_MaxSet(self, *args):
        return _subsets.DenseSet_do_MaxSet(self, *args)

    def do_DivCore(self, *args):
        return _subsets.DenseSet_do_DivCore(self, *args)

    def do_ComplementU2L(self, *args):
        return _subsets.DenseSet_do_ComplementU2L(self, *args)

    def do_ComplementL2U(self, *args):
        return _subsets.DenseSet_do_ComplementL2U(self, *args)

    def do_UpperSet_Up1(self, *args):
        return _subsets.DenseSet_do_UpperSet_Up1(self, *args)

    def WalshHadamard(self, *args):
        return _subsets.DenseSet_WalshHadamard(self, *args)

    def Mobius(self, *args):
        return _subsets.DenseSet_Mobius(self, *args)

    def ParitySet(self, *args):
        return _subsets.DenseSet_ParitySet(self, *args)

    def Complement(self):
        return _subsets.DenseSet_Complement(self)

    def Not(self, *args):
        return _subsets.DenseSet_Not(self, *args)

    def UpperSet(self, *args):
        return _subsets.DenseSet_UpperSet(self, *args)

    def LowerSet(self, *args):
        return _subsets.DenseSet_LowerSet(self, *args)

    def MinSet(self, *args):
        return _subsets.DenseSet_MinSet(self, *args)

    def MaxSet(self, *args):
        return _subsets.DenseSet_MaxSet(self, *args)

    def DivCore(self, *args):
        return _subsets.DenseSet_DivCore(self, *args)

    def ComplementU2L(self, *args):
        return _subsets.DenseSet_ComplementU2L(self, *args)

    def ComplementL2U(self, *args):
        return _subsets.DenseSet_ComplementL2U(self, *args)

    def UpperSet_Up1(self, *args):
        return _subsets.DenseSet_UpperSet_Up1(self, *args)

    def to_DenseBox(self, dimensions):
        return _subsets.DenseSet_to_DenseBox(self, dimensions)

    def __bool__(self):
        return not self.is_empty()

    def __str__(self):
        return self.info()

    def __repr__(self):
        return self.info()

    def __contains__(self, x):
        return bool(self.get(x))

    def __iter__(self):
        return iter(self.get_support())

    def __len__(self):
        return self.get_weight()

    def __getitem__(self, x):
        return self.get(int(x))

    def __setitem__(self, x, v):
        assert int(v) in (0, 1)
        return self.set(int(x), int(v))

    def to_Bins(self):
        n = int(self.n)
        return [Bin(v, n) for v in self]

    def __getstate__(self):
        return self.n, self.data.__getstate__()

    def __setstate__(self, st):
        n, data = st
        self.__init__(n)
        self.data.__setstate__(data)
        return self

    __swig_destroy__ = _subsets.delete_DenseSet

# Register DenseSet in _subsets:
_subsets.DenseSet_swigregister(DenseSet)

def DenseSet_set_quiet(value=True):
    return _subsets.DenseSet_set_quiet(value)

def DenseSet_load_from_file(filename):
    return _subsets.DenseSet_load_from_file(filename)

class DenseBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_subsets.DenseBox_n_get, _subsets.DenseBox_n_set)
    fullsize = property(_subsets.DenseBox_fullsize_get, _subsets.DenseBox_fullsize_set)
    dimensions = property(_subsets.DenseBox_dimensions_get, _subsets.DenseBox_dimensions_set)
    data = property(_subsets.DenseBox_data_get, _subsets.DenseBox_data_set)
    VERSION = _subsets.DenseBox_VERSION
    MARKER_END = _subsets.DenseBox_MARKER_END

    def __init__(self, *args):
        _subsets.DenseBox_swiginit(self, _subsets.new_DenseBox(*args))

    def copy(self):
        return _subsets.DenseBox_copy(self)

    def clear(self):
        return _subsets.DenseBox_clear(self)

    def empty(self):
        return _subsets.DenseBox_empty(self)

    def fill(self):
        return _subsets.DenseBox_fill(self)

    def is_empty(self):
        return _subsets.DenseBox_is_empty(self)

    def is_full(self):
        return _subsets.DenseBox_is_full(self)

    def save_to_file(self, *args):
        return _subsets.DenseBox_save_to_file(self, *args)

    @staticmethod
    def load_from_file(*args):
        return _subsets.DenseBox_load_from_file(*args)

    def info(self):
        return _subsets.DenseBox_info(self)

    def _print(self):
        return _subsets.DenseBox__print(self)

    def get_hash(self):
        return _subsets.DenseBox_get_hash(self)

    def unpack(self, x):
        return _subsets.DenseBox_unpack(self, x)

    def pack(self, xs):
        return _subsets.DenseBox_pack(self, xs)

    def project(self, x):
        return _subsets.DenseBox_project(self, x)

    @staticmethod
    def _unpack(x, dimensions):
        return _subsets.DenseBox__unpack(x, dimensions)

    @staticmethod
    def _pack(xs, dimensions):
        return _subsets.DenseBox__pack(xs, dimensions)

    @staticmethod
    def _project(x, dimensions):
        return _subsets.DenseBox__project(x, dimensions)

    def get(self, *args):
        return _subsets.DenseBox_get(self, *args)

    def unset(self, *args):
        return _subsets.DenseBox_unset(self, *args)

    def set(self, *args):
        return _subsets.DenseBox_set(self, *args)

    def add(self, *args):
        return _subsets.DenseBox_add(self, *args)

    def remove(self, *args):
        return _subsets.DenseBox_remove(self, *args)

    def discard(self, *args):
        return _subsets.DenseBox_discard(self, *args)

    def iter_support(self, func):
        return _subsets.DenseBox_iter_support(self, func)

    def get_support(self):
        return _subsets.DenseBox_get_support(self)

    def get_unpacked(self):
        return _subsets.DenseBox_get_unpacked(self)

    def get_weight(self):
        return _subsets.DenseBox_get_weight(self)

    def get_counts_by_weights(self):
        return _subsets.DenseBox_get_counts_by_weights(self)

    def str_stat_by_weights(self):
        return _subsets.DenseBox_str_stat_by_weights(self)

    def is_compatible_set(self, b):
        return _subsets.DenseBox_is_compatible_set(self, b)

    def __eq__(self, b):
        return _subsets.DenseBox___eq__(self, b)

    def __ne__(self, b):
        return _subsets.DenseBox___ne__(self, b)

    def __lt__(self, b):
        return _subsets.DenseBox___lt__(self, b)

    def __gt__(self, b):
        return _subsets.DenseBox___gt__(self, b)

    def __le__(self, b):
        return _subsets.DenseBox___le__(self, b)

    def __ge__(self, b):
        return _subsets.DenseBox___ge__(self, b)

    def __ior__(self, b):
        return _subsets.DenseBox___ior__(self, b)

    def __ixor__(self, b):
        return _subsets.DenseBox___ixor__(self, b)

    def __iand__(self, b):
        return _subsets.DenseBox___iand__(self, b)

    def __isub__(self, b):
        return _subsets.DenseBox___isub__(self, b)

    def __or__(self, b):
        return _subsets.DenseBox___or__(self, b)

    def __xor__(self, b):
        return _subsets.DenseBox___xor__(self, b)

    def __and__(self, b):
        return _subsets.DenseBox___and__(self, b)

    def __sub__(self, b):
        return _subsets.DenseBox___sub__(self, b)

    def __invert__(self):
        return _subsets.DenseBox___invert__(self)

    @staticmethod
    def OR_up(cut):
        return _subsets.DenseBox_OR_up(cut)

    @staticmethod
    def OR_down(cut):
        return _subsets.DenseBox_OR_down(cut)

    @staticmethod
    def MAX(cut):
        return _subsets.DenseBox_MAX(cut)

    @staticmethod
    def MIN(cut):
        return _subsets.DenseBox_MIN(cut)

    @staticmethod
    def REV(cut):
        return _subsets.DenseBox_REV(cut)

    @staticmethod
    def AND_up_OR(cut):
        return _subsets.DenseBox_AND_up_OR(cut)

    @staticmethod
    def NOTAND_down(cut):
        return _subsets.DenseBox_NOTAND_down(cut)

    def do_Sweep_OR_up(self, *args):
        return _subsets.DenseBox_do_Sweep_OR_up(self, *args)

    def do_Sweep_OR_down(self, *args):
        return _subsets.DenseBox_do_Sweep_OR_down(self, *args)

    def do_Sweep_MAX(self, *args):
        return _subsets.DenseBox_do_Sweep_MAX(self, *args)

    def do_Sweep_MIN(self, *args):
        return _subsets.DenseBox_do_Sweep_MIN(self, *args)

    def do_Sweep_REV(self, *args):
        return _subsets.DenseBox_do_Sweep_REV(self, *args)

    def do_Sweep_AND_up_OR(self, *args):
        return _subsets.DenseBox_do_Sweep_AND_up_OR(self, *args)

    def do_Sweep_NOTAND_down(self, *args):
        return _subsets.DenseBox_do_Sweep_NOTAND_down(self, *args)

    def do_UpperSet(self, *args):
        return _subsets.DenseBox_do_UpperSet(self, *args)

    def do_LowerSet(self, *args):
        return _subsets.DenseBox_do_LowerSet(self, *args)

    def do_MaxSet(self, *args):
        return _subsets.DenseBox_do_MaxSet(self, *args)

    def do_MinSet(self, *args):
        return _subsets.DenseBox_do_MinSet(self, *args)

    def do_Complement(self):
        return _subsets.DenseBox_do_Complement(self)

    def do_ComplementU2L(self, *args):
        return _subsets.DenseBox_do_ComplementU2L(self, *args)

    def do_ComplementL2U(self, *args):
        return _subsets.DenseBox_do_ComplementL2U(self, *args)

    def UpperSet(self, *args):
        return _subsets.DenseBox_UpperSet(self, *args)

    def LowerSet(self, *args):
        return _subsets.DenseBox_LowerSet(self, *args)

    def MaxSet(self, *args):
        return _subsets.DenseBox_MaxSet(self, *args)

    def MinSet(self, *args):
        return _subsets.DenseBox_MinSet(self, *args)

    def Complement(self):
        return _subsets.DenseBox_Complement(self)

    def ComplementU2L(self, *args):
        return _subsets.DenseBox_ComplementU2L(self, *args)

    def ComplementL2U(self, *args):
        return _subsets.DenseBox_ComplementL2U(self, *args)

    def to_DenseSet(self):
        return _subsets.DenseBox_to_DenseSet(self)

    def __bool__(self):
        return not self.is_empty()
    def __str__(self):
        return self.info()
    def __repr__(self):
        return self.info()
    def __contains__(self, x):
        return bool(self.get(x))
    def __iter__(self):
        return iter(self.get_support())
    def __len__(self):
        return self.get_weight()

    def __getstate__(self):
        return self.VERSION, list(self.dimensions), self.data.__getstate__()

    def __setstate__(self, st):
        version, dimensions, data = st
        assert version == self.VERSION
        self.__init__(dimensions)
        self.data.__setstate__(data)
        return self

    __swig_destroy__ = _subsets.delete_DenseBox

# Register DenseBox in _subsets:
_subsets.DenseBox_swigregister(DenseBox)

def DenseBox_load_from_file(*args):
    return _subsets.DenseBox_load_from_file(*args)

def DenseBox__unpack(x, dimensions):
    return _subsets.DenseBox__unpack(x, dimensions)

def DenseBox__pack(xs, dimensions):
    return _subsets.DenseBox__pack(xs, dimensions)

def DenseBox__project(x, dimensions):
    return _subsets.DenseBox__project(x, dimensions)

def DenseBox_OR_up(cut):
    return _subsets.DenseBox_OR_up(cut)

def DenseBox_OR_down(cut):
    return _subsets.DenseBox_OR_down(cut)

def DenseBox_MAX(cut):
    return _subsets.DenseBox_MAX(cut)

def DenseBox_MIN(cut):
    return _subsets.DenseBox_MIN(cut)

def DenseBox_REV(cut):
    return _subsets.DenseBox_REV(cut)

def DenseBox_AND_up_OR(cut):
    return _subsets.DenseBox_AND_up_OR(cut)

def DenseBox_NOTAND_down(cut):
    return _subsets.DenseBox_NOTAND_down(cut)

class DenseTernary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_subsets.DenseTernary_n_get, _subsets.DenseTernary_n_set)
    fullsize = property(_subsets.DenseTernary_fullsize_get, _subsets.DenseTernary_fullsize_set)
    data = property(_subsets.DenseTernary_data_get, _subsets.DenseTernary_data_set)

    @staticmethod
    def HI(x):
        return _subsets.DenseTernary_HI(x)

    @staticmethod
    def LO(x):
        return _subsets.DenseTernary_LO(x)

    def __init__(self, *args):
        _subsets.DenseTernary_swiginit(self, _subsets.new_DenseTernary(*args))

    def get(self, x):
        return _subsets.DenseTernary_get(self, x)

    def set(self, x):
        return _subsets.DenseTernary_set(self, x)

    def do_Sweep_QmC_AND_up_OR(self, *args):
        return _subsets.DenseTernary_do_Sweep_QmC_AND_up_OR(self, *args)

    def do_Sweep_QmC_NOTAND_down(self, *args):
        return _subsets.DenseTernary_do_Sweep_QmC_NOTAND_down(self, *args)

    def do_MaxCubes(self, *args):
        return _subsets.DenseTernary_do_MaxCubes(self, *args)

    def iter_support(self, func):
        return _subsets.DenseTernary_iter_support(self, func)

    def get_support(self):
        return _subsets.DenseTernary_get_support(self)

    def get_weight(self):
        return _subsets.DenseTernary_get_weight(self)

    def __contains__(self, x):
        return bool(self.get(x))
    def __iter__(self):
        return iter(self.get_support())
    def __len__(self):
        return self.get_weight()

    __swig_destroy__ = _subsets.delete_DenseTernary

# Register DenseTernary in _subsets:
_subsets.DenseTernary_swigregister(DenseTernary)

def DenseTernary_HI(x):
    return _subsets.DenseTernary_HI(x)

def DenseTernary_LO(x):
    return _subsets.DenseTernary_LO(x)

class Vec_DenseSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _subsets.Vec_DenseSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _subsets.Vec_DenseSet___nonzero__(self)

    def __bool__(self):
        return _subsets.Vec_DenseSet___bool__(self)

    def __len__(self):
        return _subsets.Vec_DenseSet___len__(self)

    def __getslice__(self, i, j):
        return _subsets.Vec_DenseSet___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _subsets.Vec_DenseSet___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _subsets.Vec_DenseSet___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _subsets.Vec_DenseSet___delitem__(self, *args)

    def __getitem__(self, *args):
        return _subsets.Vec_DenseSet___getitem__(self, *args)

    def __setitem__(self, *args):
        return _subsets.Vec_DenseSet___setitem__(self, *args)

    def pop(self):
        return _subsets.Vec_DenseSet_pop(self)

    def append(self, x):
        return _subsets.Vec_DenseSet_append(self, x)

    def empty(self):
        return _subsets.Vec_DenseSet_empty(self)

    def size(self):
        return _subsets.Vec_DenseSet_size(self)

    def swap(self, v):
        return _subsets.Vec_DenseSet_swap(self, v)

    def begin(self):
        return _subsets.Vec_DenseSet_begin(self)

    def end(self):
        return _subsets.Vec_DenseSet_end(self)

    def rbegin(self):
        return _subsets.Vec_DenseSet_rbegin(self)

    def rend(self):
        return _subsets.Vec_DenseSet_rend(self)

    def clear(self):
        return _subsets.Vec_DenseSet_clear(self)

    def get_allocator(self):
        return _subsets.Vec_DenseSet_get_allocator(self)

    def pop_back(self):
        return _subsets.Vec_DenseSet_pop_back(self)

    def erase(self, *args):
        return _subsets.Vec_DenseSet_erase(self, *args)

    def __init__(self, *args):
        _subsets.Vec_DenseSet_swiginit(self, _subsets.new_Vec_DenseSet(*args))

    def push_back(self, x):
        return _subsets.Vec_DenseSet_push_back(self, x)

    def front(self):
        return _subsets.Vec_DenseSet_front(self)

    def back(self):
        return _subsets.Vec_DenseSet_back(self)

    def assign(self, n, x):
        return _subsets.Vec_DenseSet_assign(self, n, x)

    def resize(self, *args):
        return _subsets.Vec_DenseSet_resize(self, *args)

    def insert(self, *args):
        return _subsets.Vec_DenseSet_insert(self, *args)

    def reserve(self, n):
        return _subsets.Vec_DenseSet_reserve(self, n)

    def capacity(self):
        return _subsets.Vec_DenseSet_capacity(self)
    __swig_destroy__ = _subsets.delete_Vec_DenseSet

# Register Vec_DenseSet in _subsets:
_subsets.Vec_DenseSet_swigregister(Vec_DenseSet)

class Vec_DenseBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _subsets.Vec_DenseBox_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _subsets.Vec_DenseBox___nonzero__(self)

    def __bool__(self):
        return _subsets.Vec_DenseBox___bool__(self)

    def __len__(self):
        return _subsets.Vec_DenseBox___len__(self)

    def __getslice__(self, i, j):
        return _subsets.Vec_DenseBox___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _subsets.Vec_DenseBox___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _subsets.Vec_DenseBox___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _subsets.Vec_DenseBox___delitem__(self, *args)

    def __getitem__(self, *args):
        return _subsets.Vec_DenseBox___getitem__(self, *args)

    def __setitem__(self, *args):
        return _subsets.Vec_DenseBox___setitem__(self, *args)

    def pop(self):
        return _subsets.Vec_DenseBox_pop(self)

    def append(self, x):
        return _subsets.Vec_DenseBox_append(self, x)

    def empty(self):
        return _subsets.Vec_DenseBox_empty(self)

    def size(self):
        return _subsets.Vec_DenseBox_size(self)

    def swap(self, v):
        return _subsets.Vec_DenseBox_swap(self, v)

    def begin(self):
        return _subsets.Vec_DenseBox_begin(self)

    def end(self):
        return _subsets.Vec_DenseBox_end(self)

    def rbegin(self):
        return _subsets.Vec_DenseBox_rbegin(self)

    def rend(self):
        return _subsets.Vec_DenseBox_rend(self)

    def clear(self):
        return _subsets.Vec_DenseBox_clear(self)

    def get_allocator(self):
        return _subsets.Vec_DenseBox_get_allocator(self)

    def pop_back(self):
        return _subsets.Vec_DenseBox_pop_back(self)

    def erase(self, *args):
        return _subsets.Vec_DenseBox_erase(self, *args)

    def __init__(self, *args):
        _subsets.Vec_DenseBox_swiginit(self, _subsets.new_Vec_DenseBox(*args))

    def push_back(self, x):
        return _subsets.Vec_DenseBox_push_back(self, x)

    def front(self):
        return _subsets.Vec_DenseBox_front(self)

    def back(self):
        return _subsets.Vec_DenseBox_back(self)

    def assign(self, n, x):
        return _subsets.Vec_DenseBox_assign(self, n, x)

    def resize(self, *args):
        return _subsets.Vec_DenseBox_resize(self, *args)

    def insert(self, *args):
        return _subsets.Vec_DenseBox_insert(self, *args)

    def reserve(self, n):
        return _subsets.Vec_DenseBox_reserve(self, n)

    def capacity(self):
        return _subsets.Vec_DenseBox_capacity(self)
    __swig_destroy__ = _subsets.delete_Vec_DenseBox

# Register Vec_DenseBox in _subsets:
_subsets.Vec_DenseBox_swigregister(Vec_DenseBox)

class Vec_DenseTernary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _subsets.Vec_DenseTernary_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _subsets.Vec_DenseTernary___nonzero__(self)

    def __bool__(self):
        return _subsets.Vec_DenseTernary___bool__(self)

    def __len__(self):
        return _subsets.Vec_DenseTernary___len__(self)

    def __getslice__(self, i, j):
        return _subsets.Vec_DenseTernary___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _subsets.Vec_DenseTernary___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _subsets.Vec_DenseTernary___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _subsets.Vec_DenseTernary___delitem__(self, *args)

    def __getitem__(self, *args):
        return _subsets.Vec_DenseTernary___getitem__(self, *args)

    def __setitem__(self, *args):
        return _subsets.Vec_DenseTernary___setitem__(self, *args)

    def pop(self):
        return _subsets.Vec_DenseTernary_pop(self)

    def append(self, x):
        return _subsets.Vec_DenseTernary_append(self, x)

    def empty(self):
        return _subsets.Vec_DenseTernary_empty(self)

    def size(self):
        return _subsets.Vec_DenseTernary_size(self)

    def swap(self, v):
        return _subsets.Vec_DenseTernary_swap(self, v)

    def begin(self):
        return _subsets.Vec_DenseTernary_begin(self)

    def end(self):
        return _subsets.Vec_DenseTernary_end(self)

    def rbegin(self):
        return _subsets.Vec_DenseTernary_rbegin(self)

    def rend(self):
        return _subsets.Vec_DenseTernary_rend(self)

    def clear(self):
        return _subsets.Vec_DenseTernary_clear(self)

    def get_allocator(self):
        return _subsets.Vec_DenseTernary_get_allocator(self)

    def pop_back(self):
        return _subsets.Vec_DenseTernary_pop_back(self)

    def erase(self, *args):
        return _subsets.Vec_DenseTernary_erase(self, *args)

    def __init__(self, *args):
        _subsets.Vec_DenseTernary_swiginit(self, _subsets.new_Vec_DenseTernary(*args))

    def push_back(self, x):
        return _subsets.Vec_DenseTernary_push_back(self, x)

    def front(self):
        return _subsets.Vec_DenseTernary_front(self)

    def back(self):
        return _subsets.Vec_DenseTernary_back(self)

    def assign(self, n, x):
        return _subsets.Vec_DenseTernary_assign(self, n, x)

    def resize(self, *args):
        return _subsets.Vec_DenseTernary_resize(self, *args)

    def insert(self, *args):
        return _subsets.Vec_DenseTernary_insert(self, *args)

    def reserve(self, n):
        return _subsets.Vec_DenseTernary_reserve(self, n)

    def capacity(self):
        return _subsets.Vec_DenseTernary_capacity(self)
    __swig_destroy__ = _subsets.delete_Vec_DenseTernary

# Register Vec_DenseTernary in _subsets:
_subsets.Vec_DenseTernary_swigregister(Vec_DenseTernary)



