Metadata-Version: 2.1
Name: pytorch-riscv64
Version: 2.3.0a1
Summary: Tensors and Dynamic neural networks in Python
Home-page: https://pytorch.org/
Download-URL: https://github.com/pytorch/pytorch/tags
Author: Rongchang Lu
Author-email: nomodeset@qq.com
License: BSD-3
Keywords: pytorch,machine learning
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: BSD License
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Programming Language :: C++
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8.0
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: NOTICE
Requires-Dist: filelock
Requires-Dist: typing-extensions (>=4.8.0)
Requires-Dist: sympy
Requires-Dist: networkx
Requires-Dist: jinja2
Requires-Dist: fsspec
Requires-Dist: mkl (<=2021.4.0,>=2021.1.1) ; platform_system == "Windows"
Provides-Extra: opt-einsum
Requires-Dist: opt-einsum (>=3.3) ; extra == 'opt-einsum'
Provides-Extra: optree
Requires-Dist: optree (>=0.9.1) ; extra == 'optree'

# PyTorch for RISC-V Architecture

PyTorch is a popular open-source machine learning framework that provides a wide range of tools for building neural networks. It is widely used in academic and industry research, and is also used in production applications.

The following is the steps to build and install PyTorch for RISC-V architecture on OpenEuler 24.03.

It is more convenient to view the tutorial in GitHub and Gitee repository, which can be accessed through the following links:

- GitHub: https://github.com/xforcevesa/pytorch-riscv64-oe24
- Gitee: https://gitee.com/xforcevesa/pytorch-riscv64-oe24

## Introduction
The RISC-V software ecosystem is still under construction, and it is common to encounter difficulties when trying to use popular software packages. This article provides a guide on how to install PyTorch in a RISC-V environment.

The system environment is shown in the image below:
![System Environment](https://gitee.com/xforcevesa/pytorch-riscv64-oe24/raw/main/docs/images/0d8af7fa06064de7a3ddfc25abf356c6.png)

The CPU model is SOPHON SG2042, RV64GC architecture, with V extension, 64 cores, and a clock speed of 2.0GHz. The toolchain versions are as shown:
![Toolchain Versions](https://gitee.com/xforcevesa/pytorch-riscv64-oe24/raw/main/docs/images/2bf27850153048b99684c642edbc92bf.png)

## Steps
### Step 1: Install Packages
Use OpenEuler's dnf package manager to install the necessary packages with the following command:
```bash
sudo dnf install python3-{hypothesis,psutil,pyyaml,requests,sympy,filelock,networkx,jinja2,fsspec,packaging,numpy,venv}
```

### Step 2: Create a Virtual Environment
Create a virtual environment with the following command:
```bash
cd; python3 -m venv --system-site-packages venv
```
The `--system-site-packages` option allows the virtual environment to inherit the system Python environment, thus using the global PyPI packages.

Activate the created environment with:
```bash
source ~/venv/bin/activate
```
Alternatively, add this command to `~/.bashrc` to activate the environment automatically upon login.

### Step 3: Install Other Dependencies

**Activate the venv environment**.

#### Install with **pip**

- Now if you use `riscv64` as the platform, you can install PyTorch with the following command:
```bash
pip install pytorch-riscv64
```

- And then skip directly to the next step.
- If you would like to install PyTorch with other options, you can see the steps below.

#### Install from PyPI Wheel

Download the：

- GitHub Release：https://github.com/xforcevesa/pytorch-riscv64-oe24/releases/tag/2.3.0-alpha
- Gitee Release：https://gitee.com/xforcevesa/pytorch-riscv64-oe24/releases/tag/2.3.0-alpha

After downloading the wheel file, install it with the following command：
```bash
source ~/venv/bin/activate
pip install torch-2.3.0a1+gitunknown-cp311-cp311-linux_riscv64.whl
```

The following is the steps to install PyTorch from source code.

If you have already installed PyTorch from PyPI, you can skip this step.


#### Install from Source

We recommend installing PyTorch version 2.3.0. First, download the source code (this process can be done locally and then uploaded to the server):
```bash
wget https://github.com/pytorch/pytorch/releases/download/v2.3.0/pytorch-v2.3.0.tar.gz
```
Extract it:
```bash
tar xvf pytorch-v2.3.0.tar.gz
cd pytorch-v2.3.0/
```
Update `cpuinfo` by executing the following:
```bash
cd third_party/
rm -rf cpuinfo/
git clone https://github.com/sophgo/cpuinfo.git
cd ..
```

Then, make the following changes:
1. In `aten/src/ATen/CMakeLists.txt`, replace the line:
    ```cmake
    if(NOT MSVC AND NOT EMSCRIPTEN AND NOT INTERN_BUILD_MOBILE)
    ```
    with:
    ```cmake
    if(FALSE)
    ```

2. In `caffe2/CMakeLists.txt`, replace the line:
    ```cmake
    target_link_libraries(${test_name}_${CPU_CAPABILITY} c10 sleef gtest_main)
    ```
    with:
    ```cmake
    target_link_libraries(${test_name}_${CPU_CAPABILITY} c10 gtest_main)
    ```

3. In `test/cpp/api/CMakeLists.txt`, add the following line after:
    ```cmake
    add_executable(test_api ${TORCH_API_TEST_SOURCES})
    ```
    ```cmake
    target_compile_options(test_api PUBLIC -Wno-nonnull)
    ```

Save the changes. If the modifications were done locally, upload the modified source code to the server.

Create a build script:
```bash
#!/bin/bash
source ~/venv/bin/activate
export USE_CUDA=0 # CUDA is not available on RISC-V architecture servers
export USE_DISTRIBUTED=0 # Distributed support is not available
export USE_MKLDNN=0 # MKL is not supported as it is not an Intel processor
export MAX_JOBS=5 # Number of compile processes, adjust as needed
python3 setup.py develop --cmake
```
Save it as `build.sh` in the `pytorch-v2.3.0/` directory on the server. Execute the script with:
```bash
bash build.sh
```
This will automatically complete the build process. The build time is quite long; in my case, using 5 processes, it took two to three hours. Consider using `tmux` or `screen` for a persistent session. If needed, install these tools using the dnf package manager.

### Step 4: Verify Installation
If no errors occurred during the installation, the process is complete. The following shows a verification test:
![Verification](https://gitee.com/xforcevesa/pytorch-riscv64-oe24/raw/main/docs/images/2bf27850153048b99684c642edbc92bf.png)

If you get the corresponding output as shown in the image, PyTorch has been successfully installed.

## References
- [AI Framework (Pytorch) Adaptation Based on RISC-V Architecture (Chinese)](https://blog.csdn.net/m0_49267873/article/details/135670989)

