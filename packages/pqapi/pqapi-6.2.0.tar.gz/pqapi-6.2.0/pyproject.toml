[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=64", "setuptools_scm>=8"]

[project]
authors = [
    {email = "andrew@futurehouse.org", name = "Andrew White"},
]
# Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python",
]
dependencies = [
    "aiohttp",
    "paper-qa>=4.1.1",
    "pydantic~=2.0",
    "requests",
    "tenacity",
]
description = "API for interacting with paperqa.app"
dynamic = ["version"]
license = {file = "LICENSE"}
maintainers = [
    {email = "andrew@futurehouse.org", name = "Andrew White"},
    {email = "james@futurehouse.org", name = "James Braza"},
    {email = "mskarlinski@futurehouse.org", name = "Michael Skarlinski"},
]
name = "pqapi"
readme = "README.md"
requires-python = ">=3.11.0rc1"

[project.optional-dependencies]
dev = [
    "click",
    "pre-commit",
    "pytest",
    "pytest-asyncio",
    "pytest-cov>=5",  # Pin to keep recent
    "pytest-sugar",
    "pytest-xdist",
    "types-requests",
]
publish = [
    "build",
]

[project.urls]
issues = "https://github.com/Future-House/paperqa-api/issues"
repository = "https://github.com/Future-House/paperqa-api"

[tool.black]
preview = true

[tool.codespell]
check-filenames = true
check-hidden = true
ignore-words-list = "ser"

[tool.mypy]
# Type-checks the interior of functions without type annotations.
check_untyped_defs = true
# Allows enabling one or multiple error codes globally. Note: This option will
# override disabled error codes from the disable_error_code option.
enable_error_code = [
    "ignore-without-code",
    "redundant-cast",
    "redundant-expr",
    "redundant-self",
    "truthy-bool",
    "truthy-iterable",
    "unreachable",
    "unused-ignore",
]
# Shows a short summary line after error messages.
error_summary = false
# A regular expression that matches file names, directory names and paths which mypy
# should ignore while recursively discovering files to check. Use forward slashes (/) as
# directory separators on all platforms.
exclude = [
    "^\\.?venv",  # SEE: https://regex101.com/r/0rp5Br/1
]
# This flag tells mypy that top-level packages will be based in either the current
# directory, or a member of the MYPYPATH environment variable or mypy_path config
# option. This option is only useful in the absence of __init__.py. See Mapping file
# paths to modules for details.
explicit_package_bases = true
# Specifies the OS platform for the target program, for example darwin or win32
# (meaning OS X or Windows, respectively). The default is the current platform
# as revealed by Pythonâ€™s sys.platform variable.
platform = "linux"
# Comma-separated list of mypy plugins.
plugins = ["pydantic.mypy"]
# Use visually nicer output in error messages: use soft word wrap, show source
# code snippets, and show error location markers.
pretty = true
# Shows column numbers in error messages.
show_column_numbers = true
# Shows error codes in error messages.
# SEE: https://mypy.readthedocs.io/en/stable/error_codes.html#error-codes
show_error_codes = true
# Prefixes each error with the relevant context.
show_error_context = true
# Warns about casting an expression to its inferred type.
warn_redundant_casts = true
# Shows a warning when encountering any code inferred to be unreachable or
# redundant after performing type analysis.
warn_unreachable = true
# Warns about per-module sections in the config file that do not match any
# files processed when invoking mypy.
warn_unused_configs = true
# Warns about unneeded `# type: ignore` comments.
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = "--cov=pqapi"
# List of directories that should be searched for tests when no specific directories,
# files or test ids are given in the command line when executing pytest from the rootdir
# directory. File system paths may use shell-style wildcards, including the recursive **
# pattern.
testpaths = ["tests"]

[tool.ruff]
# Line length to use when enforcing long-lines violations (like `E501`).
line-length = 88
# The minimum Python version to target, e.g., when considering automatic code
# upgrades, like rewriting type annotations. Ruff will not propose changes
# using features that are not available in the given version.
target-version = "py311"
# Enable application of unsafe fixes.
unsafe-fixes = true

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true
# Enable preview style formatting.
preview = true

[tool.ruff.lint]
# List of rule codes that are unsupported by Ruff, but should be preserved when
# (e.g.) validating # noqa directives. Useful for retaining # noqa directives
# that cover plugins not yet implemented by Ruff.
ignore = [
    "ANN",  # Don't care to enforce typing
    "ARG002",  # Thrown all the time when we are subclassing
    "BLE001",  # Don't care to enforce blind exception catching
    "COM812",  # Trailing comma with black leads to wasting lines
    "D100",  # D100, D101, D102, D103, D104, D105, D106, D107: don't always need docstrings
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D203",  # Keep docstring next to the class definition (covered by D211)
    "D212",  # Summary should be on second line (opposite of D213)
    "D402",  # It's nice to reuse the method name
    "D406",  # Google style requires ":" at end
    "D407",  # We aren't using numpy style
    "D413",  # Blank line after last section. -> No blank line
    "DTZ",  # Don't care to have timezone safety
    "EM",  # Overly pedantic
    "ERA001",  # Don't care to prevent commented code
    "FBT001",  # FBT001, FBT002: overly pedantic
    "FBT002",
    "FIX",  # Don't care to prevent TODO, FIXME, etc.
    "FLY002",  # Can be less readable
    "G004",  # f-strings are convenient
    "INP001",  # Can use namespace packages
    "ISC001",  # For ruff format compatibility
    "N803",  # Want to use 'N', or 'L',
    "N806",  # Want to use 'N', or 'L',
    "PLR0913",
    "PTH",  # Overly pedantic
    "S105",  # Duplicates Yelp/detect-secrets in pre-commit
    "S311",  # Ok to use python random
    "SLF001",  # Overly pedantic
    "T201",  # Overly pedantic
    "TCH001",  # TCH001, TCH002, TCH003: don't care to enforce type checking blocks
    "TCH002",
    "TCH003",
    "TD002",  # Don't care for TODO author
    "TD003",  # Don't care for TODO links
    "TID252",  # Allow relative imports for packaging
    "TRY003",  # Overly pedantic
]
select = ["ALL"]
unfixable = [
    "B007",  # While debugging, unused loop variables can be useful
    "ERA001",  # While debugging, temporarily commenting code can be useful
    "F401",  # While debugging, unused imports can be useful
    "F841",  # While debugging, unused locals can be useful
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "PLR2004",  # Tests can have magic values
    "S101",  # Tests can have assertions
]

[tool.ruff.lint.pycodestyle]
# The maximum line length to allow for line-length violations within
# documentation (W505), including standalone comments.
max-doc-length = 120  # Match line-length
# The maximum line length to allow for line-too-long violations. By default,
# this is set to the value of the line-length option.
max-line-length = 120

[tool.ruff.lint.pydocstyle]
# Whether to use Google-style or NumPy-style conventions or the PEP257
# defaults when analyzing docstring sections.
convention = "google"

[tool.setuptools.packages.find]
include = ["pqapi*"]

[tool.setuptools_scm]
version_file = "pqapi/version.py"

[tool.tomlsort]
all = true
in_place = true
spaces_before_inline_comment = 2  # Match Python PEP 8
spaces_indent_inline_array = 4  # Match Python PEP 8
trailing_comma_inline_array = true
