# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VerificationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def verification_get(self, **kwargs):  # noqa: E501
        """Get a verification by ID  # noqa: E501

        This operation gets a verification item by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int verification_id: The Verification ID
        :param str x_api_version:
        :return: AIForgedViewModelsVerificationViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verification_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.verification_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def verification_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a verification by ID  # noqa: E501

        This operation gets a verification item by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int verification_id: The Verification ID
        :param str x_api_version:
        :return: AIForgedViewModelsVerificationViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['verification_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verification_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'verification_id' in params:
            query_params.append(('verificationId', params['verification_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Verification/Get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsVerificationViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verification_get_all(self, **kwargs):  # noqa: E501
        """Get all verifications for a parameter  # noqa: E501

        This operation gets all the verification items associated with a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_get_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document ID
        :param int parameter_id: The parameter ID
        :param str x_api_version:
        :return: list[AIForgedViewModelsVerificationViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verification_get_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.verification_get_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def verification_get_all_with_http_info(self, **kwargs):  # noqa: E501
        """Get all verifications for a parameter  # noqa: E501

        This operation gets all the verification items associated with a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_get_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document ID
        :param int parameter_id: The parameter ID
        :param str x_api_version:
        :return: list[AIForgedViewModelsVerificationViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_id', 'parameter_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verification_get_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'parameter_id' in params:
            query_params.append(('parameterId', params['parameter_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Verification/GetAll', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsVerificationViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verification_get_extended(self, **kwargs):  # noqa: E501
        """Get extended verification info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_get_extended(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id: The project id
        :param int stpd_id: Service id
        :param Usage4 usage:
        :param list[AIForgedDALDocumentStatus] statuses:
        :param str classname:
        :param str filename:
        :param str filetype:
        :param datetime start:
        :param datetime end:
        :param int masterid:
        :param int page_no:
        :param int page_size:
        :param SortField3 sort_field:
        :param SortDirection7 sort_direction:
        :param str comment:
        :param str result:
        :param bool latest_result_doc:
        :param str x_api_version:
        :return: list[AIForgedViewModelsVerificationSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verification_get_extended_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.verification_get_extended_with_http_info(**kwargs)  # noqa: E501
            return data

    def verification_get_extended_with_http_info(self, **kwargs):  # noqa: E501
        """Get extended verification info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_get_extended_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id: The project id
        :param int stpd_id: Service id
        :param Usage4 usage:
        :param list[AIForgedDALDocumentStatus] statuses:
        :param str classname:
        :param str filename:
        :param str filetype:
        :param datetime start:
        :param datetime end:
        :param int masterid:
        :param int page_no:
        :param int page_size:
        :param SortField3 sort_field:
        :param SortDirection7 sort_direction:
        :param str comment:
        :param str result:
        :param bool latest_result_doc:
        :param str x_api_version:
        :return: list[AIForgedViewModelsVerificationSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'stpd_id', 'usage', 'statuses', 'classname', 'filename', 'filetype', 'start', 'end', 'masterid', 'page_no', 'page_size', 'sort_field', 'sort_direction', 'comment', 'result', 'latest_result_doc', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verification_get_extended" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'usage' in params:
            query_params.append(('usage', params['usage']))  # noqa: E501
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501
            collection_formats['statuses'] = 'multi'  # noqa: E501
        if 'classname' in params:
            query_params.append(('classname', params['classname']))  # noqa: E501
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501
        if 'filetype' in params:
            query_params.append(('filetype', params['filetype']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'masterid' in params:
            query_params.append(('masterid', params['masterid']))  # noqa: E501
        if 'page_no' in params:
            query_params.append(('pageNo', params['page_no']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501
        if 'result' in params:
            query_params.append(('result', params['result']))  # noqa: E501
        if 'latest_result_doc' in params:
            query_params.append(('latestResultDoc', params['latest_result_doc']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Verification/GetExtended', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsVerificationSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verification_get_heatmap(self, **kwargs):  # noqa: E501
        """Get verification analytics for service  # noqa: E501

        This operation get a heatmap of verifications for a service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_get_heatmap(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project ID. Optional
        :param int stpd_id: The service ID
        :param bool latest_only: Only the latest. Optional
        :param str x_api_version:
        :return: list[AIForgedViewModelsVerificationSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verification_get_heatmap_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.verification_get_heatmap_with_http_info(**kwargs)  # noqa: E501
            return data

    def verification_get_heatmap_with_http_info(self, **kwargs):  # noqa: E501
        """Get verification analytics for service  # noqa: E501

        This operation get a heatmap of verifications for a service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_get_heatmap_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project ID. Optional
        :param int stpd_id: The service ID
        :param bool latest_only: Only the latest. Optional
        :param str x_api_version:
        :return: list[AIForgedViewModelsVerificationSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'stpd_id', 'latest_only', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verification_get_heatmap" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'latest_only' in params:
            query_params.append(('latestOnly', params['latest_only']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Verification/GetHeatmap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsVerificationSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verification_get_latest(self, **kwargs):  # noqa: E501
        """Get latest verification for a parameter  # noqa: E501

        This operation gets the latest verification for a parameter in a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_get_latest(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document ID
        :param int parameter_id: The parameter ID. Optional
        :param int pd_id: The definition ID. Optional
        :param str x_api_version:
        :return: AIForgedViewModelsVerificationViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verification_get_latest_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.verification_get_latest_with_http_info(**kwargs)  # noqa: E501
            return data

    def verification_get_latest_with_http_info(self, **kwargs):  # noqa: E501
        """Get latest verification for a parameter  # noqa: E501

        This operation gets the latest verification for a parameter in a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_get_latest_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document ID
        :param int parameter_id: The parameter ID. Optional
        :param int pd_id: The definition ID. Optional
        :param str x_api_version:
        :return: AIForgedViewModelsVerificationViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_id', 'parameter_id', 'pd_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verification_get_latest" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'parameter_id' in params:
            query_params.append(('parameterId', params['parameter_id']))  # noqa: E501
        if 'pd_id' in params:
            query_params.append(('pdId', params['pd_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Verification/GetLatest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsVerificationViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verification_get_shred(self, **kwargs):  # noqa: E501
        """Get a verification image shred  # noqa: E501

        This operation gets the image shred of a verification item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_get_shred(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: User for the shred
        :param int doc_id: The document ID
        :param int par_id: The parameter ID
        :param int verification_id: The verification ID
        :param bool inline: Should the image be inline. Optional
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verification_get_shred_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.verification_get_shred_with_http_info(**kwargs)  # noqa: E501
            return data

    def verification_get_shred_with_http_info(self, **kwargs):  # noqa: E501
        """Get a verification image shred  # noqa: E501

        This operation gets the image shred of a verification item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_get_shred_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: User for the shred
        :param int doc_id: The document ID
        :param int par_id: The parameter ID
        :param int verification_id: The verification ID
        :param bool inline: Should the image be inline. Optional
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'doc_id', 'par_id', 'verification_id', 'inline', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verification_get_shred" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'par_id' in params:
            query_params.append(('parId', params['par_id']))  # noqa: E501
        if 'verification_id' in params:
            query_params.append(('verificationId', params['verification_id']))  # noqa: E501
        if 'inline' in params:
            query_params.append(('inline', params['inline']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Verification/GetShred', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verification_get_summary(self, **kwargs):  # noqa: E501
        """Get a summary of verifications for service  # noqa: E501

        This operation gets a summary of the verification items of a service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_get_summary(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project id
        :param int stpd_id: The service id
        :param int pd_id: The definition id
        :param bool latest_only: Only the latest
        :param str x_api_version:
        :return: list[AIForgedViewModelsVerificationSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verification_get_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.verification_get_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def verification_get_summary_with_http_info(self, **kwargs):  # noqa: E501
        """Get a summary of verifications for service  # noqa: E501

        This operation gets a summary of the verification items of a service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_get_summary_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project id
        :param int stpd_id: The service id
        :param int pd_id: The definition id
        :param bool latest_only: Only the latest
        :param str x_api_version:
        :return: list[AIForgedViewModelsVerificationSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'stpd_id', 'pd_id', 'latest_only', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verification_get_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'pd_id' in params:
            query_params.append(('pdId', params['pd_id']))  # noqa: E501
        if 'latest_only' in params:
            query_params.append(('latestOnly', params['latest_only']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Verification/GetSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsVerificationSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verification_rerun(self, **kwargs):  # noqa: E501
        """Rerun verification on a parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_rerun(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document id
        :param int parameter_id:
        :param bool restart:
        :param bool is_publish: To set document status in interrim published state of all ok
        :param str x_api_version:
        :return: list[AIForgedViewModelsVerificationViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verification_rerun_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.verification_rerun_with_http_info(**kwargs)  # noqa: E501
            return data

    def verification_rerun_with_http_info(self, **kwargs):  # noqa: E501
        """Rerun verification on a parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_rerun_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document id
        :param int parameter_id:
        :param bool restart:
        :param bool is_publish: To set document status in interrim published state of all ok
        :param str x_api_version:
        :return: list[AIForgedViewModelsVerificationViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_id', 'parameter_id', 'restart', 'is_publish', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verification_rerun" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'parameter_id' in params:
            query_params.append(('parameterId', params['parameter_id']))  # noqa: E501
        if 'restart' in params:
            query_params.append(('restart', params['restart']))  # noqa: E501
        if 'is_publish' in params:
            query_params.append(('isPublish', params['is_publish']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Verification/Rerun', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsVerificationViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verification_rerun_all(self, **kwargs):  # noqa: E501
        """Rerun verification on a document  # noqa: E501

        This will also run custom code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_rerun_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document id
        :param bool restart:
        :param bool run_custom_code:
        :param bool run_workflow_clode:
        :param bool run_utilities:
        :param bool run_web_hooks:
        :param bool is_publish: To set document status in interrim published state of all ok
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verification_rerun_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.verification_rerun_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def verification_rerun_all_with_http_info(self, **kwargs):  # noqa: E501
        """Rerun verification on a document  # noqa: E501

        This will also run custom code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_rerun_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document id
        :param bool restart:
        :param bool run_custom_code:
        :param bool run_workflow_clode:
        :param bool run_utilities:
        :param bool run_web_hooks:
        :param bool is_publish: To set document status in interrim published state of all ok
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_id', 'restart', 'run_custom_code', 'run_workflow_clode', 'run_utilities', 'run_web_hooks', 'is_publish', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verification_rerun_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'restart' in params:
            query_params.append(('restart', params['restart']))  # noqa: E501
        if 'run_custom_code' in params:
            query_params.append(('runCustomCode', params['run_custom_code']))  # noqa: E501
        if 'run_workflow_clode' in params:
            query_params.append(('runWorkflowClode', params['run_workflow_clode']))  # noqa: E501
        if 'run_utilities' in params:
            query_params.append(('runUtilities', params['run_utilities']))  # noqa: E501
        if 'run_web_hooks' in params:
            query_params.append(('runWebHooks', params['run_web_hooks']))  # noqa: E501
        if 'is_publish' in params:
            query_params.append(('isPublish', params['is_publish']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Verification/RerunAll', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verification_verify(self, **kwargs):  # noqa: E501
        """Create a list of verifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_verify(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AIForgedViewModelsVerificationViewModel] body:
        :param str x_api_version:
        :param int doc_id: The document id
        :return: list[AIForgedViewModelsVerificationViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verification_verify_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.verification_verify_with_http_info(**kwargs)  # noqa: E501
            return data

    def verification_verify_with_http_info(self, **kwargs):  # noqa: E501
        """Create a list of verifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verification_verify_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AIForgedViewModelsVerificationViewModel] body:
        :param str x_api_version:
        :param int doc_id: The document id
        :return: list[AIForgedViewModelsVerificationViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'doc_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verification_verify" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Verification/Verify', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsVerificationViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
