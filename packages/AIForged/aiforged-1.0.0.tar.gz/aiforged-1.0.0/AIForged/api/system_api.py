# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def system_check_services(self, **kwargs):  # noqa: E501
        """Check services  # noqa: E501

        This operation gets service information and configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_check_services(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_check_services_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_check_services_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_check_services_with_http_info(self, **kwargs):  # noqa: E501
        """Check services  # noqa: E501

        This operation gets service information and configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_check_services_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_check_services" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/CheckServices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_create_data_type(self, body, **kwargs):  # noqa: E501
        """Create a new data type  # noqa: E501

        This operation creates a new data type in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_create_data_type(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsDataTypeViewModel body: The data type definition (required)
        :param str x_api_version:
        :return: AIForgedViewModelsDataTypeViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_create_data_type_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.system_create_data_type_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def system_create_data_type_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new data type  # noqa: E501

        This operation creates a new data type in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_create_data_type_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsDataTypeViewModel body: The data type definition (required)
        :param str x_api_version:
        :return: AIForgedViewModelsDataTypeViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_create_data_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `system_create_data_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/CreateDataType', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsDataTypeViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_create_enum_data(self, body, **kwargs):  # noqa: E501
        """Create a new system enum  # noqa: E501

        This operation creates a new enum type in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_create_enum_data(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsEnumDataViewModel body: The enum type ID (required)
        :param str x_api_version:
        :return: AIForgedViewModelsEnumDataViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_create_enum_data_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.system_create_enum_data_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def system_create_enum_data_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new system enum  # noqa: E501

        This operation creates a new enum type in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_create_enum_data_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsEnumDataViewModel body: The enum type ID (required)
        :param str x_api_version:
        :return: AIForgedViewModelsEnumDataViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_create_enum_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `system_create_enum_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/CreateEnumData', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsEnumDataViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_delete_data_type(self, **kwargs):  # noqa: E501
        """Delete a datatype  # noqa: E501

        This operation deletes a data type in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_delete_data_type(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedDALValueType id: The data type ID
        :param str x_api_version:
        :return: AIForgedViewModelsDataTypeViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_delete_data_type_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_delete_data_type_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_delete_data_type_with_http_info(self, **kwargs):  # noqa: E501
        """Delete a datatype  # noqa: E501

        This operation deletes a data type in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_delete_data_type_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedDALValueType id: The data type ID
        :param str x_api_version:
        :return: AIForgedViewModelsDataTypeViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_delete_data_type" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/DeleteDataType', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsDataTypeViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_delete_enum_data(self, **kwargs):  # noqa: E501
        """Delete a system enum  # noqa: E501

        This operation deletes an enum data type in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_delete_enum_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enum type ID
        :param str x_api_version:
        :return: AIForgedViewModelsEnumDataViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_delete_enum_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_delete_enum_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_delete_enum_data_with_http_info(self, **kwargs):  # noqa: E501
        """Delete a system enum  # noqa: E501

        This operation deletes an enum data type in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_delete_enum_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enum type ID
        :param str x_api_version:
        :return: AIForgedViewModelsEnumDataViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_delete_enum_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/DeleteEnumData', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsEnumDataViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_get_background_worker_item(self, **kwargs):  # noqa: E501
        """Get background worker item  # noqa: E501

        This operation gets the background worker item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_background_worker_item(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: AIForgedProcessorBackgoundWorkItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_get_background_worker_item_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_get_background_worker_item_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_get_background_worker_item_with_http_info(self, **kwargs):  # noqa: E501
        """Get background worker item  # noqa: E501

        This operation gets the background worker item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_background_worker_item_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: AIForgedProcessorBackgoundWorkItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_get_background_worker_item" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/GetBackgroundWorkerItem', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedProcessorBackgoundWorkItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_get_category_training(self, **kwargs):  # noqa: E501
        """Get category training options  # noqa: E501

        This operation gets training options for a category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_category_training(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A Guid ID
        :param str x_api_version:
        :return: AIForgedViewModelsCategoryTrainingOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_get_category_training_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_get_category_training_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_get_category_training_with_http_info(self, **kwargs):  # noqa: E501
        """Get category training options  # noqa: E501

        This operation gets training options for a category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_category_training_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A Guid ID
        :param str x_api_version:
        :return: AIForgedViewModelsCategoryTrainingOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_get_category_training" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/GetCategoryTraining', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsCategoryTrainingOptions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_get_data_type_info(self, **kwargs):  # noqa: E501
        """Get value types  # noqa: E501

        This operation gets info on value types used by AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_data_type_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedDALValueType vt: The value type
        :param str vtname: The value type name
        :param str x_api_version:
        :return: AIForgedViewModelsDataTypeViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_get_data_type_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_get_data_type_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_get_data_type_info_with_http_info(self, **kwargs):  # noqa: E501
        """Get value types  # noqa: E501

        This operation gets info on value types used by AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_data_type_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedDALValueType vt: The value type
        :param str vtname: The value type name
        :param str x_api_version:
        :return: AIForgedViewModelsDataTypeViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vt', 'vtname', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_get_data_type_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vt' in params:
            query_params.append(('vt', params['vt']))  # noqa: E501
        if 'vtname' in params:
            query_params.append(('vtname', params['vtname']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/GetDataTypeInfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsDataTypeViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_get_data_types(self, **kwargs):  # noqa: E501
        """Get data types  # noqa: E501

        This operation gets info on data types used by AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_data_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: list[AIForgedViewModelsDataTypeViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_get_data_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_get_data_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_get_data_types_with_http_info(self, **kwargs):  # noqa: E501
        """Get data types  # noqa: E501

        This operation gets info on data types used by AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_data_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: list[AIForgedViewModelsDataTypeViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_get_data_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/GetDataTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsDataTypeViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_get_enum_data(self, **kwargs):  # noqa: E501
        """Get system enum values  # noqa: E501

        This operation gets a list of enums defined in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_enum_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: list[AIForgedViewModelsEnumDataViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_get_enum_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_get_enum_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_get_enum_data_with_http_info(self, **kwargs):  # noqa: E501
        """Get system enum values  # noqa: E501

        This operation gets a list of enums defined in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_enum_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: list[AIForgedViewModelsEnumDataViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_get_enum_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/GetEnumData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsEnumDataViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_get_enum_options(self, **kwargs):  # noqa: E501
        """Get enumerator options  # noqa: E501

        This operation gets a list of enumerator options in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_enum_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Th enumerator name
        :param str x_api_version:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_get_enum_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_get_enum_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_get_enum_options_with_http_info(self, **kwargs):  # noqa: E501
        """Get enumerator options  # noqa: E501

        This operation gets a list of enumerator options in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_enum_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Th enumerator name
        :param str x_api_version:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_get_enum_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/GetEnumOptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_get_exception(self, **kwargs):  # noqa: E501
        """Test an exception  # noqa: E501

        This operation gets an exception with a custom exception message  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_exception(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str message: The exception message
        :param str x_api_version:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_get_exception_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_get_exception_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_get_exception_with_http_info(self, **kwargs):  # noqa: E501
        """Test an exception  # noqa: E501

        This operation gets an exception with a custom exception message  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_exception_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str message: The exception message
        :param str x_api_version:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['message', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_get_exception" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'message' in params:
            query_params.append(('message', params['message']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/GetException', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_get_logs(self, **kwargs):  # noqa: E501
        """Get event logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_logs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A Guid ID
        :param str x_api_version:
        :return: list[AIForgedHelpersLogEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_get_logs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_get_logs_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_get_logs_with_http_info(self, **kwargs):  # noqa: E501
        """Get event logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_logs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A Guid ID
        :param str x_api_version:
        :return: list[AIForgedHelpersLogEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_get_logs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/GetLogs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedHelpersLogEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_get_system_date(self, **kwargs):  # noqa: E501
        """Get the current server date and time  # noqa: E501

        This operation gets the AIForged server date and time  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_system_date(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: datetime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_get_system_date_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_get_system_date_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_get_system_date_with_http_info(self, **kwargs):  # noqa: E501
        """Get the current server date and time  # noqa: E501

        This operation gets the AIForged server date and time  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_system_date_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: datetime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_get_system_date" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/GetSystemDate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='datetime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_get_system_info(self, **kwargs):  # noqa: E501
        """Get system and application information  # noqa: E501

        This operation gets system and application information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_system_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_get_system_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_get_system_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_get_system_info_with_http_info(self, **kwargs):  # noqa: E501
        """Get system and application information  # noqa: E501

        This operation gets system and application information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_get_system_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_get_system_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/GetSystemInfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_sync_enum_data(self, **kwargs):  # noqa: E501
        """Delete a system enum  # noqa: E501

        This operation deletes an enum data type in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_sync_enum_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_sync_enum_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_sync_enum_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_sync_enum_data_with_http_info(self, **kwargs):  # noqa: E501
        """Delete a system enum  # noqa: E501

        This operation deletes an enum data type in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_sync_enum_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_sync_enum_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/SyncEnumData', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_test_data_set(self, **kwargs):  # noqa: E501
        """Dummy to expose event logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_test_data_set(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str x_api_version:
        :return: list[AIForgedViewModelsParameterDefViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_test_data_set_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_test_data_set_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_test_data_set_with_http_info(self, **kwargs):  # noqa: E501
        """Dummy to expose event logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_test_data_set_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str x_api_version:
        :return: list[AIForgedViewModelsParameterDefViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_test_data_set" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/GetDataSet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsParameterDefViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_update_data_type(self, body, **kwargs):  # noqa: E501
        """Update a datatype description  # noqa: E501

        This operation updates a data type in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_update_data_type(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsDataTypeViewModel body: The data type definition (required)
        :param str x_api_version:
        :return: AIForgedViewModelsDataTypeViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_update_data_type_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.system_update_data_type_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def system_update_data_type_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update a datatype description  # noqa: E501

        This operation updates a data type in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_update_data_type_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsDataTypeViewModel body: The data type definition (required)
        :param str x_api_version:
        :return: AIForgedViewModelsDataTypeViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_update_data_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `system_update_data_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/UpdateDataType', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsDataTypeViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_update_enum_data(self, body, **kwargs):  # noqa: E501
        """Update system enum  # noqa: E501

        This operation updates an enum type in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_update_enum_data(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsEnumDataViewModel body: The enum type ID (required)
        :param str x_api_version:
        :return: AIForgedViewModelsEnumDataViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_update_enum_data_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.system_update_enum_data_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def system_update_enum_data_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update system enum  # noqa: E501

        This operation updates an enum type in AIForged  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_update_enum_data_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsEnumDataViewModel body: The enum type ID (required)
        :param str x_api_version:
        :return: AIForgedViewModelsEnumDataViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_update_enum_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `system_update_enum_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/System/UpdateEnumData', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsEnumDataViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
