# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsDocumentExtraction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_id': 'int',
        'id': 'int',
        'parent_id': 'int',
        'name': 'str',
        'label': 'str',
        'category': 'OneOfAIForgedViewModelsDocumentExtractionCategory',
        'grouping': 'OneOfAIForgedViewModelsDocumentExtractionGrouping',
        'value_type': 'AIForgedDALValueType',
        'index': 'int',
        'param_id': 'int',
        'parent_param_id': 'int',
        'param_index': 'int',
        'param_value': 'str',
        'verification_id': 'int',
        'user_id': 'str',
        'user_name': 'str',
        'value': 'str',
        'dt': 'datetime',
        'confidence': 'float',
        'type': 'OneOfAIForgedViewModelsDocumentExtractionType',
        'status': 'OneOfAIForgedViewModelsDocumentExtractionStatus',
        'charge': 'float',
        'provider': 'str',
        'result': 'str'
    }

    attribute_map = {
        'document_id': 'documentId',
        'id': 'id',
        'parent_id': 'parentId',
        'name': 'name',
        'label': 'label',
        'category': 'category',
        'grouping': 'grouping',
        'value_type': 'valueType',
        'index': 'index',
        'param_id': 'paramId',
        'parent_param_id': 'parentParamId',
        'param_index': 'paramIndex',
        'param_value': 'paramValue',
        'verification_id': 'verificationId',
        'user_id': 'userId',
        'user_name': 'userName',
        'value': 'value',
        'dt': 'dt',
        'confidence': 'confidence',
        'type': 'type',
        'status': 'status',
        'charge': 'charge',
        'provider': 'provider',
        'result': 'result'
    }

    def __init__(self, document_id=None, id=None, parent_id=None, name=None, label=None, category=None, grouping=None, value_type=None, index=None, param_id=None, parent_param_id=None, param_index=None, param_value=None, verification_id=None, user_id=None, user_name=None, value=None, dt=None, confidence=None, type=None, status=None, charge=None, provider=None, result=None):  # noqa: E501
        """AIForgedViewModelsDocumentExtraction - a model defined in Swagger"""  # noqa: E501
        self._document_id = None
        self._id = None
        self._parent_id = None
        self._name = None
        self._label = None
        self._category = None
        self._grouping = None
        self._value_type = None
        self._index = None
        self._param_id = None
        self._parent_param_id = None
        self._param_index = None
        self._param_value = None
        self._verification_id = None
        self._user_id = None
        self._user_name = None
        self._value = None
        self._dt = None
        self._confidence = None
        self._type = None
        self._status = None
        self._charge = None
        self._provider = None
        self._result = None
        self.discriminator = None
        if document_id is not None:
            self.document_id = document_id
        if id is not None:
            self.id = id
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
        if label is not None:
            self.label = label
        if category is not None:
            self.category = category
        if grouping is not None:
            self.grouping = grouping
        if value_type is not None:
            self.value_type = value_type
        if index is not None:
            self.index = index
        if param_id is not None:
            self.param_id = param_id
        if parent_param_id is not None:
            self.parent_param_id = parent_param_id
        if param_index is not None:
            self.param_index = param_index
        if param_value is not None:
            self.param_value = param_value
        if verification_id is not None:
            self.verification_id = verification_id
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if value is not None:
            self.value = value
        if dt is not None:
            self.dt = dt
        if confidence is not None:
            self.confidence = confidence
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if charge is not None:
            self.charge = charge
        if provider is not None:
            self.provider = provider
        if result is not None:
            self.result = result

    @property
    def document_id(self):
        """Gets the document_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The document_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AIForgedViewModelsDocumentExtraction.


        :param document_id: The document_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsDocumentExtraction.


        :param id: The id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def parent_id(self):
        """Gets the parent_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The parent_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this AIForgedViewModelsDocumentExtraction.


        :param parent_id: The parent_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def name(self):
        """Gets the name of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The name of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AIForgedViewModelsDocumentExtraction.


        :param name: The name of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def label(self):
        """Gets the label of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The label of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AIForgedViewModelsDocumentExtraction.


        :param label: The label of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def category(self):
        """Gets the category of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The category of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsDocumentExtractionCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AIForgedViewModelsDocumentExtraction.


        :param category: The category of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: OneOfAIForgedViewModelsDocumentExtractionCategory
        """

        self._category = category

    @property
    def grouping(self):
        """Gets the grouping of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The grouping of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsDocumentExtractionGrouping
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """Sets the grouping of this AIForgedViewModelsDocumentExtraction.


        :param grouping: The grouping of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: OneOfAIForgedViewModelsDocumentExtractionGrouping
        """

        self._grouping = grouping

    @property
    def value_type(self):
        """Gets the value_type of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The value_type of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: AIForgedDALValueType
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this AIForgedViewModelsDocumentExtraction.


        :param value_type: The value_type of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: AIForgedDALValueType
        """

        self._value_type = value_type

    @property
    def index(self):
        """Gets the index of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The index of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this AIForgedViewModelsDocumentExtraction.


        :param index: The index of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def param_id(self):
        """Gets the param_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The param_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: int
        """
        return self._param_id

    @param_id.setter
    def param_id(self, param_id):
        """Sets the param_id of this AIForgedViewModelsDocumentExtraction.


        :param param_id: The param_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: int
        """

        self._param_id = param_id

    @property
    def parent_param_id(self):
        """Gets the parent_param_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The parent_param_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: int
        """
        return self._parent_param_id

    @parent_param_id.setter
    def parent_param_id(self, parent_param_id):
        """Sets the parent_param_id of this AIForgedViewModelsDocumentExtraction.


        :param parent_param_id: The parent_param_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: int
        """

        self._parent_param_id = parent_param_id

    @property
    def param_index(self):
        """Gets the param_index of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The param_index of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: int
        """
        return self._param_index

    @param_index.setter
    def param_index(self, param_index):
        """Sets the param_index of this AIForgedViewModelsDocumentExtraction.


        :param param_index: The param_index of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: int
        """

        self._param_index = param_index

    @property
    def param_value(self):
        """Gets the param_value of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The param_value of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: str
        """
        return self._param_value

    @param_value.setter
    def param_value(self, param_value):
        """Sets the param_value of this AIForgedViewModelsDocumentExtraction.


        :param param_value: The param_value of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: str
        """

        self._param_value = param_value

    @property
    def verification_id(self):
        """Gets the verification_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The verification_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: int
        """
        return self._verification_id

    @verification_id.setter
    def verification_id(self, verification_id):
        """Sets the verification_id of this AIForgedViewModelsDocumentExtraction.


        :param verification_id: The verification_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: int
        """

        self._verification_id = verification_id

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The user_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedViewModelsDocumentExtraction.


        :param user_id: The user_id of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The user_name of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AIForgedViewModelsDocumentExtraction.


        :param user_name: The user_name of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def value(self):
        """Gets the value of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The value of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AIForgedViewModelsDocumentExtraction.


        :param value: The value of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def dt(self):
        """Gets the dt of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The dt of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this AIForgedViewModelsDocumentExtraction.


        :param dt: The dt of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def confidence(self):
        """Gets the confidence of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The confidence of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this AIForgedViewModelsDocumentExtraction.


        :param confidence: The confidence of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def type(self):
        """Gets the type of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The type of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsDocumentExtractionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedViewModelsDocumentExtraction.


        :param type: The type of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: OneOfAIForgedViewModelsDocumentExtractionType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The status of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsDocumentExtractionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsDocumentExtraction.


        :param status: The status of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: OneOfAIForgedViewModelsDocumentExtractionStatus
        """

        self._status = status

    @property
    def charge(self):
        """Gets the charge of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The charge of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: float
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """Sets the charge of this AIForgedViewModelsDocumentExtraction.


        :param charge: The charge of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: float
        """

        self._charge = charge

    @property
    def provider(self):
        """Gets the provider of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The provider of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this AIForgedViewModelsDocumentExtraction.


        :param provider: The provider of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def result(self):
        """Gets the result of this AIForgedViewModelsDocumentExtraction.  # noqa: E501


        :return: The result of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AIForgedViewModelsDocumentExtraction.


        :param result: The result of this AIForgedViewModelsDocumentExtraction.  # noqa: E501
        :type: str
        """

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsDocumentExtraction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsDocumentExtraction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
