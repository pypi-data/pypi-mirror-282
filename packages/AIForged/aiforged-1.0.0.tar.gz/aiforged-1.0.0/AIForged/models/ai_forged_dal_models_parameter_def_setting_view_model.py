# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedDALModelsParameterDefSettingViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'parameter_def_id': 'int',
        'type': 'AIForgedDALSettingType',
        'status': 'AIForgedDALSettingStatus',
        'dtc': 'datetime',
        'dtm': 'datetime',
        'comment': 'str',
        'info': 'str',
        'data': 'str',
        'min_value': 'str',
        'max_value': 'str',
        'confidence': 'float',
        'min_confidence': 'float',
        'max_confidence': 'float',
        'is_case_sensative': 'bool',
        'invert': 'bool',
        'one_line': 'bool',
        'one_word': 'bool',
        'is_handwriting': 'bool',
        'orientation': 'OneOfAIForgedDALModelsParameterDefSettingViewModelOrientation',
        'marking': 'OneOfAIForgedDALModelsParameterDefSettingViewModelMarking',
        'cells': 'int',
        'clear_before': 'AIForgedDALOptionStatusFlags',
        'clear_after': 'AIForgedDALOptionStatusFlags',
        'cleanup_values_before': 'bool',
        'cleanup_values_after': 'bool',
        'validate_values_before': 'bool',
        'validate_values_after': 'bool',
        'abort_on_validation_error': 'bool',
        'is_replacement_case_sensative': 'bool',
        'compile_results': 'str',
        'max_retry': 'int',
        'timeout': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'parameter_def_id': 'parameterDefId',
        'type': 'type',
        'status': 'status',
        'dtc': 'dtc',
        'dtm': 'dtm',
        'comment': 'comment',
        'info': 'info',
        'data': 'data',
        'min_value': 'minValue',
        'max_value': 'maxValue',
        'confidence': 'confidence',
        'min_confidence': 'minConfidence',
        'max_confidence': 'maxConfidence',
        'is_case_sensative': 'isCaseSensative',
        'invert': 'invert',
        'one_line': 'oneLine',
        'one_word': 'oneWord',
        'is_handwriting': 'isHandwriting',
        'orientation': 'orientation',
        'marking': 'marking',
        'cells': 'cells',
        'clear_before': 'clearBefore',
        'clear_after': 'clearAfter',
        'cleanup_values_before': 'cleanupValuesBefore',
        'cleanup_values_after': 'cleanupValuesAfter',
        'validate_values_before': 'validateValuesBefore',
        'validate_values_after': 'validateValuesAfter',
        'abort_on_validation_error': 'abortOnValidationError',
        'is_replacement_case_sensative': 'isReplacementCaseSensative',
        'compile_results': 'compileResults',
        'max_retry': 'maxRetry',
        'timeout': 'timeout',
        'user_id': 'userId'
    }

    def __init__(self, id=None, parameter_def_id=None, type=None, status=None, dtc=None, dtm=None, comment=None, info=None, data=None, min_value=None, max_value=None, confidence=None, min_confidence=None, max_confidence=None, is_case_sensative=None, invert=None, one_line=None, one_word=None, is_handwriting=None, orientation=None, marking=None, cells=None, clear_before=None, clear_after=None, cleanup_values_before=None, cleanup_values_after=None, validate_values_before=None, validate_values_after=None, abort_on_validation_error=None, is_replacement_case_sensative=None, compile_results=None, max_retry=None, timeout=None, user_id=None):  # noqa: E501
        """AIForgedDALModelsParameterDefSettingViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._parameter_def_id = None
        self._type = None
        self._status = None
        self._dtc = None
        self._dtm = None
        self._comment = None
        self._info = None
        self._data = None
        self._min_value = None
        self._max_value = None
        self._confidence = None
        self._min_confidence = None
        self._max_confidence = None
        self._is_case_sensative = None
        self._invert = None
        self._one_line = None
        self._one_word = None
        self._is_handwriting = None
        self._orientation = None
        self._marking = None
        self._cells = None
        self._clear_before = None
        self._clear_after = None
        self._cleanup_values_before = None
        self._cleanup_values_after = None
        self._validate_values_before = None
        self._validate_values_after = None
        self._abort_on_validation_error = None
        self._is_replacement_case_sensative = None
        self._compile_results = None
        self._max_retry = None
        self._timeout = None
        self._user_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if parameter_def_id is not None:
            self.parameter_def_id = parameter_def_id
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if dtc is not None:
            self.dtc = dtc
        if dtm is not None:
            self.dtm = dtm
        if comment is not None:
            self.comment = comment
        if info is not None:
            self.info = info
        if data is not None:
            self.data = data
        if min_value is not None:
            self.min_value = min_value
        if max_value is not None:
            self.max_value = max_value
        if confidence is not None:
            self.confidence = confidence
        if min_confidence is not None:
            self.min_confidence = min_confidence
        if max_confidence is not None:
            self.max_confidence = max_confidence
        if is_case_sensative is not None:
            self.is_case_sensative = is_case_sensative
        if invert is not None:
            self.invert = invert
        if one_line is not None:
            self.one_line = one_line
        if one_word is not None:
            self.one_word = one_word
        if is_handwriting is not None:
            self.is_handwriting = is_handwriting
        if orientation is not None:
            self.orientation = orientation
        if marking is not None:
            self.marking = marking
        if cells is not None:
            self.cells = cells
        if clear_before is not None:
            self.clear_before = clear_before
        if clear_after is not None:
            self.clear_after = clear_after
        if cleanup_values_before is not None:
            self.cleanup_values_before = cleanup_values_before
        if cleanup_values_after is not None:
            self.cleanup_values_after = cleanup_values_after
        if validate_values_before is not None:
            self.validate_values_before = validate_values_before
        if validate_values_after is not None:
            self.validate_values_after = validate_values_after
        if abort_on_validation_error is not None:
            self.abort_on_validation_error = abort_on_validation_error
        if is_replacement_case_sensative is not None:
            self.is_replacement_case_sensative = is_replacement_case_sensative
        if compile_results is not None:
            self.compile_results = compile_results
        if max_retry is not None:
            self.max_retry = max_retry
        if timeout is not None:
            self.timeout = timeout
        if user_id is not None:
            self.user_id = user_id

    @property
    def id(self):
        """Gets the id of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The id of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedDALModelsParameterDefSettingViewModel.


        :param id: The id of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def parameter_def_id(self):
        """Gets the parameter_def_id of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The parameter_def_id of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: int
        """
        return self._parameter_def_id

    @parameter_def_id.setter
    def parameter_def_id(self, parameter_def_id):
        """Sets the parameter_def_id of this AIForgedDALModelsParameterDefSettingViewModel.


        :param parameter_def_id: The parameter_def_id of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: int
        """

        self._parameter_def_id = parameter_def_id

    @property
    def type(self):
        """Gets the type of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The type of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: AIForgedDALSettingType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedDALModelsParameterDefSettingViewModel.


        :param type: The type of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: AIForgedDALSettingType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The status of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: AIForgedDALSettingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedDALModelsParameterDefSettingViewModel.


        :param status: The status of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: AIForgedDALSettingStatus
        """

        self._status = status

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The dtc of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedDALModelsParameterDefSettingViewModel.


        :param dtc: The dtc of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def dtm(self):
        """Gets the dtm of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The dtm of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtm

    @dtm.setter
    def dtm(self, dtm):
        """Sets the dtm of this AIForgedDALModelsParameterDefSettingViewModel.


        :param dtm: The dtm of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtm = dtm

    @property
    def comment(self):
        """Gets the comment of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The comment of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AIForgedDALModelsParameterDefSettingViewModel.


        :param comment: The comment of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def info(self):
        """Gets the info of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The info of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AIForgedDALModelsParameterDefSettingViewModel.


        :param info: The info of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def data(self):
        """Gets the data of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The data of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AIForgedDALModelsParameterDefSettingViewModel.


        :param data: The data of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def min_value(self):
        """Gets the min_value of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The min_value of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this AIForgedDALModelsParameterDefSettingViewModel.


        :param min_value: The min_value of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: str
        """

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The max_value of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this AIForgedDALModelsParameterDefSettingViewModel.


        :param max_value: The max_value of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: str
        """

        self._max_value = max_value

    @property
    def confidence(self):
        """Gets the confidence of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The confidence of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this AIForgedDALModelsParameterDefSettingViewModel.


        :param confidence: The confidence of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def min_confidence(self):
        """Gets the min_confidence of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The min_confidence of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: float
        """
        return self._min_confidence

    @min_confidence.setter
    def min_confidence(self, min_confidence):
        """Sets the min_confidence of this AIForgedDALModelsParameterDefSettingViewModel.


        :param min_confidence: The min_confidence of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: float
        """

        self._min_confidence = min_confidence

    @property
    def max_confidence(self):
        """Gets the max_confidence of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The max_confidence of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: float
        """
        return self._max_confidence

    @max_confidence.setter
    def max_confidence(self, max_confidence):
        """Sets the max_confidence of this AIForgedDALModelsParameterDefSettingViewModel.


        :param max_confidence: The max_confidence of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: float
        """

        self._max_confidence = max_confidence

    @property
    def is_case_sensative(self):
        """Gets the is_case_sensative of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The is_case_sensative of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_case_sensative

    @is_case_sensative.setter
    def is_case_sensative(self, is_case_sensative):
        """Sets the is_case_sensative of this AIForgedDALModelsParameterDefSettingViewModel.


        :param is_case_sensative: The is_case_sensative of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: bool
        """

        self._is_case_sensative = is_case_sensative

    @property
    def invert(self):
        """Gets the invert of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The invert of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._invert

    @invert.setter
    def invert(self, invert):
        """Sets the invert of this AIForgedDALModelsParameterDefSettingViewModel.


        :param invert: The invert of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: bool
        """

        self._invert = invert

    @property
    def one_line(self):
        """Gets the one_line of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The one_line of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._one_line

    @one_line.setter
    def one_line(self, one_line):
        """Sets the one_line of this AIForgedDALModelsParameterDefSettingViewModel.


        :param one_line: The one_line of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: bool
        """

        self._one_line = one_line

    @property
    def one_word(self):
        """Gets the one_word of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The one_word of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._one_word

    @one_word.setter
    def one_word(self, one_word):
        """Sets the one_word of this AIForgedDALModelsParameterDefSettingViewModel.


        :param one_word: The one_word of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: bool
        """

        self._one_word = one_word

    @property
    def is_handwriting(self):
        """Gets the is_handwriting of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The is_handwriting of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_handwriting

    @is_handwriting.setter
    def is_handwriting(self, is_handwriting):
        """Sets the is_handwriting of this AIForgedDALModelsParameterDefSettingViewModel.


        :param is_handwriting: The is_handwriting of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: bool
        """

        self._is_handwriting = is_handwriting

    @property
    def orientation(self):
        """Gets the orientation of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The orientation of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: OneOfAIForgedDALModelsParameterDefSettingViewModelOrientation
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this AIForgedDALModelsParameterDefSettingViewModel.


        :param orientation: The orientation of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: OneOfAIForgedDALModelsParameterDefSettingViewModelOrientation
        """

        self._orientation = orientation

    @property
    def marking(self):
        """Gets the marking of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The marking of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: OneOfAIForgedDALModelsParameterDefSettingViewModelMarking
        """
        return self._marking

    @marking.setter
    def marking(self, marking):
        """Sets the marking of this AIForgedDALModelsParameterDefSettingViewModel.


        :param marking: The marking of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: OneOfAIForgedDALModelsParameterDefSettingViewModelMarking
        """

        self._marking = marking

    @property
    def cells(self):
        """Gets the cells of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The cells of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: int
        """
        return self._cells

    @cells.setter
    def cells(self, cells):
        """Sets the cells of this AIForgedDALModelsParameterDefSettingViewModel.


        :param cells: The cells of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: int
        """

        self._cells = cells

    @property
    def clear_before(self):
        """Gets the clear_before of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The clear_before of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: AIForgedDALOptionStatusFlags
        """
        return self._clear_before

    @clear_before.setter
    def clear_before(self, clear_before):
        """Sets the clear_before of this AIForgedDALModelsParameterDefSettingViewModel.


        :param clear_before: The clear_before of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: AIForgedDALOptionStatusFlags
        """

        self._clear_before = clear_before

    @property
    def clear_after(self):
        """Gets the clear_after of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The clear_after of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: AIForgedDALOptionStatusFlags
        """
        return self._clear_after

    @clear_after.setter
    def clear_after(self, clear_after):
        """Sets the clear_after of this AIForgedDALModelsParameterDefSettingViewModel.


        :param clear_after: The clear_after of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: AIForgedDALOptionStatusFlags
        """

        self._clear_after = clear_after

    @property
    def cleanup_values_before(self):
        """Gets the cleanup_values_before of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The cleanup_values_before of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._cleanup_values_before

    @cleanup_values_before.setter
    def cleanup_values_before(self, cleanup_values_before):
        """Sets the cleanup_values_before of this AIForgedDALModelsParameterDefSettingViewModel.


        :param cleanup_values_before: The cleanup_values_before of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: bool
        """

        self._cleanup_values_before = cleanup_values_before

    @property
    def cleanup_values_after(self):
        """Gets the cleanup_values_after of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The cleanup_values_after of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._cleanup_values_after

    @cleanup_values_after.setter
    def cleanup_values_after(self, cleanup_values_after):
        """Sets the cleanup_values_after of this AIForgedDALModelsParameterDefSettingViewModel.


        :param cleanup_values_after: The cleanup_values_after of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: bool
        """

        self._cleanup_values_after = cleanup_values_after

    @property
    def validate_values_before(self):
        """Gets the validate_values_before of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The validate_values_before of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._validate_values_before

    @validate_values_before.setter
    def validate_values_before(self, validate_values_before):
        """Sets the validate_values_before of this AIForgedDALModelsParameterDefSettingViewModel.


        :param validate_values_before: The validate_values_before of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: bool
        """

        self._validate_values_before = validate_values_before

    @property
    def validate_values_after(self):
        """Gets the validate_values_after of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The validate_values_after of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._validate_values_after

    @validate_values_after.setter
    def validate_values_after(self, validate_values_after):
        """Sets the validate_values_after of this AIForgedDALModelsParameterDefSettingViewModel.


        :param validate_values_after: The validate_values_after of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: bool
        """

        self._validate_values_after = validate_values_after

    @property
    def abort_on_validation_error(self):
        """Gets the abort_on_validation_error of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The abort_on_validation_error of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._abort_on_validation_error

    @abort_on_validation_error.setter
    def abort_on_validation_error(self, abort_on_validation_error):
        """Sets the abort_on_validation_error of this AIForgedDALModelsParameterDefSettingViewModel.


        :param abort_on_validation_error: The abort_on_validation_error of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: bool
        """

        self._abort_on_validation_error = abort_on_validation_error

    @property
    def is_replacement_case_sensative(self):
        """Gets the is_replacement_case_sensative of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The is_replacement_case_sensative of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_replacement_case_sensative

    @is_replacement_case_sensative.setter
    def is_replacement_case_sensative(self, is_replacement_case_sensative):
        """Sets the is_replacement_case_sensative of this AIForgedDALModelsParameterDefSettingViewModel.


        :param is_replacement_case_sensative: The is_replacement_case_sensative of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: bool
        """

        self._is_replacement_case_sensative = is_replacement_case_sensative

    @property
    def compile_results(self):
        """Gets the compile_results of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The compile_results of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._compile_results

    @compile_results.setter
    def compile_results(self, compile_results):
        """Sets the compile_results of this AIForgedDALModelsParameterDefSettingViewModel.


        :param compile_results: The compile_results of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: str
        """

        self._compile_results = compile_results

    @property
    def max_retry(self):
        """Gets the max_retry of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The max_retry of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: int
        """
        return self._max_retry

    @max_retry.setter
    def max_retry(self, max_retry):
        """Sets the max_retry of this AIForgedDALModelsParameterDefSettingViewModel.


        :param max_retry: The max_retry of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: int
        """

        self._max_retry = max_retry

    @property
    def timeout(self):
        """Gets the timeout of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The timeout of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this AIForgedDALModelsParameterDefSettingViewModel.


        :param timeout: The timeout of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: str
        """

        self._timeout = timeout

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501


        :return: The user_id of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedDALModelsParameterDefSettingViewModel.


        :param user_id: The user_id of this AIForgedDALModelsParameterDefSettingViewModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedDALModelsParameterDefSettingViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedDALModelsParameterDefSettingViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
