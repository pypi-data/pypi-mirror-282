# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsWorkItemViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'project_id': 'int',
        'user_id': 'str',
        'service_id': 'int',
        'document_id': 'int',
        'def_id': 'int',
        'shred_id': 'int',
        'verification_id': 'int',
        'transaction_id': 'int',
        'work_item_id': 'int',
        'type': 'AIForgedDALWorkItemType',
        'action': 'AIForgedDALWorkItemAction',
        'status': 'AIForgedDALWorkItemStatus',
        'method': 'OneOfAIForgedViewModelsWorkItemViewModelMethod',
        'reason': 'AIForgedDALWorkItemReason',
        'reason_lookup': 'int',
        'reason_record': 'int',
        'reason_code': 'str',
        'reason_description': 'str',
        'reason_comment': 'str',
        'info': 'str',
        'comment': 'str',
        'group_id': 'int',
        'dtc': 'datetime',
        'dtm': 'datetime',
        'due_date': 'datetime',
        'open': 'datetime',
        'closed': 'datetime',
        'duration': 'str',
        'project': 'OneOfAIForgedViewModelsWorkItemViewModelProject',
        'service': 'OneOfAIForgedViewModelsWorkItemViewModelService',
        'document': 'OneOfAIForgedViewModelsWorkItemViewModelDocument',
        'shred': 'OneOfAIForgedViewModelsWorkItemViewModelShred',
        '_def': 'OneOfAIForgedViewModelsWorkItemViewModelDef',
        'verification': 'OneOfAIForgedViewModelsWorkItemViewModelVerification',
        'parent': 'OneOfAIForgedViewModelsWorkItemViewModelParent',
        'user': 'OneOfAIForgedViewModelsWorkItemViewModelUser',
        'doc_category': 'str'
    }

    attribute_map = {
        'id': 'id',
        'project_id': 'projectId',
        'user_id': 'userId',
        'service_id': 'serviceId',
        'document_id': 'documentId',
        'def_id': 'defId',
        'shred_id': 'shredId',
        'verification_id': 'verificationId',
        'transaction_id': 'transactionId',
        'work_item_id': 'workItemId',
        'type': 'type',
        'action': 'action',
        'status': 'status',
        'method': 'method',
        'reason': 'reason',
        'reason_lookup': 'reasonLookup',
        'reason_record': 'reasonRecord',
        'reason_code': 'reasonCode',
        'reason_description': 'reasonDescription',
        'reason_comment': 'reasonComment',
        'info': 'info',
        'comment': 'comment',
        'group_id': 'groupId',
        'dtc': 'dtc',
        'dtm': 'dtm',
        'due_date': 'dueDate',
        'open': 'open',
        'closed': 'closed',
        'duration': 'duration',
        'project': 'project',
        'service': 'service',
        'document': 'document',
        'shred': 'shred',
        '_def': 'def',
        'verification': 'verification',
        'parent': 'parent',
        'user': 'user',
        'doc_category': 'docCategory'
    }

    def __init__(self, id=None, project_id=None, user_id=None, service_id=None, document_id=None, def_id=None, shred_id=None, verification_id=None, transaction_id=None, work_item_id=None, type=None, action=None, status=None, method=None, reason=None, reason_lookup=None, reason_record=None, reason_code=None, reason_description=None, reason_comment=None, info=None, comment=None, group_id=None, dtc=None, dtm=None, due_date=None, open=None, closed=None, duration=None, project=None, service=None, document=None, shred=None, _def=None, verification=None, parent=None, user=None, doc_category=None):  # noqa: E501
        """AIForgedViewModelsWorkItemViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._project_id = None
        self._user_id = None
        self._service_id = None
        self._document_id = None
        self._def_id = None
        self._shred_id = None
        self._verification_id = None
        self._transaction_id = None
        self._work_item_id = None
        self._type = None
        self._action = None
        self._status = None
        self._method = None
        self._reason = None
        self._reason_lookup = None
        self._reason_record = None
        self._reason_code = None
        self._reason_description = None
        self._reason_comment = None
        self._info = None
        self._comment = None
        self._group_id = None
        self._dtc = None
        self._dtm = None
        self._due_date = None
        self._open = None
        self._closed = None
        self._duration = None
        self._project = None
        self._service = None
        self._document = None
        self._shred = None
        self.__def = None
        self._verification = None
        self._parent = None
        self._user = None
        self._doc_category = None
        self.discriminator = None
        self.id = id
        if project_id is not None:
            self.project_id = project_id
        if user_id is not None:
            self.user_id = user_id
        if service_id is not None:
            self.service_id = service_id
        if document_id is not None:
            self.document_id = document_id
        if def_id is not None:
            self.def_id = def_id
        if shred_id is not None:
            self.shred_id = shred_id
        if verification_id is not None:
            self.verification_id = verification_id
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if work_item_id is not None:
            self.work_item_id = work_item_id
        if type is not None:
            self.type = type
        if action is not None:
            self.action = action
        if status is not None:
            self.status = status
        if method is not None:
            self.method = method
        if reason is not None:
            self.reason = reason
        if reason_lookup is not None:
            self.reason_lookup = reason_lookup
        if reason_record is not None:
            self.reason_record = reason_record
        if reason_code is not None:
            self.reason_code = reason_code
        if reason_description is not None:
            self.reason_description = reason_description
        if reason_comment is not None:
            self.reason_comment = reason_comment
        if info is not None:
            self.info = info
        if comment is not None:
            self.comment = comment
        if group_id is not None:
            self.group_id = group_id
        if dtc is not None:
            self.dtc = dtc
        if dtm is not None:
            self.dtm = dtm
        if due_date is not None:
            self.due_date = due_date
        if open is not None:
            self.open = open
        if closed is not None:
            self.closed = closed
        if duration is not None:
            self.duration = duration
        if project is not None:
            self.project = project
        if service is not None:
            self.service = service
        if document is not None:
            self.document = document
        if shred is not None:
            self.shred = shred
        if _def is not None:
            self._def = _def
        if verification is not None:
            self.verification = verification
        if parent is not None:
            self.parent = parent
        if user is not None:
            self.user = user
        if doc_category is not None:
            self.doc_category = doc_category

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsWorkItemViewModel.


        :param id: The id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The project_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AIForgedViewModelsWorkItemViewModel.


        :param project_id: The project_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The user_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedViewModelsWorkItemViewModel.


        :param user_id: The user_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def service_id(self):
        """Gets the service_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The service_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AIForgedViewModelsWorkItemViewModel.


        :param service_id: The service_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def document_id(self):
        """Gets the document_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The document_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AIForgedViewModelsWorkItemViewModel.


        :param document_id: The document_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def def_id(self):
        """Gets the def_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The def_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._def_id

    @def_id.setter
    def def_id(self, def_id):
        """Sets the def_id of this AIForgedViewModelsWorkItemViewModel.


        :param def_id: The def_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: int
        """

        self._def_id = def_id

    @property
    def shred_id(self):
        """Gets the shred_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The shred_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._shred_id

    @shred_id.setter
    def shred_id(self, shred_id):
        """Sets the shred_id of this AIForgedViewModelsWorkItemViewModel.


        :param shred_id: The shred_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: int
        """

        self._shred_id = shred_id

    @property
    def verification_id(self):
        """Gets the verification_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The verification_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._verification_id

    @verification_id.setter
    def verification_id(self, verification_id):
        """Sets the verification_id of this AIForgedViewModelsWorkItemViewModel.


        :param verification_id: The verification_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: int
        """

        self._verification_id = verification_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The transaction_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this AIForgedViewModelsWorkItemViewModel.


        :param transaction_id: The transaction_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: int
        """

        self._transaction_id = transaction_id

    @property
    def work_item_id(self):
        """Gets the work_item_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The work_item_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._work_item_id

    @work_item_id.setter
    def work_item_id(self, work_item_id):
        """Sets the work_item_id of this AIForgedViewModelsWorkItemViewModel.


        :param work_item_id: The work_item_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: int
        """

        self._work_item_id = work_item_id

    @property
    def type(self):
        """Gets the type of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The type of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: AIForgedDALWorkItemType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedViewModelsWorkItemViewModel.


        :param type: The type of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: AIForgedDALWorkItemType
        """

        self._type = type

    @property
    def action(self):
        """Gets the action of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The action of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: AIForgedDALWorkItemAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AIForgedViewModelsWorkItemViewModel.


        :param action: The action of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: AIForgedDALWorkItemAction
        """

        self._action = action

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The status of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: AIForgedDALWorkItemStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsWorkItemViewModel.


        :param status: The status of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: AIForgedDALWorkItemStatus
        """

        self._status = status

    @property
    def method(self):
        """Gets the method of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The method of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWorkItemViewModelMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this AIForgedViewModelsWorkItemViewModel.


        :param method: The method of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsWorkItemViewModelMethod
        """

        self._method = method

    @property
    def reason(self):
        """Gets the reason of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The reason of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: AIForgedDALWorkItemReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this AIForgedViewModelsWorkItemViewModel.


        :param reason: The reason of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: AIForgedDALWorkItemReason
        """

        self._reason = reason

    @property
    def reason_lookup(self):
        """Gets the reason_lookup of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The reason_lookup of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._reason_lookup

    @reason_lookup.setter
    def reason_lookup(self, reason_lookup):
        """Sets the reason_lookup of this AIForgedViewModelsWorkItemViewModel.


        :param reason_lookup: The reason_lookup of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: int
        """

        self._reason_lookup = reason_lookup

    @property
    def reason_record(self):
        """Gets the reason_record of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The reason_record of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._reason_record

    @reason_record.setter
    def reason_record(self, reason_record):
        """Sets the reason_record of this AIForgedViewModelsWorkItemViewModel.


        :param reason_record: The reason_record of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: int
        """

        self._reason_record = reason_record

    @property
    def reason_code(self):
        """Gets the reason_code of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The reason_code of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this AIForgedViewModelsWorkItemViewModel.


        :param reason_code: The reason_code of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def reason_description(self):
        """Gets the reason_description of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The reason_description of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._reason_description

    @reason_description.setter
    def reason_description(self, reason_description):
        """Sets the reason_description of this AIForgedViewModelsWorkItemViewModel.


        :param reason_description: The reason_description of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: str
        """

        self._reason_description = reason_description

    @property
    def reason_comment(self):
        """Gets the reason_comment of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The reason_comment of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._reason_comment

    @reason_comment.setter
    def reason_comment(self, reason_comment):
        """Sets the reason_comment of this AIForgedViewModelsWorkItemViewModel.


        :param reason_comment: The reason_comment of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: str
        """

        self._reason_comment = reason_comment

    @property
    def info(self):
        """Gets the info of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The info of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AIForgedViewModelsWorkItemViewModel.


        :param info: The info of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def comment(self):
        """Gets the comment of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The comment of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AIForgedViewModelsWorkItemViewModel.


        :param comment: The comment of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def group_id(self):
        """Gets the group_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The group_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AIForgedViewModelsWorkItemViewModel.


        :param group_id: The group_id of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The dtc of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedViewModelsWorkItemViewModel.


        :param dtc: The dtc of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def dtm(self):
        """Gets the dtm of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The dtm of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtm

    @dtm.setter
    def dtm(self, dtm):
        """Sets the dtm of this AIForgedViewModelsWorkItemViewModel.


        :param dtm: The dtm of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtm = dtm

    @property
    def due_date(self):
        """Gets the due_date of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The due_date of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this AIForgedViewModelsWorkItemViewModel.


        :param due_date: The due_date of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def open(self):
        """Gets the open of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The open of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this AIForgedViewModelsWorkItemViewModel.


        :param open: The open of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: datetime
        """

        self._open = open

    @property
    def closed(self):
        """Gets the closed of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The closed of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this AIForgedViewModelsWorkItemViewModel.


        :param closed: The closed of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: datetime
        """

        self._closed = closed

    @property
    def duration(self):
        """Gets the duration of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The duration of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this AIForgedViewModelsWorkItemViewModel.


        :param duration: The duration of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def project(self):
        """Gets the project of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The project of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWorkItemViewModelProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AIForgedViewModelsWorkItemViewModel.


        :param project: The project of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsWorkItemViewModelProject
        """

        self._project = project

    @property
    def service(self):
        """Gets the service of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The service of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWorkItemViewModelService
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this AIForgedViewModelsWorkItemViewModel.


        :param service: The service of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsWorkItemViewModelService
        """

        self._service = service

    @property
    def document(self):
        """Gets the document of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The document of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWorkItemViewModelDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this AIForgedViewModelsWorkItemViewModel.


        :param document: The document of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsWorkItemViewModelDocument
        """

        self._document = document

    @property
    def shred(self):
        """Gets the shred of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The shred of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWorkItemViewModelShred
        """
        return self._shred

    @shred.setter
    def shred(self, shred):
        """Sets the shred of this AIForgedViewModelsWorkItemViewModel.


        :param shred: The shred of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsWorkItemViewModelShred
        """

        self._shred = shred

    @property
    def _def(self):
        """Gets the _def of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The _def of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWorkItemViewModelDef
        """
        return self.__def

    @_def.setter
    def _def(self, _def):
        """Sets the _def of this AIForgedViewModelsWorkItemViewModel.


        :param _def: The _def of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsWorkItemViewModelDef
        """

        self.__def = _def

    @property
    def verification(self):
        """Gets the verification of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The verification of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWorkItemViewModelVerification
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this AIForgedViewModelsWorkItemViewModel.


        :param verification: The verification of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsWorkItemViewModelVerification
        """

        self._verification = verification

    @property
    def parent(self):
        """Gets the parent of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The parent of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWorkItemViewModelParent
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this AIForgedViewModelsWorkItemViewModel.


        :param parent: The parent of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsWorkItemViewModelParent
        """

        self._parent = parent

    @property
    def user(self):
        """Gets the user of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The user of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWorkItemViewModelUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AIForgedViewModelsWorkItemViewModel.


        :param user: The user of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsWorkItemViewModelUser
        """

        self._user = user

    @property
    def doc_category(self):
        """Gets the doc_category of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501


        :return: The doc_category of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._doc_category

    @doc_category.setter
    def doc_category(self, doc_category):
        """Sets the doc_category of this AIForgedViewModelsWorkItemViewModel.


        :param doc_category: The doc_category of this AIForgedViewModelsWorkItemViewModel.  # noqa: E501
        :type: str
        """

        self._doc_category = doc_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsWorkItemViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsWorkItemViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
