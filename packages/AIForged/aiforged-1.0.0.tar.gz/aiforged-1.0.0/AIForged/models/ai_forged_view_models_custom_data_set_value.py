# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsCustomDataSetValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'def_id': 'int',
        'id': 'int',
        'parent_id': 'int',
        'index': 'int',
        'value': 'str',
        'availability': 'OneOfAIForgedViewModelsCustomDataSetValueAvailability',
        'verification_id': 'int',
        'ver_value': 'str',
        'dt': 'datetime',
        'confidence': 'float',
        'type': 'OneOfAIForgedViewModelsCustomDataSetValueType',
        'status': 'OneOfAIForgedViewModelsCustomDataSetValueStatus',
        'provider': 'str',
        'result': 'str'
    }

    attribute_map = {
        'def_id': 'defId',
        'id': 'id',
        'parent_id': 'parentId',
        'index': 'index',
        'value': 'value',
        'availability': 'availability',
        'verification_id': 'verificationId',
        'ver_value': 'verValue',
        'dt': 'dt',
        'confidence': 'confidence',
        'type': 'type',
        'status': 'status',
        'provider': 'provider',
        'result': 'result'
    }

    def __init__(self, def_id=None, id=None, parent_id=None, index=None, value=None, availability=None, verification_id=None, ver_value=None, dt=None, confidence=None, type=None, status=None, provider=None, result=None):  # noqa: E501
        """AIForgedViewModelsCustomDataSetValue - a model defined in Swagger"""  # noqa: E501
        self._def_id = None
        self._id = None
        self._parent_id = None
        self._index = None
        self._value = None
        self._availability = None
        self._verification_id = None
        self._ver_value = None
        self._dt = None
        self._confidence = None
        self._type = None
        self._status = None
        self._provider = None
        self._result = None
        self.discriminator = None
        if def_id is not None:
            self.def_id = def_id
        if id is not None:
            self.id = id
        if parent_id is not None:
            self.parent_id = parent_id
        if index is not None:
            self.index = index
        if value is not None:
            self.value = value
        if availability is not None:
            self.availability = availability
        if verification_id is not None:
            self.verification_id = verification_id
        if ver_value is not None:
            self.ver_value = ver_value
        if dt is not None:
            self.dt = dt
        if confidence is not None:
            self.confidence = confidence
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if provider is not None:
            self.provider = provider
        if result is not None:
            self.result = result

    @property
    def def_id(self):
        """Gets the def_id of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501


        :return: The def_id of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :rtype: int
        """
        return self._def_id

    @def_id.setter
    def def_id(self, def_id):
        """Sets the def_id of this AIForgedViewModelsCustomDataSetValue.


        :param def_id: The def_id of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :type: int
        """

        self._def_id = def_id

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501


        :return: The id of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsCustomDataSetValue.


        :param id: The id of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def parent_id(self):
        """Gets the parent_id of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501


        :return: The parent_id of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this AIForgedViewModelsCustomDataSetValue.


        :param parent_id: The parent_id of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def index(self):
        """Gets the index of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501


        :return: The index of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this AIForgedViewModelsCustomDataSetValue.


        :param index: The index of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def value(self):
        """Gets the value of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501


        :return: The value of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AIForgedViewModelsCustomDataSetValue.


        :param value: The value of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def availability(self):
        """Gets the availability of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501


        :return: The availability of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsCustomDataSetValueAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AIForgedViewModelsCustomDataSetValue.


        :param availability: The availability of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :type: OneOfAIForgedViewModelsCustomDataSetValueAvailability
        """

        self._availability = availability

    @property
    def verification_id(self):
        """Gets the verification_id of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501


        :return: The verification_id of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :rtype: int
        """
        return self._verification_id

    @verification_id.setter
    def verification_id(self, verification_id):
        """Sets the verification_id of this AIForgedViewModelsCustomDataSetValue.


        :param verification_id: The verification_id of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :type: int
        """

        self._verification_id = verification_id

    @property
    def ver_value(self):
        """Gets the ver_value of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501


        :return: The ver_value of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :rtype: str
        """
        return self._ver_value

    @ver_value.setter
    def ver_value(self, ver_value):
        """Sets the ver_value of this AIForgedViewModelsCustomDataSetValue.


        :param ver_value: The ver_value of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :type: str
        """

        self._ver_value = ver_value

    @property
    def dt(self):
        """Gets the dt of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501


        :return: The dt of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this AIForgedViewModelsCustomDataSetValue.


        :param dt: The dt of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def confidence(self):
        """Gets the confidence of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501


        :return: The confidence of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this AIForgedViewModelsCustomDataSetValue.


        :param confidence: The confidence of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def type(self):
        """Gets the type of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501


        :return: The type of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsCustomDataSetValueType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedViewModelsCustomDataSetValue.


        :param type: The type of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :type: OneOfAIForgedViewModelsCustomDataSetValueType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501


        :return: The status of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsCustomDataSetValueStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsCustomDataSetValue.


        :param status: The status of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :type: OneOfAIForgedViewModelsCustomDataSetValueStatus
        """

        self._status = status

    @property
    def provider(self):
        """Gets the provider of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501


        :return: The provider of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this AIForgedViewModelsCustomDataSetValue.


        :param provider: The provider of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def result(self):
        """Gets the result of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501


        :return: The result of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AIForgedViewModelsCustomDataSetValue.


        :param result: The result of this AIForgedViewModelsCustomDataSetValue.  # noqa: E501
        :type: str
        """

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsCustomDataSetValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsCustomDataSetValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
