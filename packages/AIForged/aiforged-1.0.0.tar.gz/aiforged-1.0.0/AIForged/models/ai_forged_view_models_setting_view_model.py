# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsSettingViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'str',
        'name': 'str',
        'key': 'str',
        'description': 'str',
        'value': 'str',
        'status': 'AIForgedDALSettingStatus',
        'dtc': 'datetime',
        'dtm': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'name': 'name',
        'key': 'key',
        'description': 'description',
        'value': 'value',
        'status': 'status',
        'dtc': 'dtc',
        'dtm': 'dtm'
    }

    def __init__(self, id=None, user_id=None, name=None, key=None, description=None, value=None, status=None, dtc=None, dtm=None):  # noqa: E501
        """AIForgedViewModelsSettingViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._name = None
        self._key = None
        self._description = None
        self._value = None
        self._status = None
        self._dtc = None
        self._dtm = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if name is not None:
            self.name = name
        if key is not None:
            self.key = key
        if description is not None:
            self.description = description
        if value is not None:
            self.value = value
        if status is not None:
            self.status = status
        if dtc is not None:
            self.dtc = dtc
        if dtm is not None:
            self.dtm = dtm

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsSettingViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsSettingViewModel.


        :param id: The id of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedViewModelsSettingViewModel.  # noqa: E501


        :return: The user_id of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedViewModelsSettingViewModel.


        :param user_id: The user_id of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def name(self):
        """Gets the name of this AIForgedViewModelsSettingViewModel.  # noqa: E501


        :return: The name of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AIForgedViewModelsSettingViewModel.


        :param name: The name of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def key(self):
        """Gets the key of this AIForgedViewModelsSettingViewModel.  # noqa: E501


        :return: The key of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this AIForgedViewModelsSettingViewModel.


        :param key: The key of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def description(self):
        """Gets the description of this AIForgedViewModelsSettingViewModel.  # noqa: E501


        :return: The description of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AIForgedViewModelsSettingViewModel.


        :param description: The description of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def value(self):
        """Gets the value of this AIForgedViewModelsSettingViewModel.  # noqa: E501


        :return: The value of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AIForgedViewModelsSettingViewModel.


        :param value: The value of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsSettingViewModel.  # noqa: E501


        :return: The status of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :rtype: AIForgedDALSettingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsSettingViewModel.


        :param status: The status of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :type: AIForgedDALSettingStatus
        """

        self._status = status

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedViewModelsSettingViewModel.  # noqa: E501


        :return: The dtc of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedViewModelsSettingViewModel.


        :param dtc: The dtc of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def dtm(self):
        """Gets the dtm of this AIForgedViewModelsSettingViewModel.  # noqa: E501


        :return: The dtm of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtm

    @dtm.setter
    def dtm(self, dtm):
        """Sets the dtm of this AIForgedViewModelsSettingViewModel.


        :param dtm: The dtm of this AIForgedViewModelsSettingViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtm = dtm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsSettingViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsSettingViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
