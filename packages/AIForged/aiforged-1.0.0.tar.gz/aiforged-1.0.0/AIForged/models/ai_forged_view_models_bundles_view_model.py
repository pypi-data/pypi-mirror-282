# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsBundlesViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'AIForgedDALBundleType',
        'name': 'str',
        'description': 'str',
        'count': 'int',
        'price': 'float',
        'discount': 'float',
        'dtc': 'datetime',
        'dtm': 'datetime',
        'is_active': 'bool',
        'expiry_date': 'datetime',
        'product_code': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'name': 'name',
        'description': 'description',
        'count': 'count',
        'price': 'price',
        'discount': 'discount',
        'dtc': 'dtc',
        'dtm': 'dtm',
        'is_active': 'isActive',
        'expiry_date': 'expiryDate',
        'product_code': 'productCode'
    }

    def __init__(self, id=None, type=None, name=None, description=None, count=None, price=None, discount=None, dtc=None, dtm=None, is_active=None, expiry_date=None, product_code=None):  # noqa: E501
        """AIForgedViewModelsBundlesViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._name = None
        self._description = None
        self._count = None
        self._price = None
        self._discount = None
        self._dtc = None
        self._dtm = None
        self._is_active = None
        self._expiry_date = None
        self._product_code = None
        self.discriminator = None
        self.id = id
        self.type = type
        self.name = name
        if description is not None:
            self.description = description
        if count is not None:
            self.count = count
        if price is not None:
            self.price = price
        if discount is not None:
            self.discount = discount
        if dtc is not None:
            self.dtc = dtc
        if dtm is not None:
            self.dtm = dtm
        if is_active is not None:
            self.is_active = is_active
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if product_code is not None:
            self.product_code = product_code

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsBundlesViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsBundlesViewModel.


        :param id: The id of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this AIForgedViewModelsBundlesViewModel.  # noqa: E501


        :return: The type of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :rtype: AIForgedDALBundleType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedViewModelsBundlesViewModel.


        :param type: The type of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :type: AIForgedDALBundleType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this AIForgedViewModelsBundlesViewModel.  # noqa: E501


        :return: The name of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AIForgedViewModelsBundlesViewModel.


        :param name: The name of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this AIForgedViewModelsBundlesViewModel.  # noqa: E501


        :return: The description of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AIForgedViewModelsBundlesViewModel.


        :param description: The description of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def count(self):
        """Gets the count of this AIForgedViewModelsBundlesViewModel.  # noqa: E501


        :return: The count of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AIForgedViewModelsBundlesViewModel.


        :param count: The count of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def price(self):
        """Gets the price of this AIForgedViewModelsBundlesViewModel.  # noqa: E501


        :return: The price of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AIForgedViewModelsBundlesViewModel.


        :param price: The price of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def discount(self):
        """Gets the discount of this AIForgedViewModelsBundlesViewModel.  # noqa: E501


        :return: The discount of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this AIForgedViewModelsBundlesViewModel.


        :param discount: The discount of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedViewModelsBundlesViewModel.  # noqa: E501


        :return: The dtc of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedViewModelsBundlesViewModel.


        :param dtc: The dtc of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def dtm(self):
        """Gets the dtm of this AIForgedViewModelsBundlesViewModel.  # noqa: E501


        :return: The dtm of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtm

    @dtm.setter
    def dtm(self, dtm):
        """Sets the dtm of this AIForgedViewModelsBundlesViewModel.


        :param dtm: The dtm of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtm = dtm

    @property
    def is_active(self):
        """Gets the is_active of this AIForgedViewModelsBundlesViewModel.  # noqa: E501


        :return: The is_active of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AIForgedViewModelsBundlesViewModel.


        :param is_active: The is_active of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def expiry_date(self):
        """Gets the expiry_date of this AIForgedViewModelsBundlesViewModel.  # noqa: E501


        :return: The expiry_date of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this AIForgedViewModelsBundlesViewModel.


        :param expiry_date: The expiry_date of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :type: datetime
        """

        self._expiry_date = expiry_date

    @property
    def product_code(self):
        """Gets the product_code of this AIForgedViewModelsBundlesViewModel.  # noqa: E501


        :return: The product_code of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this AIForgedViewModelsBundlesViewModel.


        :param product_code: The product_code of this AIForgedViewModelsBundlesViewModel.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsBundlesViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsBundlesViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
