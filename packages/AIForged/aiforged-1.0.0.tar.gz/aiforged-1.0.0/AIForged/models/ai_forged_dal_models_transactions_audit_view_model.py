# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedDALModelsTransactionsAuditViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'project_id': 'int',
        'service_id': 'int',
        'document_id': 'int',
        'bundle_id': 'int',
        'payment_id': 'int',
        'charge_id': 'int',
        'related_txn_id': 'int',
        'status': 'AIForgedDALTransactionStatus',
        'user_id': 'str',
        'run_id': 'str',
        'dtc': 'datetime',
        'dtm': 'datetime',
        'qty': 'int',
        'price': 'float',
        'cost': 'float',
        'charge': 'float',
        'is_credit': 'bool',
        'credit_balance': 'float',
        'comment': 'str',
        'project_name': 'str',
        'is_billing_project': 'bool',
        'service_name': 'str',
        'bundle_name': 'str',
        'user_name': 'str',
        'audit_user_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'project_id': 'projectId',
        'service_id': 'serviceId',
        'document_id': 'documentId',
        'bundle_id': 'bundleId',
        'payment_id': 'paymentId',
        'charge_id': 'chargeId',
        'related_txn_id': 'relatedTxnId',
        'status': 'status',
        'user_id': 'userId',
        'run_id': 'runId',
        'dtc': 'dtc',
        'dtm': 'dtm',
        'qty': 'qty',
        'price': 'price',
        'cost': 'cost',
        'charge': 'charge',
        'is_credit': 'isCredit',
        'credit_balance': 'creditBalance',
        'comment': 'comment',
        'project_name': 'projectName',
        'is_billing_project': 'isBillingProject',
        'service_name': 'serviceName',
        'bundle_name': 'bundleName',
        'user_name': 'userName',
        'audit_user_name': 'auditUserName'
    }

    def __init__(self, id=None, project_id=None, service_id=None, document_id=None, bundle_id=None, payment_id=None, charge_id=None, related_txn_id=None, status=None, user_id=None, run_id=None, dtc=None, dtm=None, qty=None, price=None, cost=None, charge=None, is_credit=None, credit_balance=None, comment=None, project_name=None, is_billing_project=None, service_name=None, bundle_name=None, user_name=None, audit_user_name=None):  # noqa: E501
        """AIForgedDALModelsTransactionsAuditViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._project_id = None
        self._service_id = None
        self._document_id = None
        self._bundle_id = None
        self._payment_id = None
        self._charge_id = None
        self._related_txn_id = None
        self._status = None
        self._user_id = None
        self._run_id = None
        self._dtc = None
        self._dtm = None
        self._qty = None
        self._price = None
        self._cost = None
        self._charge = None
        self._is_credit = None
        self._credit_balance = None
        self._comment = None
        self._project_name = None
        self._is_billing_project = None
        self._service_name = None
        self._bundle_name = None
        self._user_name = None
        self._audit_user_name = None
        self.discriminator = None
        self.id = id
        if project_id is not None:
            self.project_id = project_id
        if service_id is not None:
            self.service_id = service_id
        if document_id is not None:
            self.document_id = document_id
        if bundle_id is not None:
            self.bundle_id = bundle_id
        if payment_id is not None:
            self.payment_id = payment_id
        if charge_id is not None:
            self.charge_id = charge_id
        if related_txn_id is not None:
            self.related_txn_id = related_txn_id
        if status is not None:
            self.status = status
        if user_id is not None:
            self.user_id = user_id
        if run_id is not None:
            self.run_id = run_id
        if dtc is not None:
            self.dtc = dtc
        if dtm is not None:
            self.dtm = dtm
        if qty is not None:
            self.qty = qty
        if price is not None:
            self.price = price
        if cost is not None:
            self.cost = cost
        if charge is not None:
            self.charge = charge
        if is_credit is not None:
            self.is_credit = is_credit
        if credit_balance is not None:
            self.credit_balance = credit_balance
        if comment is not None:
            self.comment = comment
        if project_name is not None:
            self.project_name = project_name
        if is_billing_project is not None:
            self.is_billing_project = is_billing_project
        if service_name is not None:
            self.service_name = service_name
        if bundle_name is not None:
            self.bundle_name = bundle_name
        if user_name is not None:
            self.user_name = user_name
        if audit_user_name is not None:
            self.audit_user_name = audit_user_name

    @property
    def id(self):
        """Gets the id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedDALModelsTransactionsAuditViewModel.


        :param id: The id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The project_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AIForgedDALModelsTransactionsAuditViewModel.


        :param project_id: The project_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def service_id(self):
        """Gets the service_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The service_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AIForgedDALModelsTransactionsAuditViewModel.


        :param service_id: The service_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def document_id(self):
        """Gets the document_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The document_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AIForgedDALModelsTransactionsAuditViewModel.


        :param document_id: The document_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def bundle_id(self):
        """Gets the bundle_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The bundle_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: int
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this AIForgedDALModelsTransactionsAuditViewModel.


        :param bundle_id: The bundle_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: int
        """

        self._bundle_id = bundle_id

    @property
    def payment_id(self):
        """Gets the payment_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The payment_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: int
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this AIForgedDALModelsTransactionsAuditViewModel.


        :param payment_id: The payment_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: int
        """

        self._payment_id = payment_id

    @property
    def charge_id(self):
        """Gets the charge_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The charge_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: int
        """
        return self._charge_id

    @charge_id.setter
    def charge_id(self, charge_id):
        """Sets the charge_id of this AIForgedDALModelsTransactionsAuditViewModel.


        :param charge_id: The charge_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: int
        """

        self._charge_id = charge_id

    @property
    def related_txn_id(self):
        """Gets the related_txn_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The related_txn_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: int
        """
        return self._related_txn_id

    @related_txn_id.setter
    def related_txn_id(self, related_txn_id):
        """Sets the related_txn_id of this AIForgedDALModelsTransactionsAuditViewModel.


        :param related_txn_id: The related_txn_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: int
        """

        self._related_txn_id = related_txn_id

    @property
    def status(self):
        """Gets the status of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The status of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: AIForgedDALTransactionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedDALModelsTransactionsAuditViewModel.


        :param status: The status of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: AIForgedDALTransactionStatus
        """

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The user_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedDALModelsTransactionsAuditViewModel.


        :param user_id: The user_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def run_id(self):
        """Gets the run_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The run_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this AIForgedDALModelsTransactionsAuditViewModel.


        :param run_id: The run_id of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The dtc of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedDALModelsTransactionsAuditViewModel.


        :param dtc: The dtc of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def dtm(self):
        """Gets the dtm of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The dtm of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtm

    @dtm.setter
    def dtm(self, dtm):
        """Sets the dtm of this AIForgedDALModelsTransactionsAuditViewModel.


        :param dtm: The dtm of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtm = dtm

    @property
    def qty(self):
        """Gets the qty of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The qty of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this AIForgedDALModelsTransactionsAuditViewModel.


        :param qty: The qty of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: int
        """

        self._qty = qty

    @property
    def price(self):
        """Gets the price of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The price of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AIForgedDALModelsTransactionsAuditViewModel.


        :param price: The price of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def cost(self):
        """Gets the cost of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The cost of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this AIForgedDALModelsTransactionsAuditViewModel.


        :param cost: The cost of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def charge(self):
        """Gets the charge of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The charge of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: float
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """Sets the charge of this AIForgedDALModelsTransactionsAuditViewModel.


        :param charge: The charge of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: float
        """

        self._charge = charge

    @property
    def is_credit(self):
        """Gets the is_credit of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The is_credit of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_credit

    @is_credit.setter
    def is_credit(self, is_credit):
        """Sets the is_credit of this AIForgedDALModelsTransactionsAuditViewModel.


        :param is_credit: The is_credit of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: bool
        """

        self._is_credit = is_credit

    @property
    def credit_balance(self):
        """Gets the credit_balance of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The credit_balance of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: float
        """
        return self._credit_balance

    @credit_balance.setter
    def credit_balance(self, credit_balance):
        """Sets the credit_balance of this AIForgedDALModelsTransactionsAuditViewModel.


        :param credit_balance: The credit_balance of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: float
        """

        self._credit_balance = credit_balance

    @property
    def comment(self):
        """Gets the comment of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The comment of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AIForgedDALModelsTransactionsAuditViewModel.


        :param comment: The comment of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def project_name(self):
        """Gets the project_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The project_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this AIForgedDALModelsTransactionsAuditViewModel.


        :param project_name: The project_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def is_billing_project(self):
        """Gets the is_billing_project of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The is_billing_project of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_billing_project

    @is_billing_project.setter
    def is_billing_project(self, is_billing_project):
        """Sets the is_billing_project of this AIForgedDALModelsTransactionsAuditViewModel.


        :param is_billing_project: The is_billing_project of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: bool
        """

        self._is_billing_project = is_billing_project

    @property
    def service_name(self):
        """Gets the service_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The service_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this AIForgedDALModelsTransactionsAuditViewModel.


        :param service_name: The service_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def bundle_name(self):
        """Gets the bundle_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The bundle_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._bundle_name

    @bundle_name.setter
    def bundle_name(self, bundle_name):
        """Sets the bundle_name of this AIForgedDALModelsTransactionsAuditViewModel.


        :param bundle_name: The bundle_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._bundle_name = bundle_name

    @property
    def user_name(self):
        """Gets the user_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The user_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AIForgedDALModelsTransactionsAuditViewModel.


        :param user_name: The user_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def audit_user_name(self):
        """Gets the audit_user_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501


        :return: The audit_user_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._audit_user_name

    @audit_user_name.setter
    def audit_user_name(self, audit_user_name):
        """Sets the audit_user_name of this AIForgedDALModelsTransactionsAuditViewModel.


        :param audit_user_name: The audit_user_name of this AIForgedDALModelsTransactionsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._audit_user_name = audit_user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedDALModelsTransactionsAuditViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedDALModelsTransactionsAuditViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
