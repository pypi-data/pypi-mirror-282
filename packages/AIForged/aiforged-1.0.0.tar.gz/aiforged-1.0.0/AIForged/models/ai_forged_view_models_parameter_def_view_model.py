# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsParameterDefViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'project_id': 'int',
        'service_type_id': 'int',
        'service_id': 'int',
        'class_id': 'int',
        'parent_id': 'int',
        'name': 'str',
        'label': 'str',
        'tags': 'str',
        'description': 'str',
        'dtc': 'datetime',
        'dtm': 'datetime',
        'status': 'AIForgedDALParameterDefinitionStatus',
        'category': 'OneOfAIForgedViewModelsParameterDefViewModelCategory',
        'grouping': 'OneOfAIForgedViewModelsParameterDefViewModelGrouping',
        'value_type': 'AIForgedDALValueType',
        'value_type_name': 'str',
        'default_value': 'str',
        'required': 'AIForgedDALRequiredOption',
        'index': 'int',
        'info': 'str',
        'reference': 'str',
        'rating': 'float',
        'availability': 'OneOfAIForgedViewModelsParameterDefViewModelAvailability',
        'children': 'list[AIForgedViewModelsParameterDefViewModel]',
        'settings': 'list[AIForgedDALModelsParameterDefSettingViewModel]',
        'total_charge': 'float',
        'user_count': 'int',
        'parameter_count': 'int',
        'document_count': 'int',
        'validation': 'str'
    }

    attribute_map = {
        'id': 'id',
        'project_id': 'projectId',
        'service_type_id': 'serviceTypeId',
        'service_id': 'serviceId',
        'class_id': 'classId',
        'parent_id': 'parentId',
        'name': 'name',
        'label': 'label',
        'tags': 'tags',
        'description': 'description',
        'dtc': 'dtc',
        'dtm': 'dtm',
        'status': 'status',
        'category': 'category',
        'grouping': 'grouping',
        'value_type': 'valueType',
        'value_type_name': 'valueTypeName',
        'default_value': 'defaultValue',
        'required': 'required',
        'index': 'index',
        'info': 'info',
        'reference': 'reference',
        'rating': 'rating',
        'availability': 'availability',
        'children': 'children',
        'settings': 'settings',
        'total_charge': 'totalCharge',
        'user_count': 'userCount',
        'parameter_count': 'parameterCount',
        'document_count': 'documentCount',
        'validation': 'validation'
    }

    def __init__(self, id=None, project_id=None, service_type_id=None, service_id=None, class_id=None, parent_id=None, name=None, label=None, tags=None, description=None, dtc=None, dtm=None, status=None, category=None, grouping=None, value_type=None, value_type_name=None, default_value=None, required=None, index=None, info=None, reference=None, rating=None, availability=None, children=None, settings=None, total_charge=None, user_count=None, parameter_count=None, document_count=None, validation=None):  # noqa: E501
        """AIForgedViewModelsParameterDefViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._project_id = None
        self._service_type_id = None
        self._service_id = None
        self._class_id = None
        self._parent_id = None
        self._name = None
        self._label = None
        self._tags = None
        self._description = None
        self._dtc = None
        self._dtm = None
        self._status = None
        self._category = None
        self._grouping = None
        self._value_type = None
        self._value_type_name = None
        self._default_value = None
        self._required = None
        self._index = None
        self._info = None
        self._reference = None
        self._rating = None
        self._availability = None
        self._children = None
        self._settings = None
        self._total_charge = None
        self._user_count = None
        self._parameter_count = None
        self._document_count = None
        self._validation = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if project_id is not None:
            self.project_id = project_id
        if service_type_id is not None:
            self.service_type_id = service_type_id
        if service_id is not None:
            self.service_id = service_id
        if class_id is not None:
            self.class_id = class_id
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
        if label is not None:
            self.label = label
        if tags is not None:
            self.tags = tags
        if description is not None:
            self.description = description
        if dtc is not None:
            self.dtc = dtc
        if dtm is not None:
            self.dtm = dtm
        if status is not None:
            self.status = status
        if category is not None:
            self.category = category
        if grouping is not None:
            self.grouping = grouping
        if value_type is not None:
            self.value_type = value_type
        if value_type_name is not None:
            self.value_type_name = value_type_name
        if default_value is not None:
            self.default_value = default_value
        if required is not None:
            self.required = required
        if index is not None:
            self.index = index
        if info is not None:
            self.info = info
        if reference is not None:
            self.reference = reference
        if rating is not None:
            self.rating = rating
        if availability is not None:
            self.availability = availability
        if children is not None:
            self.children = children
        if settings is not None:
            self.settings = settings
        if total_charge is not None:
            self.total_charge = total_charge
        if user_count is not None:
            self.user_count = user_count
        if parameter_count is not None:
            self.parameter_count = parameter_count
        if document_count is not None:
            self.document_count = document_count
        if validation is not None:
            self.validation = validation

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsParameterDefViewModel.


        :param id: The id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The project_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AIForgedViewModelsParameterDefViewModel.


        :param project_id: The project_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def service_type_id(self):
        """Gets the service_type_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The service_type_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: int
        """
        return self._service_type_id

    @service_type_id.setter
    def service_type_id(self, service_type_id):
        """Sets the service_type_id of this AIForgedViewModelsParameterDefViewModel.


        :param service_type_id: The service_type_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: int
        """

        self._service_type_id = service_type_id

    @property
    def service_id(self):
        """Gets the service_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The service_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AIForgedViewModelsParameterDefViewModel.


        :param service_id: The service_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def class_id(self):
        """Gets the class_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The class_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: int
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this AIForgedViewModelsParameterDefViewModel.


        :param class_id: The class_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: int
        """

        self._class_id = class_id

    @property
    def parent_id(self):
        """Gets the parent_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The parent_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this AIForgedViewModelsParameterDefViewModel.


        :param parent_id: The parent_id of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def name(self):
        """Gets the name of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The name of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AIForgedViewModelsParameterDefViewModel.


        :param name: The name of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def label(self):
        """Gets the label of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The label of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AIForgedViewModelsParameterDefViewModel.


        :param label: The label of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def tags(self):
        """Gets the tags of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The tags of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AIForgedViewModelsParameterDefViewModel.


        :param tags: The tags of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def description(self):
        """Gets the description of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The description of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AIForgedViewModelsParameterDefViewModel.


        :param description: The description of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The dtc of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedViewModelsParameterDefViewModel.


        :param dtc: The dtc of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def dtm(self):
        """Gets the dtm of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The dtm of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtm

    @dtm.setter
    def dtm(self, dtm):
        """Sets the dtm of this AIForgedViewModelsParameterDefViewModel.


        :param dtm: The dtm of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtm = dtm

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The status of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: AIForgedDALParameterDefinitionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsParameterDefViewModel.


        :param status: The status of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: AIForgedDALParameterDefinitionStatus
        """

        self._status = status

    @property
    def category(self):
        """Gets the category of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The category of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsParameterDefViewModelCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AIForgedViewModelsParameterDefViewModel.


        :param category: The category of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsParameterDefViewModelCategory
        """

        self._category = category

    @property
    def grouping(self):
        """Gets the grouping of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The grouping of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsParameterDefViewModelGrouping
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """Sets the grouping of this AIForgedViewModelsParameterDefViewModel.


        :param grouping: The grouping of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsParameterDefViewModelGrouping
        """

        self._grouping = grouping

    @property
    def value_type(self):
        """Gets the value_type of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The value_type of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: AIForgedDALValueType
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this AIForgedViewModelsParameterDefViewModel.


        :param value_type: The value_type of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: AIForgedDALValueType
        """

        self._value_type = value_type

    @property
    def value_type_name(self):
        """Gets the value_type_name of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The value_type_name of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: str
        """
        return self._value_type_name

    @value_type_name.setter
    def value_type_name(self, value_type_name):
        """Sets the value_type_name of this AIForgedViewModelsParameterDefViewModel.


        :param value_type_name: The value_type_name of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: str
        """

        self._value_type_name = value_type_name

    @property
    def default_value(self):
        """Gets the default_value of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The default_value of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this AIForgedViewModelsParameterDefViewModel.


        :param default_value: The default_value of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def required(self):
        """Gets the required of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The required of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: AIForgedDALRequiredOption
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this AIForgedViewModelsParameterDefViewModel.


        :param required: The required of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: AIForgedDALRequiredOption
        """

        self._required = required

    @property
    def index(self):
        """Gets the index of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The index of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this AIForgedViewModelsParameterDefViewModel.


        :param index: The index of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def info(self):
        """Gets the info of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The info of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AIForgedViewModelsParameterDefViewModel.


        :param info: The info of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def reference(self):
        """Gets the reference of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The reference of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this AIForgedViewModelsParameterDefViewModel.


        :param reference: The reference of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def rating(self):
        """Gets the rating of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The rating of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this AIForgedViewModelsParameterDefViewModel.


        :param rating: The rating of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: float
        """

        self._rating = rating

    @property
    def availability(self):
        """Gets the availability of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The availability of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsParameterDefViewModelAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AIForgedViewModelsParameterDefViewModel.


        :param availability: The availability of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsParameterDefViewModelAvailability
        """

        self._availability = availability

    @property
    def children(self):
        """Gets the children of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The children of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: list[AIForgedViewModelsParameterDefViewModel]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this AIForgedViewModelsParameterDefViewModel.


        :param children: The children of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: list[AIForgedViewModelsParameterDefViewModel]
        """

        self._children = children

    @property
    def settings(self):
        """Gets the settings of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The settings of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: list[AIForgedDALModelsParameterDefSettingViewModel]
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this AIForgedViewModelsParameterDefViewModel.


        :param settings: The settings of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: list[AIForgedDALModelsParameterDefSettingViewModel]
        """

        self._settings = settings

    @property
    def total_charge(self):
        """Gets the total_charge of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The total_charge of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: float
        """
        return self._total_charge

    @total_charge.setter
    def total_charge(self, total_charge):
        """Sets the total_charge of this AIForgedViewModelsParameterDefViewModel.


        :param total_charge: The total_charge of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: float
        """

        self._total_charge = total_charge

    @property
    def user_count(self):
        """Gets the user_count of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The user_count of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this AIForgedViewModelsParameterDefViewModel.


        :param user_count: The user_count of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: int
        """

        self._user_count = user_count

    @property
    def parameter_count(self):
        """Gets the parameter_count of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The parameter_count of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: int
        """
        return self._parameter_count

    @parameter_count.setter
    def parameter_count(self, parameter_count):
        """Sets the parameter_count of this AIForgedViewModelsParameterDefViewModel.


        :param parameter_count: The parameter_count of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: int
        """

        self._parameter_count = parameter_count

    @property
    def document_count(self):
        """Gets the document_count of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The document_count of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: int
        """
        return self._document_count

    @document_count.setter
    def document_count(self, document_count):
        """Sets the document_count of this AIForgedViewModelsParameterDefViewModel.


        :param document_count: The document_count of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: int
        """

        self._document_count = document_count

    @property
    def validation(self):
        """Gets the validation of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501


        :return: The validation of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :rtype: str
        """
        return self._validation

    @validation.setter
    def validation(self, validation):
        """Sets the validation of this AIForgedViewModelsParameterDefViewModel.


        :param validation: The validation of this AIForgedViewModelsParameterDefViewModel.  # noqa: E501
        :type: str
        """

        self._validation = validation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsParameterDefViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsParameterDefViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
