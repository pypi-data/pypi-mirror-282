# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsAuditViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'str',
        'entity': 'AIForgedDALAuditEntity',
        'access': 'AIForgedDALAuditAccessType',
        'key_id': 'int',
        'key_value': 'str',
        'dt': 'datetime',
        'from_status': 'int',
        'to_status': 'int',
        'field': 'str',
        'value': 'str',
        'address': 'str',
        'data': 'str',
        'comment': 'str',
        'project': 'OneOfAIForgedViewModelsAuditViewModelProject',
        'service': 'OneOfAIForgedViewModelsAuditViewModelService',
        'document': 'OneOfAIForgedViewModelsAuditViewModelDocument',
        '_def': 'OneOfAIForgedViewModelsAuditViewModelDef',
        'parameter': 'OneOfAIForgedViewModelsAuditViewModelParameter',
        'verification': 'OneOfAIForgedViewModelsAuditViewModelVerification',
        'work_item': 'OneOfAIForgedViewModelsAuditViewModelWorkItem',
        'transaction': 'OneOfAIForgedViewModelsAuditViewModelTransaction',
        'event': 'OneOfAIForgedViewModelsAuditViewModelEvent',
        'group': 'OneOfAIForgedViewModelsAuditViewModelGroup',
        'user_name': 'str',
        'user_full_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'entity': 'entity',
        'access': 'access',
        'key_id': 'keyId',
        'key_value': 'keyValue',
        'dt': 'dt',
        'from_status': 'fromStatus',
        'to_status': 'toStatus',
        'field': 'field',
        'value': 'value',
        'address': 'address',
        'data': 'data',
        'comment': 'comment',
        'project': 'project',
        'service': 'service',
        'document': 'document',
        '_def': 'def',
        'parameter': 'parameter',
        'verification': 'verification',
        'work_item': 'workItem',
        'transaction': 'transaction',
        'event': 'event',
        'group': 'group',
        'user_name': 'userName',
        'user_full_name': 'userFullName'
    }

    def __init__(self, id=None, user_id=None, entity=None, access=None, key_id=None, key_value=None, dt=None, from_status=None, to_status=None, field=None, value=None, address=None, data=None, comment=None, project=None, service=None, document=None, _def=None, parameter=None, verification=None, work_item=None, transaction=None, event=None, group=None, user_name=None, user_full_name=None):  # noqa: E501
        """AIForgedViewModelsAuditViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._entity = None
        self._access = None
        self._key_id = None
        self._key_value = None
        self._dt = None
        self._from_status = None
        self._to_status = None
        self._field = None
        self._value = None
        self._address = None
        self._data = None
        self._comment = None
        self._project = None
        self._service = None
        self._document = None
        self.__def = None
        self._parameter = None
        self._verification = None
        self._work_item = None
        self._transaction = None
        self._event = None
        self._group = None
        self._user_name = None
        self._user_full_name = None
        self.discriminator = None
        self.id = id
        if user_id is not None:
            self.user_id = user_id
        if entity is not None:
            self.entity = entity
        if access is not None:
            self.access = access
        if key_id is not None:
            self.key_id = key_id
        if key_value is not None:
            self.key_value = key_value
        if dt is not None:
            self.dt = dt
        if from_status is not None:
            self.from_status = from_status
        if to_status is not None:
            self.to_status = to_status
        if field is not None:
            self.field = field
        if value is not None:
            self.value = value
        if address is not None:
            self.address = address
        if data is not None:
            self.data = data
        if comment is not None:
            self.comment = comment
        if project is not None:
            self.project = project
        if service is not None:
            self.service = service
        if document is not None:
            self.document = document
        if _def is not None:
            self._def = _def
        if parameter is not None:
            self.parameter = parameter
        if verification is not None:
            self.verification = verification
        if work_item is not None:
            self.work_item = work_item
        if transaction is not None:
            self.transaction = transaction
        if event is not None:
            self.event = event
        if group is not None:
            self.group = group
        if user_name is not None:
            self.user_name = user_name
        if user_full_name is not None:
            self.user_full_name = user_full_name

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsAuditViewModel.


        :param id: The id of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The user_id of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedViewModelsAuditViewModel.


        :param user_id: The user_id of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def entity(self):
        """Gets the entity of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The entity of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: AIForgedDALAuditEntity
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this AIForgedViewModelsAuditViewModel.


        :param entity: The entity of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: AIForgedDALAuditEntity
        """

        self._entity = entity

    @property
    def access(self):
        """Gets the access of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The access of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: AIForgedDALAuditAccessType
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this AIForgedViewModelsAuditViewModel.


        :param access: The access of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: AIForgedDALAuditAccessType
        """

        self._access = access

    @property
    def key_id(self):
        """Gets the key_id of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The key_id of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: int
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this AIForgedViewModelsAuditViewModel.


        :param key_id: The key_id of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: int
        """

        self._key_id = key_id

    @property
    def key_value(self):
        """Gets the key_value of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The key_value of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._key_value

    @key_value.setter
    def key_value(self, key_value):
        """Sets the key_value of this AIForgedViewModelsAuditViewModel.


        :param key_value: The key_value of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._key_value = key_value

    @property
    def dt(self):
        """Gets the dt of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The dt of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this AIForgedViewModelsAuditViewModel.


        :param dt: The dt of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def from_status(self):
        """Gets the from_status of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The from_status of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: int
        """
        return self._from_status

    @from_status.setter
    def from_status(self, from_status):
        """Sets the from_status of this AIForgedViewModelsAuditViewModel.


        :param from_status: The from_status of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: int
        """

        self._from_status = from_status

    @property
    def to_status(self):
        """Gets the to_status of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The to_status of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: int
        """
        return self._to_status

    @to_status.setter
    def to_status(self, to_status):
        """Sets the to_status of this AIForgedViewModelsAuditViewModel.


        :param to_status: The to_status of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: int
        """

        self._to_status = to_status

    @property
    def field(self):
        """Gets the field of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The field of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this AIForgedViewModelsAuditViewModel.


        :param field: The field of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def value(self):
        """Gets the value of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The value of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AIForgedViewModelsAuditViewModel.


        :param value: The value of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def address(self):
        """Gets the address of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The address of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AIForgedViewModelsAuditViewModel.


        :param address: The address of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def data(self):
        """Gets the data of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The data of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AIForgedViewModelsAuditViewModel.


        :param data: The data of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def comment(self):
        """Gets the comment of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The comment of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AIForgedViewModelsAuditViewModel.


        :param comment: The comment of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def project(self):
        """Gets the project of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The project of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsAuditViewModelProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AIForgedViewModelsAuditViewModel.


        :param project: The project of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsAuditViewModelProject
        """

        self._project = project

    @property
    def service(self):
        """Gets the service of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The service of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsAuditViewModelService
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this AIForgedViewModelsAuditViewModel.


        :param service: The service of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsAuditViewModelService
        """

        self._service = service

    @property
    def document(self):
        """Gets the document of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The document of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsAuditViewModelDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this AIForgedViewModelsAuditViewModel.


        :param document: The document of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsAuditViewModelDocument
        """

        self._document = document

    @property
    def _def(self):
        """Gets the _def of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The _def of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsAuditViewModelDef
        """
        return self.__def

    @_def.setter
    def _def(self, _def):
        """Sets the _def of this AIForgedViewModelsAuditViewModel.


        :param _def: The _def of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsAuditViewModelDef
        """

        self.__def = _def

    @property
    def parameter(self):
        """Gets the parameter of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The parameter of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsAuditViewModelParameter
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this AIForgedViewModelsAuditViewModel.


        :param parameter: The parameter of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsAuditViewModelParameter
        """

        self._parameter = parameter

    @property
    def verification(self):
        """Gets the verification of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The verification of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsAuditViewModelVerification
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this AIForgedViewModelsAuditViewModel.


        :param verification: The verification of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsAuditViewModelVerification
        """

        self._verification = verification

    @property
    def work_item(self):
        """Gets the work_item of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The work_item of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsAuditViewModelWorkItem
        """
        return self._work_item

    @work_item.setter
    def work_item(self, work_item):
        """Sets the work_item of this AIForgedViewModelsAuditViewModel.


        :param work_item: The work_item of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsAuditViewModelWorkItem
        """

        self._work_item = work_item

    @property
    def transaction(self):
        """Gets the transaction of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The transaction of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsAuditViewModelTransaction
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this AIForgedViewModelsAuditViewModel.


        :param transaction: The transaction of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsAuditViewModelTransaction
        """

        self._transaction = transaction

    @property
    def event(self):
        """Gets the event of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The event of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsAuditViewModelEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this AIForgedViewModelsAuditViewModel.


        :param event: The event of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsAuditViewModelEvent
        """

        self._event = event

    @property
    def group(self):
        """Gets the group of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The group of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsAuditViewModelGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this AIForgedViewModelsAuditViewModel.


        :param group: The group of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsAuditViewModelGroup
        """

        self._group = group

    @property
    def user_name(self):
        """Gets the user_name of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The user_name of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AIForgedViewModelsAuditViewModel.


        :param user_name: The user_name of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_full_name(self):
        """Gets the user_full_name of this AIForgedViewModelsAuditViewModel.  # noqa: E501


        :return: The user_full_name of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_full_name

    @user_full_name.setter
    def user_full_name(self, user_full_name):
        """Sets the user_full_name of this AIForgedViewModelsAuditViewModel.


        :param user_full_name: The user_full_name of this AIForgedViewModelsAuditViewModel.  # noqa: E501
        :type: str
        """

        self._user_full_name = user_full_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsAuditViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsAuditViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
