# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LogApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def log_add(self, body, **kwargs):  # noqa: E501
        """Add a log record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_add(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsLogViewModel body: Log info (required)
        :param str x_api_version:
        :return: AIForgedViewModelsLogViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.log_add_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.log_add_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def log_add_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a log record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_add_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsLogViewModel body: Log info (required)
        :param str x_api_version:
        :return: AIForgedViewModelsLogViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method log_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `log_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Log/Add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsLogViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def log_create(self, **kwargs):  # noqa: E501
        """Create a log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedDALLogType logtype:
        :param int project_id: Project id
        :param int service_id: Service id
        :param int document_id: Document id
        :param str comment: Comment
        :param str error_message: Error
        :param str stack_trace: Error
        :param int def_id: Definition / rule id
        :param int parameter_id: Parameter id
        :param int ver_id: Verification id
        :param int workitem_id: Workitem id
        :param int event_id: event id
        :param int tx_id: Transaction id
        :param str page: Page
        :param str x_api_version:
        :return: AIForgedViewModelsLogViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.log_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.log_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def log_create_with_http_info(self, **kwargs):  # noqa: E501
        """Create a log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedDALLogType logtype:
        :param int project_id: Project id
        :param int service_id: Service id
        :param int document_id: Document id
        :param str comment: Comment
        :param str error_message: Error
        :param str stack_trace: Error
        :param int def_id: Definition / rule id
        :param int parameter_id: Parameter id
        :param int ver_id: Verification id
        :param int workitem_id: Workitem id
        :param int event_id: event id
        :param int tx_id: Transaction id
        :param str page: Page
        :param str x_api_version:
        :return: AIForgedViewModelsLogViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['logtype', 'project_id', 'service_id', 'document_id', 'comment', 'error_message', 'stack_trace', 'def_id', 'parameter_id', 'ver_id', 'workitem_id', 'event_id', 'tx_id', 'page', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method log_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'logtype' in params:
            query_params.append(('logtype', params['logtype']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'service_id' in params:
            query_params.append(('serviceId', params['service_id']))  # noqa: E501
        if 'document_id' in params:
            query_params.append(('documentId', params['document_id']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501
        if 'error_message' in params:
            query_params.append(('errorMessage', params['error_message']))  # noqa: E501
        if 'stack_trace' in params:
            query_params.append(('stackTrace', params['stack_trace']))  # noqa: E501
        if 'def_id' in params:
            query_params.append(('defId', params['def_id']))  # noqa: E501
        if 'parameter_id' in params:
            query_params.append(('parameterId', params['parameter_id']))  # noqa: E501
        if 'ver_id' in params:
            query_params.append(('verId', params['ver_id']))  # noqa: E501
        if 'workitem_id' in params:
            query_params.append(('workitemId', params['workitem_id']))  # noqa: E501
        if 'event_id' in params:
            query_params.append(('eventId', params['event_id']))  # noqa: E501
        if 'tx_id' in params:
            query_params.append(('txId', params['tx_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Log/Create', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsLogViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def log_get(self, **kwargs):  # noqa: E501
        """Get Log info by Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Log record id
        :param str x_api_version:
        :return: AIForgedViewModelsLogViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.log_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.log_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def log_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Log info by Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Log record id
        :param str x_api_version:
        :return: AIForgedViewModelsLogViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method log_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsLogViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def log_get_all(self, **kwargs):  # noqa: E501
        """Get logs by search criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_get_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project id
        :param int service_id: Service id
        :param int document_id: Document id
        :param int def_id: Definition / rule id
        :param int parameter_id: Parameter id
        :param int ver_id: Verification id
        :param int workitem_id: Workitem id
        :param str user_id: User id
        :param datetime from_date:
        :param datetime to_date:
        :param str x_api_version:
        :return: list[AIForgedViewModelsLogViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.log_get_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.log_get_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def log_get_all_with_http_info(self, **kwargs):  # noqa: E501
        """Get logs by search criteria  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.log_get_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: Project id
        :param int service_id: Service id
        :param int document_id: Document id
        :param int def_id: Definition / rule id
        :param int parameter_id: Parameter id
        :param int ver_id: Verification id
        :param int workitem_id: Workitem id
        :param str user_id: User id
        :param datetime from_date:
        :param datetime to_date:
        :param str x_api_version:
        :return: list[AIForgedViewModelsLogViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'service_id', 'document_id', 'def_id', 'parameter_id', 'ver_id', 'workitem_id', 'user_id', 'from_date', 'to_date', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method log_get_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'service_id' in params:
            query_params.append(('serviceId', params['service_id']))  # noqa: E501
        if 'document_id' in params:
            query_params.append(('documentId', params['document_id']))  # noqa: E501
        if 'def_id' in params:
            query_params.append(('defId', params['def_id']))  # noqa: E501
        if 'parameter_id' in params:
            query_params.append(('parameterId', params['parameter_id']))  # noqa: E501
        if 'ver_id' in params:
            query_params.append(('verId', params['ver_id']))  # noqa: E501
        if 'workitem_id' in params:
            query_params.append(('workitemId', params['workitem_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Log/GetAll', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsLogViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
