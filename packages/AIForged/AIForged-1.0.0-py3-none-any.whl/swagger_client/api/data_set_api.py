# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DataSetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def data_set_create(self, **kwargs):  # noqa: E501
        """Create a new empty custom dataset  # noqa: E501

        This operation creates a new empty custom dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project ID
        :param int stpd_id: The service ID
        :param str data_set_name: The name of the new dataset
        :param str x_api_version:
        :return: AIForgedViewModelsCustomDataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_set_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_set_create_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new empty custom dataset  # noqa: E501

        This operation creates a new empty custom dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project ID
        :param int stpd_id: The service ID
        :param str data_set_name: The name of the new dataset
        :param str x_api_version:
        :return: AIForgedViewModelsCustomDataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'stpd_id', 'data_set_name', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'data_set_name' in params:
            query_params.append(('dataSetName', params['data_set_name']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/Create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsCustomDataSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_create_record(self, body, **kwargs):  # noqa: E501
        """Create a custom dataset record  # noqa: E501

        This operation creates custom dataset record or row in an existing custom dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_create_record(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsCustomDataSetRecord body: The record object to add to the custom dataset (required)
        :param str x_api_version:
        :param int doc_id: The document id
        :param int def_id: The custom dataset definition ID
        :return: AIForgedViewModelsCustomDataSetRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_create_record_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_create_record_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def data_set_create_record_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a custom dataset record  # noqa: E501

        This operation creates custom dataset record or row in an existing custom dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_create_record_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsCustomDataSetRecord body: The record object to add to the custom dataset (required)
        :param str x_api_version:
        :param int doc_id: The document id
        :param int def_id: The custom dataset definition ID
        :return: AIForgedViewModelsCustomDataSetRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'doc_id', 'def_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_create_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `data_set_create_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'def_id' in params:
            query_params.append(('defId', params['def_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/CreateRecord', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsCustomDataSetRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_delete(self, **kwargs):  # noqa: E501
        """Delete a custom dataset  # noqa: E501

        This operation deletes custom dataset data and optionally field definitions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int docid: The document ID
        :param int def_id: The definition ID of the custom dataset
        :param bool definition: Should the dataset fields also be deleted
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_set_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_set_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Delete a custom dataset  # noqa: E501

        This operation deletes custom dataset data and optionally field definitions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int docid: The document ID
        :param int def_id: The definition ID of the custom dataset
        :param bool definition: Should the dataset fields also be deleted
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['docid', 'def_id', 'definition', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'docid' in params:
            query_params.append(('docid', params['docid']))  # noqa: E501
        if 'def_id' in params:
            query_params.append(('defId', params['def_id']))  # noqa: E501
        if 'definition' in params:
            query_params.append(('definition', params['definition']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/Delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_delete_record(self, **kwargs):  # noqa: E501
        """Delete a custom dataset record by key ID  # noqa: E501

        This operation deletes a custom dataset record by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_delete_record(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document id
        :param int def_id: The parameter definition ID
        :param int key_id: The record ID to delete
        :param str x_api_version:
        :return: list[AIForgedViewModelsCustomDataSetRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_delete_record_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_set_delete_record_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_set_delete_record_with_http_info(self, **kwargs):  # noqa: E501
        """Delete a custom dataset record by key ID  # noqa: E501

        This operation deletes a custom dataset record by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_delete_record_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document id
        :param int def_id: The parameter definition ID
        :param int key_id: The record ID to delete
        :param str x_api_version:
        :return: list[AIForgedViewModelsCustomDataSetRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_id', 'def_id', 'key_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_delete_record" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'def_id' in params:
            query_params.append(('defId', params['def_id']))  # noqa: E501
        if 'key_id' in params:
            query_params.append(('keyId', params['key_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/DeleteRecord', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsCustomDataSetRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_delete_record_by_key_value(self, **kwargs):  # noqa: E501
        """Delete a custom dataset record by key value  # noqa: E501

        This operation deletes a custom dataset record by key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_delete_record_by_key_value(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document id
        :param int def_id: The definition ID
        :param str key_value: The key value
        :param str x_api_version:
        :return: list[AIForgedViewModelsCustomDataSetRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_delete_record_by_key_value_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_set_delete_record_by_key_value_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_set_delete_record_by_key_value_with_http_info(self, **kwargs):  # noqa: E501
        """Delete a custom dataset record by key value  # noqa: E501

        This operation deletes a custom dataset record by key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_delete_record_by_key_value_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document id
        :param int def_id: The definition ID
        :param str key_value: The key value
        :param str x_api_version:
        :return: list[AIForgedViewModelsCustomDataSetRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_id', 'def_id', 'key_value', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_delete_record_by_key_value" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'def_id' in params:
            query_params.append(('defId', params['def_id']))  # noqa: E501
        if 'key_value' in params:
            query_params.append(('keyValue', params['key_value']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/DeleteByKeyValue', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsCustomDataSetRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_delete_records(self, body, **kwargs):  # noqa: E501
        """Delete multiple custom dataset records by key IDs  # noqa: E501

        This operation deletes multiple custom dataset records by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_delete_records(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: The record ID to delete (required)
        :param str x_api_version:
        :param int doc_id: The document ID
        :param int def_id: The dataset definition ID
        :return: list[AIForgedViewModelsCustomDataSetRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_delete_records_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_delete_records_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def data_set_delete_records_with_http_info(self, body, **kwargs):  # noqa: E501
        """Delete multiple custom dataset records by key IDs  # noqa: E501

        This operation deletes multiple custom dataset records by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_delete_records_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: The record ID to delete (required)
        :param str x_api_version:
        :param int doc_id: The document ID
        :param int def_id: The dataset definition ID
        :return: list[AIForgedViewModelsCustomDataSetRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'doc_id', 'def_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_delete_records" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `data_set_delete_records`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'def_id' in params:
            query_params.append(('defId', params['def_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/DeleteRecords', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsCustomDataSetRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_get(self, **kwargs):  # noqa: E501
        """Get custom dataset and data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document ID
        :param int def_id: The parameter definition ID of the dataset
        :param bool include_data: Should dataset data also be returned
        :param int page_no: The page number of the dataset data. Optional
        :param int page_size: The page size of the data. Optional
        :param int sort_field_def_id: The definition ID of the field being sorted
        :param SortDirection sort_direction: Ascending or descending order
        :param str search_field: The field of the dataset to be searched. Optional
        :param str search_filter: The filter to be applied on the search field
        :param str x_api_version:
        :return: AIForgedViewModelsCustomDataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_set_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_set_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get custom dataset and data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document ID
        :param int def_id: The parameter definition ID of the dataset
        :param bool include_data: Should dataset data also be returned
        :param int page_no: The page number of the dataset data. Optional
        :param int page_size: The page size of the data. Optional
        :param int sort_field_def_id: The definition ID of the field being sorted
        :param SortDirection sort_direction: Ascending or descending order
        :param str search_field: The field of the dataset to be searched. Optional
        :param str search_filter: The filter to be applied on the search field
        :param str x_api_version:
        :return: AIForgedViewModelsCustomDataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_id', 'def_id', 'include_data', 'page_no', 'page_size', 'sort_field_def_id', 'sort_direction', 'search_field', 'search_filter', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'def_id' in params:
            query_params.append(('defId', params['def_id']))  # noqa: E501
        if 'include_data' in params:
            query_params.append(('includeData', params['include_data']))  # noqa: E501
        if 'page_no' in params:
            query_params.append(('pageNo', params['page_no']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'sort_field_def_id' in params:
            query_params.append(('sortFieldDefId', params['sort_field_def_id']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501
        if 'search_field' in params:
            query_params.append(('searchField', params['search_field']))  # noqa: E501
        if 'search_filter' in params:
            query_params.append(('searchFilter', params['search_filter']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/Get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsCustomDataSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_get_all(self, **kwargs):  # noqa: E501
        """Get all datasets for a service  # noqa: E501

        This operation gets all custom datasets created in a service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_get_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project id
        :param int stpd_id: Service id
        :param str x_api_version:
        :return: list[AIForgedViewModelsCustomDataSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_get_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_set_get_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_set_get_all_with_http_info(self, **kwargs):  # noqa: E501
        """Get all datasets for a service  # noqa: E501

        This operation gets all custom datasets created in a service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_get_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project id
        :param int stpd_id: Service id
        :param str x_api_version:
        :return: list[AIForgedViewModelsCustomDataSet]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'stpd_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_get_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/GetAll', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsCustomDataSet]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_get_by_def(self, **kwargs):  # noqa: E501
        """Get custom dataset by definition  # noqa: E501

        This operation gets a custom dataset by definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_get_by_def(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project ID
        :param int stpd_id: Service ID
        :param int pd_id: Parameter definition ID
        :param bool include_data: Should dataset data be included
        :param int page_no: Page number. Optional
        :param int page_size: Page size. Optional
        :param int sort_field_def_id: Sort field definition ID. Optional
        :param SortDirection2 sort_direction: Sort direction. Optional
        :param str search_field: Search field. Optional
        :param str search_filter: Search filter. Optional
        :param str x_api_version:
        :return: AIForgedViewModelsCustomDataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_get_by_def_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_set_get_by_def_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_set_get_by_def_with_http_info(self, **kwargs):  # noqa: E501
        """Get custom dataset by definition  # noqa: E501

        This operation gets a custom dataset by definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_get_by_def_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project ID
        :param int stpd_id: Service ID
        :param int pd_id: Parameter definition ID
        :param bool include_data: Should dataset data be included
        :param int page_no: Page number. Optional
        :param int page_size: Page size. Optional
        :param int sort_field_def_id: Sort field definition ID. Optional
        :param SortDirection2 sort_direction: Sort direction. Optional
        :param str search_field: Search field. Optional
        :param str search_filter: Search filter. Optional
        :param str x_api_version:
        :return: AIForgedViewModelsCustomDataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'stpd_id', 'pd_id', 'include_data', 'page_no', 'page_size', 'sort_field_def_id', 'sort_direction', 'search_field', 'search_filter', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_get_by_def" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'pd_id' in params:
            query_params.append(('pdId', params['pd_id']))  # noqa: E501
        if 'include_data' in params:
            query_params.append(('includeData', params['include_data']))  # noqa: E501
        if 'page_no' in params:
            query_params.append(('pageNo', params['page_no']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'sort_field_def_id' in params:
            query_params.append(('sortFieldDefId', params['sort_field_def_id']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501
        if 'search_field' in params:
            query_params.append(('searchField', params['search_field']))  # noqa: E501
        if 'search_filter' in params:
            query_params.append(('searchFilter', params['search_filter']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/GetByDef', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsCustomDataSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_get_by_id(self, **kwargs):  # noqa: E501
        """Get custom dataset by ID  # noqa: E501

        This operation gets a custom dataset by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_get_by_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int data_set_id: The dataset ID
        :param bool include_data: Should dataset date be included
        :param int page_no: Dataset data page number. Optional
        :param int page_size: Dataset data page size. Optional
        :param int sort_field_def_id: The field definition of the dataset the sort direction will be applied. Optional
        :param SortDirection3 sort_direction: Ascending or descending. Optional
        :param str search_field: The dataset field that should be searched. Optional
        :param str search_filter: The search filter on the specified field. Optional
        :param str x_api_version:
        :return: AIForgedViewModelsCustomDataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_get_by_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_set_get_by_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_set_get_by_id_with_http_info(self, **kwargs):  # noqa: E501
        """Get custom dataset by ID  # noqa: E501

        This operation gets a custom dataset by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_get_by_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int data_set_id: The dataset ID
        :param bool include_data: Should dataset date be included
        :param int page_no: Dataset data page number. Optional
        :param int page_size: Dataset data page size. Optional
        :param int sort_field_def_id: The field definition of the dataset the sort direction will be applied. Optional
        :param SortDirection3 sort_direction: Ascending or descending. Optional
        :param str search_field: The dataset field that should be searched. Optional
        :param str search_filter: The search filter on the specified field. Optional
        :param str x_api_version:
        :return: AIForgedViewModelsCustomDataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_set_id', 'include_data', 'page_no', 'page_size', 'sort_field_def_id', 'sort_direction', 'search_field', 'search_filter', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'data_set_id' in params:
            query_params.append(('dataSetId', params['data_set_id']))  # noqa: E501
        if 'include_data' in params:
            query_params.append(('includeData', params['include_data']))  # noqa: E501
        if 'page_no' in params:
            query_params.append(('pageNo', params['page_no']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'sort_field_def_id' in params:
            query_params.append(('sortFieldDefId', params['sort_field_def_id']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501
        if 'search_field' in params:
            query_params.append(('searchField', params['search_field']))  # noqa: E501
        if 'search_filter' in params:
            query_params.append(('searchFilter', params['search_filter']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/GetById', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsCustomDataSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_get_by_name(self, **kwargs):  # noqa: E501
        """Get dataset by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_get_by_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project ID
        :param int stpd_id: The service ID
        :param str data_set_name: The dataset name
        :param bool include_data: Should dataset data also be returned
        :param int page_no: The page number of the dataset entries. Optional
        :param int page_size: The page size of the data. Optional
        :param int sort_field_def_id: The definition ID of the field being sorted
        :param SortDirection1 sort_direction: Ascending or descending order
        :param str search_field: The field of the dataset to be searched. Optional
        :param str search_filter: The filter to be applied on the search field
        :param str x_api_version:
        :return: AIForgedViewModelsCustomDataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_get_by_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_set_get_by_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_set_get_by_name_with_http_info(self, **kwargs):  # noqa: E501
        """Get dataset by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_get_by_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project ID
        :param int stpd_id: The service ID
        :param str data_set_name: The dataset name
        :param bool include_data: Should dataset data also be returned
        :param int page_no: The page number of the dataset entries. Optional
        :param int page_size: The page size of the data. Optional
        :param int sort_field_def_id: The definition ID of the field being sorted
        :param SortDirection1 sort_direction: Ascending or descending order
        :param str search_field: The field of the dataset to be searched. Optional
        :param str search_filter: The filter to be applied on the search field
        :param str x_api_version:
        :return: AIForgedViewModelsCustomDataSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'stpd_id', 'data_set_name', 'include_data', 'page_no', 'page_size', 'sort_field_def_id', 'sort_direction', 'search_field', 'search_filter', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_get_by_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'data_set_name' in params:
            query_params.append(('dataSetName', params['data_set_name']))  # noqa: E501
        if 'include_data' in params:
            query_params.append(('includeData', params['include_data']))  # noqa: E501
        if 'page_no' in params:
            query_params.append(('pageNo', params['page_no']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'sort_field_def_id' in params:
            query_params.append(('sortFieldDefId', params['sort_field_def_id']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501
        if 'search_field' in params:
            query_params.append(('searchField', params['search_field']))  # noqa: E501
        if 'search_filter' in params:
            query_params.append(('searchFilter', params['search_filter']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/GetByName', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsCustomDataSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_get_record(self, **kwargs):  # noqa: E501
        """Get a custom dataset record  # noqa: E501

        This operation gets a custom dataset record by definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_get_record(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document ID
        :param int def_id: The dataset definition ID
        :param int key_id: The record ID
        :param bool include_verifications: Should verifications also be returned
        :param str x_api_version:
        :return: AIForgedViewModelsCustomDataSetRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_get_record_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_set_get_record_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_set_get_record_with_http_info(self, **kwargs):  # noqa: E501
        """Get a custom dataset record  # noqa: E501

        This operation gets a custom dataset record by definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_get_record_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document ID
        :param int def_id: The dataset definition ID
        :param int key_id: The record ID
        :param bool include_verifications: Should verifications also be returned
        :param str x_api_version:
        :return: AIForgedViewModelsCustomDataSetRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_id', 'def_id', 'key_id', 'include_verifications', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_get_record" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'def_id' in params:
            query_params.append(('defId', params['def_id']))  # noqa: E501
        if 'key_id' in params:
            query_params.append(('keyId', params['key_id']))  # noqa: E501
        if 'include_verifications' in params:
            query_params.append(('includeVerifications', params['include_verifications']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/GetRecord', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsCustomDataSetRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_get_record_by_key_value(self, **kwargs):  # noqa: E501
        """Find a custom dataset by key  # noqa: E501

        This operation gets a custom dataset record by key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_get_record_by_key_value(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document ID
        :param int def_id: The definition ID
        :param str key_value: The key value
        :param bool include_verifications: Should verification value be included
        :param str x_api_version:
        :return: AIForgedViewModelsCustomDataSetRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_get_record_by_key_value_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_set_get_record_by_key_value_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_set_get_record_by_key_value_with_http_info(self, **kwargs):  # noqa: E501
        """Find a custom dataset by key  # noqa: E501

        This operation gets a custom dataset record by key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_get_record_by_key_value_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document ID
        :param int def_id: The definition ID
        :param str key_value: The key value
        :param bool include_verifications: Should verification value be included
        :param str x_api_version:
        :return: AIForgedViewModelsCustomDataSetRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_id', 'def_id', 'key_value', 'include_verifications', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_get_record_by_key_value" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'def_id' in params:
            query_params.append(('defId', params['def_id']))  # noqa: E501
        if 'key_value' in params:
            query_params.append(('keyValue', params['key_value']))  # noqa: E501
        if 'include_verifications' in params:
            query_params.append(('includeVerifications', params['include_verifications']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/GetRecordByKeyValue', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsCustomDataSetRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_save(self, body, **kwargs):  # noqa: E501
        """Save a custom dataset  # noqa: E501

        This operation saves a custom dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_save(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsCustomDataSet body: The dataset to save (required)
        :param str x_api_version:
        :param bool merge_data: Should dataset data be merged
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_save_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_save_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def data_set_save_with_http_info(self, body, **kwargs):  # noqa: E501
        """Save a custom dataset  # noqa: E501

        This operation saves a custom dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_save_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsCustomDataSet body: The dataset to save (required)
        :param str x_api_version:
        :param bool merge_data: Should dataset data be merged
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'merge_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_save" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `data_set_save`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'merge_data' in params:
            query_params.append(('mergeData', params['merge_data']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/Save', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_sync(self, **kwargs):  # noqa: E501
        """Sync custom dataset with service or categories  # noqa: E501

        This operation syncs a custom dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_sync(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project ID
        :param int stpd_id: The service ID
        :param int pd_id: The dataset definition ID
        :param bool override_comment: Should comments be overridden. Optional
        :param bool override_reference: Should references be overridden. Optional
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_sync_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_set_sync_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_set_sync_with_http_info(self, **kwargs):  # noqa: E501
        """Sync custom dataset with service or categories  # noqa: E501

        This operation syncs a custom dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_sync_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project ID
        :param int stpd_id: The service ID
        :param int pd_id: The dataset definition ID
        :param bool override_comment: Should comments be overridden. Optional
        :param bool override_reference: Should references be overridden. Optional
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'stpd_id', 'pd_id', 'override_comment', 'override_reference', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_sync" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'pd_id' in params:
            query_params.append(('pdId', params['pd_id']))  # noqa: E501
        if 'override_comment' in params:
            query_params.append(('overrideComment', params['override_comment']))  # noqa: E501
        if 'override_reference' in params:
            query_params.append(('overrideReference', params['override_reference']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/Sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_set_update_record(self, body, **kwargs):  # noqa: E501
        """Update a custom dataset record  # noqa: E501

        This operation updates a custom dataset record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_update_record(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsCustomDataSetRecord body: The data used to update the record (required)
        :param str x_api_version:
        :param int doc_id: The document id
        :param int def_id: The definition ID of the dataset
        :return: AIForgedViewModelsCustomDataSetRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_set_update_record_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.data_set_update_record_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def data_set_update_record_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update a custom dataset record  # noqa: E501

        This operation updates a custom dataset record  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_set_update_record_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsCustomDataSetRecord body: The data used to update the record (required)
        :param str x_api_version:
        :param int doc_id: The document id
        :param int def_id: The definition ID of the dataset
        :return: AIForgedViewModelsCustomDataSetRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'doc_id', 'def_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_set_update_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `data_set_update_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'def_id' in params:
            query_params.append(('defId', params['def_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/DataSet/UpdateRecord', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsCustomDataSetRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
