# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedDALViewModelsNotificationSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'event': 'AIForgedDALNotificationEvent',
        'type': 'AIForgedDALNotificationType',
        'enabled': 'bool',
        'contacts': 'dict(str, str)',
        'contact_ids': 'list[int]'
    }

    attribute_map = {
        'name': 'name',
        'event': 'event',
        'type': 'type',
        'enabled': 'enabled',
        'contacts': 'contacts',
        'contact_ids': 'contactIds'
    }

    def __init__(self, name=None, event=None, type=None, enabled=None, contacts=None, contact_ids=None):  # noqa: E501
        """AIForgedDALViewModelsNotificationSetting - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._event = None
        self._type = None
        self._enabled = None
        self._contacts = None
        self._contact_ids = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if event is not None:
            self.event = event
        if type is not None:
            self.type = type
        if enabled is not None:
            self.enabled = enabled
        if contacts is not None:
            self.contacts = contacts
        if contact_ids is not None:
            self.contact_ids = contact_ids

    @property
    def name(self):
        """Gets the name of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501


        :return: The name of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AIForgedDALViewModelsNotificationSetting.


        :param name: The name of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def event(self):
        """Gets the event of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501


        :return: The event of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501
        :rtype: AIForgedDALNotificationEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this AIForgedDALViewModelsNotificationSetting.


        :param event: The event of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501
        :type: AIForgedDALNotificationEvent
        """

        self._event = event

    @property
    def type(self):
        """Gets the type of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501


        :return: The type of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501
        :rtype: AIForgedDALNotificationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedDALViewModelsNotificationSetting.


        :param type: The type of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501
        :type: AIForgedDALNotificationType
        """

        self._type = type

    @property
    def enabled(self):
        """Gets the enabled of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501


        :return: The enabled of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AIForgedDALViewModelsNotificationSetting.


        :param enabled: The enabled of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def contacts(self):
        """Gets the contacts of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501


        :return: The contacts of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this AIForgedDALViewModelsNotificationSetting.


        :param contacts: The contacts of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501
        :type: dict(str, str)
        """

        self._contacts = contacts

    @property
    def contact_ids(self):
        """Gets the contact_ids of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501


        :return: The contact_ids of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501
        :rtype: list[int]
        """
        return self._contact_ids

    @contact_ids.setter
    def contact_ids(self, contact_ids):
        """Sets the contact_ids of this AIForgedDALViewModelsNotificationSetting.


        :param contact_ids: The contact_ids of this AIForgedDALViewModelsNotificationSetting.  # noqa: E501
        :type: list[int]
        """

        self._contact_ids = contact_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedDALViewModelsNotificationSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedDALViewModelsNotificationSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
