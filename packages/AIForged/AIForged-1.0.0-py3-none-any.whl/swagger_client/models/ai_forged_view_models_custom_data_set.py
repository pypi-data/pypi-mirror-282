# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsCustomDataSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'int',
        'service_id': 'int',
        'stpd_id': 'int',
        'doc_id': 'int',
        'key_def_id': 'int',
        'key_def': 'OneOfAIForgedViewModelsCustomDataSetKeyDef',
        'document': 'OneOfAIForgedViewModelsCustomDataSetDocument',
        'definitions': 'list[AIForgedViewModelsParameterDefViewModel]',
        'data': 'list[AIForgedViewModelsCustomDataSetRecord]',
        'status': 'int',
        'info': 'str',
        'include_data': 'bool',
        'page_no': 'int',
        'page_size': 'int',
        'sort_field_def_id': 'int',
        'sort_direction': 'OneOfAIForgedViewModelsCustomDataSetSortDirection',
        'include_verifications': 'bool',
        'search_field': 'str',
        'search_value': 'str'
    }

    attribute_map = {
        'project_id': 'projectId',
        'service_id': 'serviceId',
        'stpd_id': 'stpdId',
        'doc_id': 'docId',
        'key_def_id': 'keyDefId',
        'key_def': 'keyDef',
        'document': 'document',
        'definitions': 'definitions',
        'data': 'data',
        'status': 'status',
        'info': 'info',
        'include_data': 'includeData',
        'page_no': 'pageNo',
        'page_size': 'pageSize',
        'sort_field_def_id': 'sortFieldDefId',
        'sort_direction': 'sortDirection',
        'include_verifications': 'includeVerifications',
        'search_field': 'searchField',
        'search_value': 'searchValue'
    }

    def __init__(self, project_id=None, service_id=None, stpd_id=None, doc_id=None, key_def_id=None, key_def=None, document=None, definitions=None, data=None, status=None, info=None, include_data=None, page_no=None, page_size=None, sort_field_def_id=None, sort_direction=None, include_verifications=None, search_field=None, search_value=None):  # noqa: E501
        """AIForgedViewModelsCustomDataSet - a model defined in Swagger"""  # noqa: E501
        self._project_id = None
        self._service_id = None
        self._stpd_id = None
        self._doc_id = None
        self._key_def_id = None
        self._key_def = None
        self._document = None
        self._definitions = None
        self._data = None
        self._status = None
        self._info = None
        self._include_data = None
        self._page_no = None
        self._page_size = None
        self._sort_field_def_id = None
        self._sort_direction = None
        self._include_verifications = None
        self._search_field = None
        self._search_value = None
        self.discriminator = None
        if project_id is not None:
            self.project_id = project_id
        if service_id is not None:
            self.service_id = service_id
        if stpd_id is not None:
            self.stpd_id = stpd_id
        if doc_id is not None:
            self.doc_id = doc_id
        if key_def_id is not None:
            self.key_def_id = key_def_id
        if key_def is not None:
            self.key_def = key_def
        if document is not None:
            self.document = document
        if definitions is not None:
            self.definitions = definitions
        if data is not None:
            self.data = data
        if status is not None:
            self.status = status
        if info is not None:
            self.info = info
        if include_data is not None:
            self.include_data = include_data
        if page_no is not None:
            self.page_no = page_no
        if page_size is not None:
            self.page_size = page_size
        if sort_field_def_id is not None:
            self.sort_field_def_id = sort_field_def_id
        if sort_direction is not None:
            self.sort_direction = sort_direction
        if include_verifications is not None:
            self.include_verifications = include_verifications
        if search_field is not None:
            self.search_field = search_field
        if search_value is not None:
            self.search_value = search_value

    @property
    def project_id(self):
        """Gets the project_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The project_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AIForgedViewModelsCustomDataSet.


        :param project_id: The project_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def service_id(self):
        """Gets the service_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The service_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AIForgedViewModelsCustomDataSet.


        :param service_id: The service_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def stpd_id(self):
        """Gets the stpd_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The stpd_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: int
        """
        return self._stpd_id

    @stpd_id.setter
    def stpd_id(self, stpd_id):
        """Sets the stpd_id of this AIForgedViewModelsCustomDataSet.


        :param stpd_id: The stpd_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: int
        """

        self._stpd_id = stpd_id

    @property
    def doc_id(self):
        """Gets the doc_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The doc_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: int
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id):
        """Sets the doc_id of this AIForgedViewModelsCustomDataSet.


        :param doc_id: The doc_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: int
        """

        self._doc_id = doc_id

    @property
    def key_def_id(self):
        """Gets the key_def_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The key_def_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: int
        """
        return self._key_def_id

    @key_def_id.setter
    def key_def_id(self, key_def_id):
        """Sets the key_def_id of this AIForgedViewModelsCustomDataSet.


        :param key_def_id: The key_def_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: int
        """

        self._key_def_id = key_def_id

    @property
    def key_def(self):
        """Gets the key_def of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The key_def of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsCustomDataSetKeyDef
        """
        return self._key_def

    @key_def.setter
    def key_def(self, key_def):
        """Sets the key_def of this AIForgedViewModelsCustomDataSet.


        :param key_def: The key_def of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: OneOfAIForgedViewModelsCustomDataSetKeyDef
        """

        self._key_def = key_def

    @property
    def document(self):
        """Gets the document of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The document of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsCustomDataSetDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this AIForgedViewModelsCustomDataSet.


        :param document: The document of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: OneOfAIForgedViewModelsCustomDataSetDocument
        """

        self._document = document

    @property
    def definitions(self):
        """Gets the definitions of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The definitions of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: list[AIForgedViewModelsParameterDefViewModel]
        """
        return self._definitions

    @definitions.setter
    def definitions(self, definitions):
        """Sets the definitions of this AIForgedViewModelsCustomDataSet.


        :param definitions: The definitions of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: list[AIForgedViewModelsParameterDefViewModel]
        """

        self._definitions = definitions

    @property
    def data(self):
        """Gets the data of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The data of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: list[AIForgedViewModelsCustomDataSetRecord]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AIForgedViewModelsCustomDataSet.


        :param data: The data of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: list[AIForgedViewModelsCustomDataSetRecord]
        """

        self._data = data

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The status of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsCustomDataSet.


        :param status: The status of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def info(self):
        """Gets the info of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The info of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AIForgedViewModelsCustomDataSet.


        :param info: The info of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def include_data(self):
        """Gets the include_data of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The include_data of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: bool
        """
        return self._include_data

    @include_data.setter
    def include_data(self, include_data):
        """Sets the include_data of this AIForgedViewModelsCustomDataSet.


        :param include_data: The include_data of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: bool
        """

        self._include_data = include_data

    @property
    def page_no(self):
        """Gets the page_no of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The page_no of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: int
        """
        return self._page_no

    @page_no.setter
    def page_no(self, page_no):
        """Sets the page_no of this AIForgedViewModelsCustomDataSet.


        :param page_no: The page_no of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: int
        """

        self._page_no = page_no

    @property
    def page_size(self):
        """Gets the page_size of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The page_size of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this AIForgedViewModelsCustomDataSet.


        :param page_size: The page_size of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def sort_field_def_id(self):
        """Gets the sort_field_def_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The sort_field_def_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: int
        """
        return self._sort_field_def_id

    @sort_field_def_id.setter
    def sort_field_def_id(self, sort_field_def_id):
        """Sets the sort_field_def_id of this AIForgedViewModelsCustomDataSet.


        :param sort_field_def_id: The sort_field_def_id of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: int
        """

        self._sort_field_def_id = sort_field_def_id

    @property
    def sort_direction(self):
        """Gets the sort_direction of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The sort_direction of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsCustomDataSetSortDirection
        """
        return self._sort_direction

    @sort_direction.setter
    def sort_direction(self, sort_direction):
        """Sets the sort_direction of this AIForgedViewModelsCustomDataSet.


        :param sort_direction: The sort_direction of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: OneOfAIForgedViewModelsCustomDataSetSortDirection
        """

        self._sort_direction = sort_direction

    @property
    def include_verifications(self):
        """Gets the include_verifications of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The include_verifications of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: bool
        """
        return self._include_verifications

    @include_verifications.setter
    def include_verifications(self, include_verifications):
        """Sets the include_verifications of this AIForgedViewModelsCustomDataSet.


        :param include_verifications: The include_verifications of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: bool
        """

        self._include_verifications = include_verifications

    @property
    def search_field(self):
        """Gets the search_field of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The search_field of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: str
        """
        return self._search_field

    @search_field.setter
    def search_field(self, search_field):
        """Sets the search_field of this AIForgedViewModelsCustomDataSet.


        :param search_field: The search_field of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: str
        """

        self._search_field = search_field

    @property
    def search_value(self):
        """Gets the search_value of this AIForgedViewModelsCustomDataSet.  # noqa: E501


        :return: The search_value of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :rtype: str
        """
        return self._search_value

    @search_value.setter
    def search_value(self, search_value):
        """Sets the search_value of this AIForgedViewModelsCustomDataSet.


        :param search_value: The search_value of this AIForgedViewModelsCustomDataSet.  # noqa: E501
        :type: str
        """

        self._search_value = search_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsCustomDataSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsCustomDataSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
