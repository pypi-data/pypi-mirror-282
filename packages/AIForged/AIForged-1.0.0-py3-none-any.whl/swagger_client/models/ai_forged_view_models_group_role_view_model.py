# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsGroupRoleViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'group_id': 'int',
        'project_id': 'int',
        'type': 'AIForgedDALGroupRoleType',
        'status': 'AIForgedDALGroupRoleStatus',
        'name': 'str',
        'dtc': 'datetime',
        'dtm': 'datetime',
        'start': 'datetime',
        'end': 'datetime',
        'group': 'OneOfAIForgedViewModelsGroupRoleViewModelGroup',
        'project': 'OneOfAIForgedViewModelsGroupRoleViewModelProject',
        'users': 'list[AIForgedDALModelsGroupRoleUserViewModel]',
        'related': 'list[AIForgedViewModelsGroupRoleViewModel]'
    }

    attribute_map = {
        'id': 'id',
        'group_id': 'groupId',
        'project_id': 'projectId',
        'type': 'type',
        'status': 'status',
        'name': 'name',
        'dtc': 'dtc',
        'dtm': 'dtm',
        'start': 'start',
        'end': 'end',
        'group': 'group',
        'project': 'project',
        'users': 'users',
        'related': 'related'
    }

    def __init__(self, id=None, group_id=None, project_id=None, type=None, status=None, name=None, dtc=None, dtm=None, start=None, end=None, group=None, project=None, users=None, related=None):  # noqa: E501
        """AIForgedViewModelsGroupRoleViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._group_id = None
        self._project_id = None
        self._type = None
        self._status = None
        self._name = None
        self._dtc = None
        self._dtm = None
        self._start = None
        self._end = None
        self._group = None
        self._project = None
        self._users = None
        self._related = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if group_id is not None:
            self.group_id = group_id
        if project_id is not None:
            self.project_id = project_id
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if name is not None:
            self.name = name
        if dtc is not None:
            self.dtc = dtc
        if dtm is not None:
            self.dtm = dtm
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if group is not None:
            self.group = group
        if project is not None:
            self.project = project
        if users is not None:
            self.users = users
        if related is not None:
            self.related = related

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsGroupRoleViewModel.


        :param id: The id of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def group_id(self):
        """Gets the group_id of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501


        :return: The group_id of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AIForgedViewModelsGroupRoleViewModel.


        :param group_id: The group_id of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def project_id(self):
        """Gets the project_id of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501


        :return: The project_id of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AIForgedViewModelsGroupRoleViewModel.


        :param project_id: The project_id of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def type(self):
        """Gets the type of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501


        :return: The type of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :rtype: AIForgedDALGroupRoleType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedViewModelsGroupRoleViewModel.


        :param type: The type of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :type: AIForgedDALGroupRoleType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501


        :return: The status of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :rtype: AIForgedDALGroupRoleStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsGroupRoleViewModel.


        :param status: The status of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :type: AIForgedDALGroupRoleStatus
        """

        self._status = status

    @property
    def name(self):
        """Gets the name of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501


        :return: The name of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AIForgedViewModelsGroupRoleViewModel.


        :param name: The name of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501


        :return: The dtc of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedViewModelsGroupRoleViewModel.


        :param dtc: The dtc of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def dtm(self):
        """Gets the dtm of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501


        :return: The dtm of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtm

    @dtm.setter
    def dtm(self, dtm):
        """Sets the dtm of this AIForgedViewModelsGroupRoleViewModel.


        :param dtm: The dtm of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtm = dtm

    @property
    def start(self):
        """Gets the start of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501


        :return: The start of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this AIForgedViewModelsGroupRoleViewModel.


        :param start: The start of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501


        :return: The end of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this AIForgedViewModelsGroupRoleViewModel.


        :param end: The end of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def group(self):
        """Gets the group of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501


        :return: The group of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsGroupRoleViewModelGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this AIForgedViewModelsGroupRoleViewModel.


        :param group: The group of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsGroupRoleViewModelGroup
        """

        self._group = group

    @property
    def project(self):
        """Gets the project of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501


        :return: The project of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsGroupRoleViewModelProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AIForgedViewModelsGroupRoleViewModel.


        :param project: The project of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsGroupRoleViewModelProject
        """

        self._project = project

    @property
    def users(self):
        """Gets the users of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501


        :return: The users of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :rtype: list[AIForgedDALModelsGroupRoleUserViewModel]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this AIForgedViewModelsGroupRoleViewModel.


        :param users: The users of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :type: list[AIForgedDALModelsGroupRoleUserViewModel]
        """

        self._users = users

    @property
    def related(self):
        """Gets the related of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501


        :return: The related of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :rtype: list[AIForgedViewModelsGroupRoleViewModel]
        """
        return self._related

    @related.setter
    def related(self, related):
        """Sets the related of this AIForgedViewModelsGroupRoleViewModel.


        :param related: The related of this AIForgedViewModelsGroupRoleViewModel.  # noqa: E501
        :type: list[AIForgedViewModelsGroupRoleViewModel]
        """

        self._related = related

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsGroupRoleViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsGroupRoleViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
