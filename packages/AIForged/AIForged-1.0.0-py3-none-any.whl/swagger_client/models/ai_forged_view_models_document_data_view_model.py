# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsDocumentDataViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'document_id': 'int',
        'blob_id': 'int',
        'type': 'OneOfAIForgedViewModelsDocumentDataViewModelType',
        'data': 'str',
        'preview': 'str',
        'text': 'str',
        'info': 'str',
        'content_type': 'str',
        'result_id': 'str',
        'index': 'int',
        'width': 'float',
        'height': 'float',
        'resolution': 'float',
        'availability': 'OneOfAIForgedViewModelsDocumentDataViewModelAvailability'
    }

    attribute_map = {
        'id': 'id',
        'document_id': 'documentId',
        'blob_id': 'blobId',
        'type': 'type',
        'data': 'data',
        'preview': 'preview',
        'text': 'text',
        'info': 'info',
        'content_type': 'contentType',
        'result_id': 'resultId',
        'index': 'index',
        'width': 'width',
        'height': 'height',
        'resolution': 'resolution',
        'availability': 'availability'
    }

    def __init__(self, id=None, document_id=None, blob_id=None, type=None, data=None, preview=None, text=None, info=None, content_type=None, result_id=None, index=None, width=None, height=None, resolution=None, availability=None):  # noqa: E501
        """AIForgedViewModelsDocumentDataViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._document_id = None
        self._blob_id = None
        self._type = None
        self._data = None
        self._preview = None
        self._text = None
        self._info = None
        self._content_type = None
        self._result_id = None
        self._index = None
        self._width = None
        self._height = None
        self._resolution = None
        self._availability = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if document_id is not None:
            self.document_id = document_id
        if blob_id is not None:
            self.blob_id = blob_id
        if type is not None:
            self.type = type
        if data is not None:
            self.data = data
        if preview is not None:
            self.preview = preview
        if text is not None:
            self.text = text
        if info is not None:
            self.info = info
        if content_type is not None:
            self.content_type = content_type
        if result_id is not None:
            self.result_id = result_id
        if index is not None:
            self.index = index
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if resolution is not None:
            self.resolution = resolution
        if availability is not None:
            self.availability = availability

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsDocumentDataViewModel.


        :param id: The id of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def document_id(self):
        """Gets the document_id of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The document_id of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AIForgedViewModelsDocumentDataViewModel.


        :param document_id: The document_id of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def blob_id(self):
        """Gets the blob_id of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The blob_id of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: int
        """
        return self._blob_id

    @blob_id.setter
    def blob_id(self, blob_id):
        """Sets the blob_id of this AIForgedViewModelsDocumentDataViewModel.


        :param blob_id: The blob_id of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: int
        """

        self._blob_id = blob_id

    @property
    def type(self):
        """Gets the type of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The type of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsDocumentDataViewModelType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedViewModelsDocumentDataViewModel.


        :param type: The type of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsDocumentDataViewModelType
        """

        self._type = type

    @property
    def data(self):
        """Gets the data of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The data of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AIForgedViewModelsDocumentDataViewModel.


        :param data: The data of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def preview(self):
        """Gets the preview of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The preview of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this AIForgedViewModelsDocumentDataViewModel.


        :param preview: The preview of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: str
        """

        self._preview = preview

    @property
    def text(self):
        """Gets the text of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The text of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this AIForgedViewModelsDocumentDataViewModel.


        :param text: The text of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def info(self):
        """Gets the info of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The info of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AIForgedViewModelsDocumentDataViewModel.


        :param info: The info of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def content_type(self):
        """Gets the content_type of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The content_type of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AIForgedViewModelsDocumentDataViewModel.


        :param content_type: The content_type of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def result_id(self):
        """Gets the result_id of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The result_id of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._result_id

    @result_id.setter
    def result_id(self, result_id):
        """Sets the result_id of this AIForgedViewModelsDocumentDataViewModel.


        :param result_id: The result_id of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: str
        """

        self._result_id = result_id

    @property
    def index(self):
        """Gets the index of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The index of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this AIForgedViewModelsDocumentDataViewModel.


        :param index: The index of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def width(self):
        """Gets the width of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The width of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this AIForgedViewModelsDocumentDataViewModel.


        :param width: The width of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The height of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this AIForgedViewModelsDocumentDataViewModel.


        :param height: The height of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def resolution(self):
        """Gets the resolution of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The resolution of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: float
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this AIForgedViewModelsDocumentDataViewModel.


        :param resolution: The resolution of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: float
        """

        self._resolution = resolution

    @property
    def availability(self):
        """Gets the availability of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501


        :return: The availability of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsDocumentDataViewModelAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AIForgedViewModelsDocumentDataViewModel.


        :param availability: The availability of this AIForgedViewModelsDocumentDataViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsDocumentDataViewModelAvailability
        """

        self._availability = availability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsDocumentDataViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsDocumentDataViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
