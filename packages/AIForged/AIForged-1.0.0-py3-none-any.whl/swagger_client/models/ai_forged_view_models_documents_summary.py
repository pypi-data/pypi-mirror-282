# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsDocumentsSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'int',
        'service_type': 'int',
        'service_id': 'int',
        'usage': 'AIForgedDALUsageType',
        'status': 'AIForgedDALDocumentStatus',
        'name': 'str',
        'class_id': 'int',
        'class_name': 'str',
        'service_name': 'str',
        'file_type': 'str',
        'dt': 'datetime',
        'count': 'int',
        'labelled_count': 'int'
    }

    attribute_map = {
        'project_id': 'projectId',
        'service_type': 'serviceType',
        'service_id': 'serviceId',
        'usage': 'usage',
        'status': 'status',
        'name': 'name',
        'class_id': 'classId',
        'class_name': 'className',
        'service_name': 'serviceName',
        'file_type': 'fileType',
        'dt': 'dt',
        'count': 'count',
        'labelled_count': 'labelledCount'
    }

    def __init__(self, project_id=None, service_type=None, service_id=None, usage=None, status=None, name=None, class_id=None, class_name=None, service_name=None, file_type=None, dt=None, count=None, labelled_count=None):  # noqa: E501
        """AIForgedViewModelsDocumentsSummary - a model defined in Swagger"""  # noqa: E501
        self._project_id = None
        self._service_type = None
        self._service_id = None
        self._usage = None
        self._status = None
        self._name = None
        self._class_id = None
        self._class_name = None
        self._service_name = None
        self._file_type = None
        self._dt = None
        self._count = None
        self._labelled_count = None
        self.discriminator = None
        if project_id is not None:
            self.project_id = project_id
        if service_type is not None:
            self.service_type = service_type
        if service_id is not None:
            self.service_id = service_id
        if usage is not None:
            self.usage = usage
        if status is not None:
            self.status = status
        if name is not None:
            self.name = name
        if class_id is not None:
            self.class_id = class_id
        if class_name is not None:
            self.class_name = class_name
        if service_name is not None:
            self.service_name = service_name
        if file_type is not None:
            self.file_type = file_type
        if dt is not None:
            self.dt = dt
        if count is not None:
            self.count = count
        if labelled_count is not None:
            self.labelled_count = labelled_count

    @property
    def project_id(self):
        """Gets the project_id of this AIForgedViewModelsDocumentsSummary.  # noqa: E501


        :return: The project_id of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AIForgedViewModelsDocumentsSummary.


        :param project_id: The project_id of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def service_type(self):
        """Gets the service_type of this AIForgedViewModelsDocumentsSummary.  # noqa: E501


        :return: The service_type of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :rtype: int
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this AIForgedViewModelsDocumentsSummary.


        :param service_type: The service_type of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :type: int
        """

        self._service_type = service_type

    @property
    def service_id(self):
        """Gets the service_id of this AIForgedViewModelsDocumentsSummary.  # noqa: E501


        :return: The service_id of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AIForgedViewModelsDocumentsSummary.


        :param service_id: The service_id of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def usage(self):
        """Gets the usage of this AIForgedViewModelsDocumentsSummary.  # noqa: E501


        :return: The usage of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :rtype: AIForgedDALUsageType
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this AIForgedViewModelsDocumentsSummary.


        :param usage: The usage of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :type: AIForgedDALUsageType
        """

        self._usage = usage

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsDocumentsSummary.  # noqa: E501


        :return: The status of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :rtype: AIForgedDALDocumentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsDocumentsSummary.


        :param status: The status of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :type: AIForgedDALDocumentStatus
        """

        self._status = status

    @property
    def name(self):
        """Gets the name of this AIForgedViewModelsDocumentsSummary.  # noqa: E501


        :return: The name of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AIForgedViewModelsDocumentsSummary.


        :param name: The name of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def class_id(self):
        """Gets the class_id of this AIForgedViewModelsDocumentsSummary.  # noqa: E501


        :return: The class_id of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :rtype: int
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this AIForgedViewModelsDocumentsSummary.


        :param class_id: The class_id of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :type: int
        """

        self._class_id = class_id

    @property
    def class_name(self):
        """Gets the class_name of this AIForgedViewModelsDocumentsSummary.  # noqa: E501


        :return: The class_name of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this AIForgedViewModelsDocumentsSummary.


        :param class_name: The class_name of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :type: str
        """

        self._class_name = class_name

    @property
    def service_name(self):
        """Gets the service_name of this AIForgedViewModelsDocumentsSummary.  # noqa: E501


        :return: The service_name of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this AIForgedViewModelsDocumentsSummary.


        :param service_name: The service_name of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def file_type(self):
        """Gets the file_type of this AIForgedViewModelsDocumentsSummary.  # noqa: E501


        :return: The file_type of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this AIForgedViewModelsDocumentsSummary.


        :param file_type: The file_type of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :type: str
        """

        self._file_type = file_type

    @property
    def dt(self):
        """Gets the dt of this AIForgedViewModelsDocumentsSummary.  # noqa: E501


        :return: The dt of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this AIForgedViewModelsDocumentsSummary.


        :param dt: The dt of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def count(self):
        """Gets the count of this AIForgedViewModelsDocumentsSummary.  # noqa: E501


        :return: The count of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AIForgedViewModelsDocumentsSummary.


        :param count: The count of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def labelled_count(self):
        """Gets the labelled_count of this AIForgedViewModelsDocumentsSummary.  # noqa: E501


        :return: The labelled_count of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :rtype: int
        """
        return self._labelled_count

    @labelled_count.setter
    def labelled_count(self, labelled_count):
        """Sets the labelled_count of this AIForgedViewModelsDocumentsSummary.


        :param labelled_count: The labelled_count of this AIForgedViewModelsDocumentsSummary.  # noqa: E501
        :type: int
        """

        self._labelled_count = labelled_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsDocumentsSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsDocumentsSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
