# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsAccountBalanceItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'seq': 'int',
        'service_id': 'int',
        'service_type_id': 'int',
        'project_id': 'int',
        'group_id': 'int',
        'bundle_id': 'int',
        'is_transfer': 'bool',
        'user_id': 'str',
        'dt': 'datetime',
        'info': 'str',
        'dr_count': 'float',
        'cr_count': 'float',
        'dr_qty': 'float',
        'cr_qty': 'float',
        'cr_qry': 'float',
        'dr': 'float',
        'cr': 'float',
        'balance': 'float',
        'project': 'str',
        'service': 'str',
        'service_type': 'str',
        'bundle': 'str',
        'name': 'str',
        'user_name': 'str',
        'tx_ids': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'seq': 'seq',
        'service_id': 'serviceId',
        'service_type_id': 'serviceTypeId',
        'project_id': 'projectId',
        'group_id': 'groupId',
        'bundle_id': 'bundleId',
        'is_transfer': 'isTransfer',
        'user_id': 'userId',
        'dt': 'dt',
        'info': 'info',
        'dr_count': 'drCount',
        'cr_count': 'crCount',
        'dr_qty': 'drQty',
        'cr_qty': 'crQty',
        'cr_qry': 'crQry',
        'dr': 'dr',
        'cr': 'cr',
        'balance': 'balance',
        'project': 'project',
        'service': 'service',
        'service_type': 'serviceType',
        'bundle': 'bundle',
        'name': 'name',
        'user_name': 'userName',
        'tx_ids': 'txIds'
    }

    def __init__(self, id=None, seq=None, service_id=None, service_type_id=None, project_id=None, group_id=None, bundle_id=None, is_transfer=None, user_id=None, dt=None, info=None, dr_count=None, cr_count=None, dr_qty=None, cr_qty=None, cr_qry=None, dr=None, cr=None, balance=None, project=None, service=None, service_type=None, bundle=None, name=None, user_name=None, tx_ids=None):  # noqa: E501
        """AIForgedViewModelsAccountBalanceItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._seq = None
        self._service_id = None
        self._service_type_id = None
        self._project_id = None
        self._group_id = None
        self._bundle_id = None
        self._is_transfer = None
        self._user_id = None
        self._dt = None
        self._info = None
        self._dr_count = None
        self._cr_count = None
        self._dr_qty = None
        self._cr_qty = None
        self._cr_qry = None
        self._dr = None
        self._cr = None
        self._balance = None
        self._project = None
        self._service = None
        self._service_type = None
        self._bundle = None
        self._name = None
        self._user_name = None
        self._tx_ids = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if seq is not None:
            self.seq = seq
        if service_id is not None:
            self.service_id = service_id
        if service_type_id is not None:
            self.service_type_id = service_type_id
        if project_id is not None:
            self.project_id = project_id
        if group_id is not None:
            self.group_id = group_id
        if bundle_id is not None:
            self.bundle_id = bundle_id
        if is_transfer is not None:
            self.is_transfer = is_transfer
        if user_id is not None:
            self.user_id = user_id
        if dt is not None:
            self.dt = dt
        if info is not None:
            self.info = info
        if dr_count is not None:
            self.dr_count = dr_count
        if cr_count is not None:
            self.cr_count = cr_count
        if dr_qty is not None:
            self.dr_qty = dr_qty
        if cr_qty is not None:
            self.cr_qty = cr_qty
        if cr_qry is not None:
            self.cr_qry = cr_qry
        if dr is not None:
            self.dr = dr
        if cr is not None:
            self.cr = cr
        if balance is not None:
            self.balance = balance
        if project is not None:
            self.project = project
        if service is not None:
            self.service = service
        if service_type is not None:
            self.service_type = service_type
        if bundle is not None:
            self.bundle = bundle
        if name is not None:
            self.name = name
        if user_name is not None:
            self.user_name = user_name
        if tx_ids is not None:
            self.tx_ids = tx_ids

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsAccountBalanceItem.


        :param id: The id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def seq(self):
        """Gets the seq of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The seq of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: int
        """
        return self._seq

    @seq.setter
    def seq(self, seq):
        """Sets the seq of this AIForgedViewModelsAccountBalanceItem.


        :param seq: The seq of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: int
        """

        self._seq = seq

    @property
    def service_id(self):
        """Gets the service_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The service_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AIForgedViewModelsAccountBalanceItem.


        :param service_id: The service_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def service_type_id(self):
        """Gets the service_type_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The service_type_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: int
        """
        return self._service_type_id

    @service_type_id.setter
    def service_type_id(self, service_type_id):
        """Sets the service_type_id of this AIForgedViewModelsAccountBalanceItem.


        :param service_type_id: The service_type_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: int
        """

        self._service_type_id = service_type_id

    @property
    def project_id(self):
        """Gets the project_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The project_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AIForgedViewModelsAccountBalanceItem.


        :param project_id: The project_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def group_id(self):
        """Gets the group_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The group_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AIForgedViewModelsAccountBalanceItem.


        :param group_id: The group_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def bundle_id(self):
        """Gets the bundle_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The bundle_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: int
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this AIForgedViewModelsAccountBalanceItem.


        :param bundle_id: The bundle_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: int
        """

        self._bundle_id = bundle_id

    @property
    def is_transfer(self):
        """Gets the is_transfer of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The is_transfer of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_transfer

    @is_transfer.setter
    def is_transfer(self, is_transfer):
        """Sets the is_transfer of this AIForgedViewModelsAccountBalanceItem.


        :param is_transfer: The is_transfer of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: bool
        """

        self._is_transfer = is_transfer

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The user_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedViewModelsAccountBalanceItem.


        :param user_id: The user_id of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def dt(self):
        """Gets the dt of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The dt of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this AIForgedViewModelsAccountBalanceItem.


        :param dt: The dt of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def info(self):
        """Gets the info of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The info of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AIForgedViewModelsAccountBalanceItem.


        :param info: The info of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def dr_count(self):
        """Gets the dr_count of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The dr_count of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: float
        """
        return self._dr_count

    @dr_count.setter
    def dr_count(self, dr_count):
        """Sets the dr_count of this AIForgedViewModelsAccountBalanceItem.


        :param dr_count: The dr_count of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: float
        """

        self._dr_count = dr_count

    @property
    def cr_count(self):
        """Gets the cr_count of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The cr_count of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: float
        """
        return self._cr_count

    @cr_count.setter
    def cr_count(self, cr_count):
        """Sets the cr_count of this AIForgedViewModelsAccountBalanceItem.


        :param cr_count: The cr_count of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: float
        """

        self._cr_count = cr_count

    @property
    def dr_qty(self):
        """Gets the dr_qty of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The dr_qty of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: float
        """
        return self._dr_qty

    @dr_qty.setter
    def dr_qty(self, dr_qty):
        """Sets the dr_qty of this AIForgedViewModelsAccountBalanceItem.


        :param dr_qty: The dr_qty of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: float
        """

        self._dr_qty = dr_qty

    @property
    def cr_qty(self):
        """Gets the cr_qty of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The cr_qty of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: float
        """
        return self._cr_qty

    @cr_qty.setter
    def cr_qty(self, cr_qty):
        """Sets the cr_qty of this AIForgedViewModelsAccountBalanceItem.


        :param cr_qty: The cr_qty of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: float
        """

        self._cr_qty = cr_qty

    @property
    def cr_qry(self):
        """Gets the cr_qry of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The cr_qry of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: float
        """
        return self._cr_qry

    @cr_qry.setter
    def cr_qry(self, cr_qry):
        """Sets the cr_qry of this AIForgedViewModelsAccountBalanceItem.


        :param cr_qry: The cr_qry of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: float
        """

        self._cr_qry = cr_qry

    @property
    def dr(self):
        """Gets the dr of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The dr of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: float
        """
        return self._dr

    @dr.setter
    def dr(self, dr):
        """Sets the dr of this AIForgedViewModelsAccountBalanceItem.


        :param dr: The dr of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: float
        """

        self._dr = dr

    @property
    def cr(self):
        """Gets the cr of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The cr of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: float
        """
        return self._cr

    @cr.setter
    def cr(self, cr):
        """Sets the cr of this AIForgedViewModelsAccountBalanceItem.


        :param cr: The cr of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: float
        """

        self._cr = cr

    @property
    def balance(self):
        """Gets the balance of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The balance of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AIForgedViewModelsAccountBalanceItem.


        :param balance: The balance of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def project(self):
        """Gets the project of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The project of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AIForgedViewModelsAccountBalanceItem.


        :param project: The project of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def service(self):
        """Gets the service of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The service of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this AIForgedViewModelsAccountBalanceItem.


        :param service: The service of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def service_type(self):
        """Gets the service_type of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The service_type of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this AIForgedViewModelsAccountBalanceItem.


        :param service_type: The service_type of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: str
        """

        self._service_type = service_type

    @property
    def bundle(self):
        """Gets the bundle of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The bundle of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: str
        """
        return self._bundle

    @bundle.setter
    def bundle(self, bundle):
        """Sets the bundle of this AIForgedViewModelsAccountBalanceItem.


        :param bundle: The bundle of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: str
        """

        self._bundle = bundle

    @property
    def name(self):
        """Gets the name of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The name of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AIForgedViewModelsAccountBalanceItem.


        :param name: The name of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_name(self):
        """Gets the user_name of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The user_name of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AIForgedViewModelsAccountBalanceItem.


        :param user_name: The user_name of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def tx_ids(self):
        """Gets the tx_ids of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501


        :return: The tx_ids of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :rtype: list[int]
        """
        return self._tx_ids

    @tx_ids.setter
    def tx_ids(self, tx_ids):
        """Sets the tx_ids of this AIForgedViewModelsAccountBalanceItem.


        :param tx_ids: The tx_ids of this AIForgedViewModelsAccountBalanceItem.  # noqa: E501
        :type: list[int]
        """

        self._tx_ids = tx_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsAccountBalanceItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsAccountBalanceItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
