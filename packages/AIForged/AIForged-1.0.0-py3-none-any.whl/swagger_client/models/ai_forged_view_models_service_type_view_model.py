# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsServiceTypeViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'group': 'str',
        'dtc': 'datetime',
        'dtm': 'datetime',
        'status': 'AIForgedDALServiceTypeStatus',
        'options': 'AIForgedDALServiceOptions',
        'availability': 'AIForgedDALAvailability',
        'logo': 'str',
        'icon': 'str',
        'info': 'str',
        'help': 'str',
        'sample': 'str',
        'engine': 'str',
        'cost': 'float',
        'charge': 'float',
        'value_type': 'OneOfAIForgedViewModelsServiceTypeViewModelValueType',
        'charges': 'list[AIForgedViewModelsServiceTypeChargeViewModel]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'group': 'group',
        'dtc': 'dtc',
        'dtm': 'dtm',
        'status': 'status',
        'options': 'options',
        'availability': 'availability',
        'logo': 'logo',
        'icon': 'icon',
        'info': 'info',
        'help': 'help',
        'sample': 'sample',
        'engine': 'engine',
        'cost': 'cost',
        'charge': 'charge',
        'value_type': 'valueType',
        'charges': 'charges'
    }

    def __init__(self, id=None, name=None, description=None, group=None, dtc=None, dtm=None, status=None, options=None, availability=None, logo=None, icon=None, info=None, help=None, sample=None, engine=None, cost=None, charge=None, value_type=None, charges=None):  # noqa: E501
        """AIForgedViewModelsServiceTypeViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._group = None
        self._dtc = None
        self._dtm = None
        self._status = None
        self._options = None
        self._availability = None
        self._logo = None
        self._icon = None
        self._info = None
        self._help = None
        self._sample = None
        self._engine = None
        self._cost = None
        self._charge = None
        self._value_type = None
        self._charges = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if group is not None:
            self.group = group
        if dtc is not None:
            self.dtc = dtc
        if dtm is not None:
            self.dtm = dtm
        if status is not None:
            self.status = status
        if options is not None:
            self.options = options
        if availability is not None:
            self.availability = availability
        if logo is not None:
            self.logo = logo
        if icon is not None:
            self.icon = icon
        if info is not None:
            self.info = info
        if help is not None:
            self.help = help
        if sample is not None:
            self.sample = sample
        if engine is not None:
            self.engine = engine
        if cost is not None:
            self.cost = cost
        if charge is not None:
            self.charge = charge
        if value_type is not None:
            self.value_type = value_type
        if charges is not None:
            self.charges = charges

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsServiceTypeViewModel.


        :param id: The id of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The name of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AIForgedViewModelsServiceTypeViewModel.


        :param name: The name of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The description of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AIForgedViewModelsServiceTypeViewModel.


        :param description: The description of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def group(self):
        """Gets the group of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The group of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this AIForgedViewModelsServiceTypeViewModel.


        :param group: The group of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The dtc of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedViewModelsServiceTypeViewModel.


        :param dtc: The dtc of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def dtm(self):
        """Gets the dtm of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The dtm of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtm

    @dtm.setter
    def dtm(self, dtm):
        """Sets the dtm of this AIForgedViewModelsServiceTypeViewModel.


        :param dtm: The dtm of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtm = dtm

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The status of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: AIForgedDALServiceTypeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsServiceTypeViewModel.


        :param status: The status of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: AIForgedDALServiceTypeStatus
        """

        self._status = status

    @property
    def options(self):
        """Gets the options of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The options of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: AIForgedDALServiceOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this AIForgedViewModelsServiceTypeViewModel.


        :param options: The options of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: AIForgedDALServiceOptions
        """

        self._options = options

    @property
    def availability(self):
        """Gets the availability of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The availability of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: AIForgedDALAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AIForgedViewModelsServiceTypeViewModel.


        :param availability: The availability of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: AIForgedDALAvailability
        """

        self._availability = availability

    @property
    def logo(self):
        """Gets the logo of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The logo of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this AIForgedViewModelsServiceTypeViewModel.


        :param logo: The logo of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def icon(self):
        """Gets the icon of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The icon of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this AIForgedViewModelsServiceTypeViewModel.


        :param icon: The icon of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def info(self):
        """Gets the info of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The info of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AIForgedViewModelsServiceTypeViewModel.


        :param info: The info of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def help(self):
        """Gets the help of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The help of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._help

    @help.setter
    def help(self, help):
        """Sets the help of this AIForgedViewModelsServiceTypeViewModel.


        :param help: The help of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: str
        """

        self._help = help

    @property
    def sample(self):
        """Gets the sample of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The sample of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this AIForgedViewModelsServiceTypeViewModel.


        :param sample: The sample of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: str
        """

        self._sample = sample

    @property
    def engine(self):
        """Gets the engine of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The engine of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this AIForgedViewModelsServiceTypeViewModel.


        :param engine: The engine of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: str
        """

        self._engine = engine

    @property
    def cost(self):
        """Gets the cost of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The cost of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this AIForgedViewModelsServiceTypeViewModel.


        :param cost: The cost of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def charge(self):
        """Gets the charge of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The charge of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: float
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """Sets the charge of this AIForgedViewModelsServiceTypeViewModel.


        :param charge: The charge of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: float
        """

        self._charge = charge

    @property
    def value_type(self):
        """Gets the value_type of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The value_type of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsServiceTypeViewModelValueType
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this AIForgedViewModelsServiceTypeViewModel.


        :param value_type: The value_type of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsServiceTypeViewModelValueType
        """

        self._value_type = value_type

    @property
    def charges(self):
        """Gets the charges of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501


        :return: The charges of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :rtype: list[AIForgedViewModelsServiceTypeChargeViewModel]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this AIForgedViewModelsServiceTypeViewModel.


        :param charges: The charges of this AIForgedViewModelsServiceTypeViewModel.  # noqa: E501
        :type: list[AIForgedViewModelsServiceTypeChargeViewModel]
        """

        self._charges = charges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsServiceTypeViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsServiceTypeViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
