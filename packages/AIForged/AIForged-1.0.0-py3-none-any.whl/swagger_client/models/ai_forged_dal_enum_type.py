# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedDALEnumType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    _0 = "0"
    _1 = "1"
    _5 = "5"
    _10 = "10"
    _13 = "13"
    _14 = "14"
    _16 = "16"
    _17 = "17"
    _18 = "18"
    _19 = "19"
    _21 = "21"
    _22 = "22"
    _24 = "24"
    _26 = "26"
    _27 = "27"
    _29 = "29"
    _30 = "30"
    _31 = "31"
    _35 = "35"
    _41 = "41"
    _42 = "42"
    _50 = "50"
    _51 = "51"
    _52 = "52"
    _55 = "55"
    _60 = "60"
    _61 = "61"
    _62 = "62"
    _63 = "63"
    _70 = "70"
    _71 = "71"
    _72 = "72"
    _80 = "80"
    _81 = "81"
    _85 = "85"
    _86 = "86"
    _90 = "90"
    _91 = "91"
    _92 = "92"
    _95 = "95"
    _96 = "96"
    _97 = "97"
    _100 = "100"
    _101 = "101"
    _102 = "102"
    _103 = "103"
    _104 = "104"
    _110 = "110"
    _200 = "200"
    _201 = "201"
    _1000 = "1000"
    _1001 = "1001"
    _2000 = "2000"
    _2001 = "2001"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """AIForgedDALEnumType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedDALEnumType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedDALEnumType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
