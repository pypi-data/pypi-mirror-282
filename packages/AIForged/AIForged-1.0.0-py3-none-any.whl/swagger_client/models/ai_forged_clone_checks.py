# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedCloneChecks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_exist': 'bool',
        'do_not_create_pd': 'bool',
        're_process_document_data_only': 'bool',
        're_process_data_set_document': 'bool',
        're_process_inbox_document': 'bool',
        're_process_outbox_document': 'bool',
        're_process_definition_document': 'bool',
        're_process_training_document': 'bool',
        're_process_labelling_document': 'bool',
        'parameter_exists': 'bool',
        'verification_exists': 'bool',
        'transaction_exists': 'bool',
        'audit_exists': 'bool',
        'work_items_exists': 'bool',
        'logs_exists': 'bool',
        'payment_exists': 'bool'
    }

    attribute_map = {
        'project_exist': 'projectExist',
        'do_not_create_pd': 'doNotCreatePD',
        're_process_document_data_only': 'reProcessDocumentDataOnly',
        're_process_data_set_document': 'reProcessDataSetDocument',
        're_process_inbox_document': 'reProcessInboxDocument',
        're_process_outbox_document': 'reProcessOutboxDocument',
        're_process_definition_document': 'reProcessDefinitionDocument',
        're_process_training_document': 'reProcessTrainingDocument',
        're_process_labelling_document': 'reProcessLabellingDocument',
        'parameter_exists': 'parameterExists',
        'verification_exists': 'verificationExists',
        'transaction_exists': 'transactionExists',
        'audit_exists': 'auditExists',
        'work_items_exists': 'workItemsExists',
        'logs_exists': 'logsExists',
        'payment_exists': 'paymentExists'
    }

    def __init__(self, project_exist=None, do_not_create_pd=None, re_process_document_data_only=None, re_process_data_set_document=None, re_process_inbox_document=None, re_process_outbox_document=None, re_process_definition_document=None, re_process_training_document=None, re_process_labelling_document=None, parameter_exists=None, verification_exists=None, transaction_exists=None, audit_exists=None, work_items_exists=None, logs_exists=None, payment_exists=None):  # noqa: E501
        """AIForgedCloneChecks - a model defined in Swagger"""  # noqa: E501
        self._project_exist = None
        self._do_not_create_pd = None
        self._re_process_document_data_only = None
        self._re_process_data_set_document = None
        self._re_process_inbox_document = None
        self._re_process_outbox_document = None
        self._re_process_definition_document = None
        self._re_process_training_document = None
        self._re_process_labelling_document = None
        self._parameter_exists = None
        self._verification_exists = None
        self._transaction_exists = None
        self._audit_exists = None
        self._work_items_exists = None
        self._logs_exists = None
        self._payment_exists = None
        self.discriminator = None
        if project_exist is not None:
            self.project_exist = project_exist
        if do_not_create_pd is not None:
            self.do_not_create_pd = do_not_create_pd
        if re_process_document_data_only is not None:
            self.re_process_document_data_only = re_process_document_data_only
        if re_process_data_set_document is not None:
            self.re_process_data_set_document = re_process_data_set_document
        if re_process_inbox_document is not None:
            self.re_process_inbox_document = re_process_inbox_document
        if re_process_outbox_document is not None:
            self.re_process_outbox_document = re_process_outbox_document
        if re_process_definition_document is not None:
            self.re_process_definition_document = re_process_definition_document
        if re_process_training_document is not None:
            self.re_process_training_document = re_process_training_document
        if re_process_labelling_document is not None:
            self.re_process_labelling_document = re_process_labelling_document
        if parameter_exists is not None:
            self.parameter_exists = parameter_exists
        if verification_exists is not None:
            self.verification_exists = verification_exists
        if transaction_exists is not None:
            self.transaction_exists = transaction_exists
        if audit_exists is not None:
            self.audit_exists = audit_exists
        if work_items_exists is not None:
            self.work_items_exists = work_items_exists
        if logs_exists is not None:
            self.logs_exists = logs_exists
        if payment_exists is not None:
            self.payment_exists = payment_exists

    @property
    def project_exist(self):
        """Gets the project_exist of this AIForgedCloneChecks.  # noqa: E501


        :return: The project_exist of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._project_exist

    @project_exist.setter
    def project_exist(self, project_exist):
        """Sets the project_exist of this AIForgedCloneChecks.


        :param project_exist: The project_exist of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._project_exist = project_exist

    @property
    def do_not_create_pd(self):
        """Gets the do_not_create_pd of this AIForgedCloneChecks.  # noqa: E501


        :return: The do_not_create_pd of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._do_not_create_pd

    @do_not_create_pd.setter
    def do_not_create_pd(self, do_not_create_pd):
        """Sets the do_not_create_pd of this AIForgedCloneChecks.


        :param do_not_create_pd: The do_not_create_pd of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._do_not_create_pd = do_not_create_pd

    @property
    def re_process_document_data_only(self):
        """Gets the re_process_document_data_only of this AIForgedCloneChecks.  # noqa: E501


        :return: The re_process_document_data_only of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._re_process_document_data_only

    @re_process_document_data_only.setter
    def re_process_document_data_only(self, re_process_document_data_only):
        """Sets the re_process_document_data_only of this AIForgedCloneChecks.


        :param re_process_document_data_only: The re_process_document_data_only of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._re_process_document_data_only = re_process_document_data_only

    @property
    def re_process_data_set_document(self):
        """Gets the re_process_data_set_document of this AIForgedCloneChecks.  # noqa: E501


        :return: The re_process_data_set_document of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._re_process_data_set_document

    @re_process_data_set_document.setter
    def re_process_data_set_document(self, re_process_data_set_document):
        """Sets the re_process_data_set_document of this AIForgedCloneChecks.


        :param re_process_data_set_document: The re_process_data_set_document of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._re_process_data_set_document = re_process_data_set_document

    @property
    def re_process_inbox_document(self):
        """Gets the re_process_inbox_document of this AIForgedCloneChecks.  # noqa: E501


        :return: The re_process_inbox_document of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._re_process_inbox_document

    @re_process_inbox_document.setter
    def re_process_inbox_document(self, re_process_inbox_document):
        """Sets the re_process_inbox_document of this AIForgedCloneChecks.


        :param re_process_inbox_document: The re_process_inbox_document of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._re_process_inbox_document = re_process_inbox_document

    @property
    def re_process_outbox_document(self):
        """Gets the re_process_outbox_document of this AIForgedCloneChecks.  # noqa: E501


        :return: The re_process_outbox_document of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._re_process_outbox_document

    @re_process_outbox_document.setter
    def re_process_outbox_document(self, re_process_outbox_document):
        """Sets the re_process_outbox_document of this AIForgedCloneChecks.


        :param re_process_outbox_document: The re_process_outbox_document of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._re_process_outbox_document = re_process_outbox_document

    @property
    def re_process_definition_document(self):
        """Gets the re_process_definition_document of this AIForgedCloneChecks.  # noqa: E501


        :return: The re_process_definition_document of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._re_process_definition_document

    @re_process_definition_document.setter
    def re_process_definition_document(self, re_process_definition_document):
        """Sets the re_process_definition_document of this AIForgedCloneChecks.


        :param re_process_definition_document: The re_process_definition_document of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._re_process_definition_document = re_process_definition_document

    @property
    def re_process_training_document(self):
        """Gets the re_process_training_document of this AIForgedCloneChecks.  # noqa: E501


        :return: The re_process_training_document of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._re_process_training_document

    @re_process_training_document.setter
    def re_process_training_document(self, re_process_training_document):
        """Sets the re_process_training_document of this AIForgedCloneChecks.


        :param re_process_training_document: The re_process_training_document of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._re_process_training_document = re_process_training_document

    @property
    def re_process_labelling_document(self):
        """Gets the re_process_labelling_document of this AIForgedCloneChecks.  # noqa: E501


        :return: The re_process_labelling_document of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._re_process_labelling_document

    @re_process_labelling_document.setter
    def re_process_labelling_document(self, re_process_labelling_document):
        """Sets the re_process_labelling_document of this AIForgedCloneChecks.


        :param re_process_labelling_document: The re_process_labelling_document of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._re_process_labelling_document = re_process_labelling_document

    @property
    def parameter_exists(self):
        """Gets the parameter_exists of this AIForgedCloneChecks.  # noqa: E501


        :return: The parameter_exists of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._parameter_exists

    @parameter_exists.setter
    def parameter_exists(self, parameter_exists):
        """Sets the parameter_exists of this AIForgedCloneChecks.


        :param parameter_exists: The parameter_exists of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._parameter_exists = parameter_exists

    @property
    def verification_exists(self):
        """Gets the verification_exists of this AIForgedCloneChecks.  # noqa: E501


        :return: The verification_exists of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._verification_exists

    @verification_exists.setter
    def verification_exists(self, verification_exists):
        """Sets the verification_exists of this AIForgedCloneChecks.


        :param verification_exists: The verification_exists of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._verification_exists = verification_exists

    @property
    def transaction_exists(self):
        """Gets the transaction_exists of this AIForgedCloneChecks.  # noqa: E501


        :return: The transaction_exists of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._transaction_exists

    @transaction_exists.setter
    def transaction_exists(self, transaction_exists):
        """Sets the transaction_exists of this AIForgedCloneChecks.


        :param transaction_exists: The transaction_exists of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._transaction_exists = transaction_exists

    @property
    def audit_exists(self):
        """Gets the audit_exists of this AIForgedCloneChecks.  # noqa: E501


        :return: The audit_exists of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._audit_exists

    @audit_exists.setter
    def audit_exists(self, audit_exists):
        """Sets the audit_exists of this AIForgedCloneChecks.


        :param audit_exists: The audit_exists of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._audit_exists = audit_exists

    @property
    def work_items_exists(self):
        """Gets the work_items_exists of this AIForgedCloneChecks.  # noqa: E501


        :return: The work_items_exists of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._work_items_exists

    @work_items_exists.setter
    def work_items_exists(self, work_items_exists):
        """Sets the work_items_exists of this AIForgedCloneChecks.


        :param work_items_exists: The work_items_exists of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._work_items_exists = work_items_exists

    @property
    def logs_exists(self):
        """Gets the logs_exists of this AIForgedCloneChecks.  # noqa: E501


        :return: The logs_exists of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._logs_exists

    @logs_exists.setter
    def logs_exists(self, logs_exists):
        """Sets the logs_exists of this AIForgedCloneChecks.


        :param logs_exists: The logs_exists of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._logs_exists = logs_exists

    @property
    def payment_exists(self):
        """Gets the payment_exists of this AIForgedCloneChecks.  # noqa: E501


        :return: The payment_exists of this AIForgedCloneChecks.  # noqa: E501
        :rtype: bool
        """
        return self._payment_exists

    @payment_exists.setter
    def payment_exists(self, payment_exists):
        """Sets the payment_exists of this AIForgedCloneChecks.


        :param payment_exists: The payment_exists of this AIForgedCloneChecks.  # noqa: E501
        :type: bool
        """

        self._payment_exists = payment_exists

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedCloneChecks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedCloneChecks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
