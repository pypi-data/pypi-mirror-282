# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ReportsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def reports_export_request(self, **kwargs):  # noqa: E501
        """Create a PowerBI report export request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_export_request(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: List of page names to export. Optional
        :param str x_api_version:
        :param str user_id: The user ID
        :param MicrosoftPowerBIApiModelsFileFormat file_format: The exported file format
        :param str group_id: The PowerBI group ID. Optional
        :param str report_id: The PowerBI report ID. Optional
        :param str filters:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reports_export_request_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reports_export_request_with_http_info(**kwargs)  # noqa: E501
            return data

    def reports_export_request_with_http_info(self, **kwargs):  # noqa: E501
        """Create a PowerBI report export request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_export_request_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: List of page names to export. Optional
        :param str x_api_version:
        :param str user_id: The user ID
        :param MicrosoftPowerBIApiModelsFileFormat file_format: The exported file format
        :param str group_id: The PowerBI group ID. Optional
        :param str report_id: The PowerBI report ID. Optional
        :param str filters:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'user_id', 'file_format', 'group_id', 'report_id', 'filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_export_request" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'file_format' in params:
            query_params.append(('fileFormat', params['file_format']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'report_id' in params:
            query_params.append(('reportId', params['report_id']))  # noqa: E501
        if 'filters' in params:
            query_params.append(('filters', params['filters']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/RequestExport', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_get_config(self, **kwargs):  # noqa: E501
        """Reports Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_get_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str page:
        :param int project_id:
        :param int service_id:
        :param str shared_user_id:
        :param datetime to_date:
        :param datetime from_date:
        :param str other:
        :param str x_api_version:
        :return: AIForgedReportsReportConfigViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reports_get_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reports_get_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def reports_get_config_with_http_info(self, **kwargs):  # noqa: E501
        """Reports Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_get_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str page:
        :param int project_id:
        :param int service_id:
        :param str shared_user_id:
        :param datetime to_date:
        :param datetime from_date:
        :param str other:
        :param str x_api_version:
        :return: AIForgedReportsReportConfigViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'page', 'project_id', 'service_id', 'shared_user_id', 'to_date', 'from_date', 'other', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_get_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'service_id' in params:
            query_params.append(('serviceId', params['service_id']))  # noqa: E501
        if 'shared_user_id' in params:
            query_params.append(('sharedUserId', params['shared_user_id']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'other' in params:
            query_params.append(('other', params['other']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/GetConfig', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedReportsReportConfigViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_get_exported_file(self, body, **kwargs):  # noqa: E501
        """Get the exported file  # noqa: E501

        This operation retrieves a successfully exported file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_get_exported_file(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MicrosoftPowerBIApiModelsExport body: The export object returned after successful polling (required)
        :param str x_api_version:
        :param str report_id: The PowerBI report ID
        :param str group_id: The PowerBI group ID
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reports_get_exported_file_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.reports_get_exported_file_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def reports_get_exported_file_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get the exported file  # noqa: E501

        This operation retrieves a successfully exported file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_get_exported_file_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MicrosoftPowerBIApiModelsExport body: The export object returned after successful polling (required)
        :param str x_api_version:
        :param str report_id: The PowerBI report ID
        :param str group_id: The PowerBI group ID
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'report_id', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_get_exported_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `reports_get_exported_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'report_id' in params:
            query_params.append(('reportId', params['report_id']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/GetExport', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_get_group_users(self, **kwargs):  # noqa: E501
        """Get goup users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_get_group_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str groupid:
        :param str x_api_version:
        :return: list[MicrosoftPowerBIApiModelsGroupUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reports_get_group_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reports_get_group_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def reports_get_group_users_with_http_info(self, **kwargs):  # noqa: E501
        """Get goup users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_get_group_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str groupid:
        :param str x_api_version:
        :return: list[MicrosoftPowerBIApiModelsGroupUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupid', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_get_group_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'groupid' in params:
            query_params.append(('groupid', params['groupid']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/GetGroupUsers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MicrosoftPowerBIApiModelsGroupUser]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_get_groups(self, **kwargs):  # noqa: E501
        """Get groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_get_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: list[MicrosoftPowerBIApiModelsGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reports_get_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reports_get_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def reports_get_groups_with_http_info(self, **kwargs):  # noqa: E501
        """Get groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_get_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: list[MicrosoftPowerBIApiModelsGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_get_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/GetGroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MicrosoftPowerBIApiModelsGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_get_pages(self, **kwargs):  # noqa: E501
        """Get pages by report id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_get_pages(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str groupid:
        :param str reportid:
        :param str x_api_version:
        :return: list[MicrosoftPowerBIApiModelsPage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reports_get_pages_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reports_get_pages_with_http_info(**kwargs)  # noqa: E501
            return data

    def reports_get_pages_with_http_info(self, **kwargs):  # noqa: E501
        """Get pages by report id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_get_pages_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str groupid:
        :param str reportid:
        :param str x_api_version:
        :return: list[MicrosoftPowerBIApiModelsPage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupid', 'reportid', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_get_pages" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'groupid' in params:
            query_params.append(('groupid', params['groupid']))  # noqa: E501
        if 'reportid' in params:
            query_params.append(('reportid', params['reportid']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/GetPages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MicrosoftPowerBIApiModelsPage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_get_report(self, **kwargs):  # noqa: E501
        """Get report by Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_get_report(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str groupid:
        :param str reportid:
        :param str x_api_version:
        :return: MicrosoftPowerBIApiModelsReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reports_get_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reports_get_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def reports_get_report_with_http_info(self, **kwargs):  # noqa: E501
        """Get report by Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_get_report_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str groupid:
        :param str reportid:
        :param str x_api_version:
        :return: MicrosoftPowerBIApiModelsReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupid', 'reportid', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_get_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'groupid' in params:
            query_params.append(('groupid', params['groupid']))  # noqa: E501
        if 'reportid' in params:
            query_params.append(('reportid', params['reportid']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/GetReport', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MicrosoftPowerBIApiModelsReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_get_reports(self, **kwargs):  # noqa: E501
        """Get reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_get_reports(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str groupid:
        :param str x_api_version:
        :return: list[MicrosoftPowerBIApiModelsReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reports_get_reports_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reports_get_reports_with_http_info(**kwargs)  # noqa: E501
            return data

    def reports_get_reports_with_http_info(self, **kwargs):  # noqa: E501
        """Get reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_get_reports_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str groupid:
        :param str x_api_version:
        :return: list[MicrosoftPowerBIApiModelsReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupid', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_get_reports" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'groupid' in params:
            query_params.append(('groupid', params['groupid']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/GetReports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MicrosoftPowerBIApiModelsReport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_poll_export_request(self, **kwargs):  # noqa: E501
        """Poll PowerBI report export request  # noqa: E501

        This operation returns the Export result  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_poll_export_request(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str report_id: The PowerBI report ID
        :param str group_id: The PowerBI group ID
        :param str export_id: The export operation ID to poll
        :param int timeout_in_minutes: Polling timeout in minutes
        :param str x_api_version:
        :return: MicrosoftPowerBIApiModelsExport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reports_poll_export_request_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reports_poll_export_request_with_http_info(**kwargs)  # noqa: E501
            return data

    def reports_poll_export_request_with_http_info(self, **kwargs):  # noqa: E501
        """Poll PowerBI report export request  # noqa: E501

        This operation returns the Export result  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_poll_export_request_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str report_id: The PowerBI report ID
        :param str group_id: The PowerBI group ID
        :param str export_id: The export operation ID to poll
        :param int timeout_in_minutes: Polling timeout in minutes
        :param str x_api_version:
        :return: MicrosoftPowerBIApiModelsExport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'report_id', 'group_id', 'export_id', 'timeout_in_minutes', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_poll_export_request" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'report_id' in params:
            query_params.append(('reportId', params['report_id']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'export_id' in params:
            query_params.append(('exportId', params['export_id']))  # noqa: E501
        if 'timeout_in_minutes' in params:
            query_params.append(('timeoutInMinutes', params['timeout_in_minutes']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/PollExport', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MicrosoftPowerBIApiModelsExport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_power_bi(self, **kwargs):  # noqa: E501
        """Go To PowerBI  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_power_bi(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reports_power_bi_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reports_power_bi_with_http_info(**kwargs)  # noqa: E501
            return data

    def reports_power_bi_with_http_info(self, **kwargs):  # noqa: E501
        """Go To PowerBI  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_power_bi_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_power_bi" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/PowerBI', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
