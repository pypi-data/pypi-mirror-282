# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsCategoryTrainingOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'training_custom_table_names': 'list[str]',
        'process_table_names': 'list[str]',
        'use_in_composed_model': 'bool',
        'force_to_pdf': 'bool',
        'training_type': 'OneOfAIForgedViewModelsCategoryTrainingOptionsTrainingType',
        'model_version': 'str',
        'table_column_regex_map': 'dict(str, dict(str, str))'
    }

    attribute_map = {
        'training_custom_table_names': 'trainingCustomTableNames',
        'process_table_names': 'processTableNames',
        'use_in_composed_model': 'useInComposedModel',
        'force_to_pdf': 'forceToPDF',
        'training_type': 'trainingType',
        'model_version': 'modelVersion',
        'table_column_regex_map': 'tableColumnRegexMap'
    }

    def __init__(self, training_custom_table_names=None, process_table_names=None, use_in_composed_model=None, force_to_pdf=None, training_type=None, model_version=None, table_column_regex_map=None):  # noqa: E501
        """AIForgedViewModelsCategoryTrainingOptions - a model defined in Swagger"""  # noqa: E501
        self._training_custom_table_names = None
        self._process_table_names = None
        self._use_in_composed_model = None
        self._force_to_pdf = None
        self._training_type = None
        self._model_version = None
        self._table_column_regex_map = None
        self.discriminator = None
        if training_custom_table_names is not None:
            self.training_custom_table_names = training_custom_table_names
        if process_table_names is not None:
            self.process_table_names = process_table_names
        if use_in_composed_model is not None:
            self.use_in_composed_model = use_in_composed_model
        if force_to_pdf is not None:
            self.force_to_pdf = force_to_pdf
        if training_type is not None:
            self.training_type = training_type
        if model_version is not None:
            self.model_version = model_version
        if table_column_regex_map is not None:
            self.table_column_regex_map = table_column_regex_map

    @property
    def training_custom_table_names(self):
        """Gets the training_custom_table_names of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501


        :return: The training_custom_table_names of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._training_custom_table_names

    @training_custom_table_names.setter
    def training_custom_table_names(self, training_custom_table_names):
        """Sets the training_custom_table_names of this AIForgedViewModelsCategoryTrainingOptions.


        :param training_custom_table_names: The training_custom_table_names of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501
        :type: list[str]
        """

        self._training_custom_table_names = training_custom_table_names

    @property
    def process_table_names(self):
        """Gets the process_table_names of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501


        :return: The process_table_names of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._process_table_names

    @process_table_names.setter
    def process_table_names(self, process_table_names):
        """Sets the process_table_names of this AIForgedViewModelsCategoryTrainingOptions.


        :param process_table_names: The process_table_names of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501
        :type: list[str]
        """

        self._process_table_names = process_table_names

    @property
    def use_in_composed_model(self):
        """Gets the use_in_composed_model of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501


        :return: The use_in_composed_model of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501
        :rtype: bool
        """
        return self._use_in_composed_model

    @use_in_composed_model.setter
    def use_in_composed_model(self, use_in_composed_model):
        """Sets the use_in_composed_model of this AIForgedViewModelsCategoryTrainingOptions.


        :param use_in_composed_model: The use_in_composed_model of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501
        :type: bool
        """

        self._use_in_composed_model = use_in_composed_model

    @property
    def force_to_pdf(self):
        """Gets the force_to_pdf of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501


        :return: The force_to_pdf of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501
        :rtype: bool
        """
        return self._force_to_pdf

    @force_to_pdf.setter
    def force_to_pdf(self, force_to_pdf):
        """Sets the force_to_pdf of this AIForgedViewModelsCategoryTrainingOptions.


        :param force_to_pdf: The force_to_pdf of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501
        :type: bool
        """

        self._force_to_pdf = force_to_pdf

    @property
    def training_type(self):
        """Gets the training_type of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501


        :return: The training_type of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsCategoryTrainingOptionsTrainingType
        """
        return self._training_type

    @training_type.setter
    def training_type(self, training_type):
        """Sets the training_type of this AIForgedViewModelsCategoryTrainingOptions.


        :param training_type: The training_type of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501
        :type: OneOfAIForgedViewModelsCategoryTrainingOptionsTrainingType
        """

        self._training_type = training_type

    @property
    def model_version(self):
        """Gets the model_version of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501


        :return: The model_version of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501
        :rtype: str
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """Sets the model_version of this AIForgedViewModelsCategoryTrainingOptions.


        :param model_version: The model_version of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501
        :type: str
        """

        self._model_version = model_version

    @property
    def table_column_regex_map(self):
        """Gets the table_column_regex_map of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501


        :return: The table_column_regex_map of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501
        :rtype: dict(str, dict(str, str))
        """
        return self._table_column_regex_map

    @table_column_regex_map.setter
    def table_column_regex_map(self, table_column_regex_map):
        """Sets the table_column_regex_map of this AIForgedViewModelsCategoryTrainingOptions.


        :param table_column_regex_map: The table_column_regex_map of this AIForgedViewModelsCategoryTrainingOptions.  # noqa: E501
        :type: dict(str, dict(str, str))
        """

        self._table_column_regex_map = table_column_regex_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsCategoryTrainingOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsCategoryTrainingOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
