# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedDALModelsGroupRoleUserViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'str',
        'group_role_id': 'int',
        'status': 'AIForgedDALGroupRoleUserStatus',
        'dtc': 'datetime',
        'dtm': 'datetime',
        'start': 'datetime',
        'end': 'datetime',
        'user_name': 'str',
        'full_name': 'str',
        'display_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'group_role_id': 'groupRoleId',
        'status': 'status',
        'dtc': 'dtc',
        'dtm': 'dtm',
        'start': 'start',
        'end': 'end',
        'user_name': 'userName',
        'full_name': 'fullName',
        'display_name': 'displayName'
    }

    def __init__(self, id=None, user_id=None, group_role_id=None, status=None, dtc=None, dtm=None, start=None, end=None, user_name=None, full_name=None, display_name=None):  # noqa: E501
        """AIForgedDALModelsGroupRoleUserViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._group_role_id = None
        self._status = None
        self._dtc = None
        self._dtm = None
        self._start = None
        self._end = None
        self._user_name = None
        self._full_name = None
        self._display_name = None
        self.discriminator = None
        self.id = id
        self.user_id = user_id
        self.group_role_id = group_role_id
        if status is not None:
            self.status = status
        if dtc is not None:
            self.dtc = dtc
        if dtm is not None:
            self.dtm = dtm
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if user_name is not None:
            self.user_name = user_name
        if full_name is not None:
            self.full_name = full_name
        if display_name is not None:
            self.display_name = display_name

    @property
    def id(self):
        """Gets the id of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501


        :return: The id of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedDALModelsGroupRoleUserViewModel.


        :param id: The id of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501


        :return: The user_id of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedDALModelsGroupRoleUserViewModel.


        :param user_id: The user_id of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def group_role_id(self):
        """Gets the group_role_id of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501


        :return: The group_role_id of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :rtype: int
        """
        return self._group_role_id

    @group_role_id.setter
    def group_role_id(self, group_role_id):
        """Sets the group_role_id of this AIForgedDALModelsGroupRoleUserViewModel.


        :param group_role_id: The group_role_id of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :type: int
        """
        if group_role_id is None:
            raise ValueError("Invalid value for `group_role_id`, must not be `None`")  # noqa: E501

        self._group_role_id = group_role_id

    @property
    def status(self):
        """Gets the status of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501


        :return: The status of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :rtype: AIForgedDALGroupRoleUserStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedDALModelsGroupRoleUserViewModel.


        :param status: The status of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :type: AIForgedDALGroupRoleUserStatus
        """

        self._status = status

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501


        :return: The dtc of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedDALModelsGroupRoleUserViewModel.


        :param dtc: The dtc of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def dtm(self):
        """Gets the dtm of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501


        :return: The dtm of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtm

    @dtm.setter
    def dtm(self, dtm):
        """Sets the dtm of this AIForgedDALModelsGroupRoleUserViewModel.


        :param dtm: The dtm of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtm = dtm

    @property
    def start(self):
        """Gets the start of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501


        :return: The start of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this AIForgedDALModelsGroupRoleUserViewModel.


        :param start: The start of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501


        :return: The end of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this AIForgedDALModelsGroupRoleUserViewModel.


        :param end: The end of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def user_name(self):
        """Gets the user_name of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501


        :return: The user_name of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AIForgedDALModelsGroupRoleUserViewModel.


        :param user_name: The user_name of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def full_name(self):
        """Gets the full_name of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501


        :return: The full_name of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this AIForgedDALModelsGroupRoleUserViewModel.


        :param full_name: The full_name of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def display_name(self):
        """Gets the display_name of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501


        :return: The display_name of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AIForgedDALModelsGroupRoleUserViewModel.


        :param display_name: The display_name of this AIForgedDALModelsGroupRoleUserViewModel.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedDALModelsGroupRoleUserViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedDALModelsGroupRoleUserViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
