# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsRatingViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'param_def_id': 'int',
        'parameter_id': 'int',
        'verification_id': 'int',
        'type': 'AIForgedDALRatingType',
        'status': 'OneOfAIForgedViewModelsRatingViewModelStatus',
        'user_id': 'str',
        'dt': 'datetime',
        'value': 'float',
        'comment': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'param_def_id': 'paramDefId',
        'parameter_id': 'parameterId',
        'verification_id': 'verificationId',
        'type': 'type',
        'status': 'status',
        'user_id': 'userId',
        'dt': 'dt',
        'value': 'value',
        'comment': 'comment',
        'user_name': 'userName'
    }

    def __init__(self, id=None, param_def_id=None, parameter_id=None, verification_id=None, type=None, status=None, user_id=None, dt=None, value=None, comment=None, user_name=None):  # noqa: E501
        """AIForgedViewModelsRatingViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._param_def_id = None
        self._parameter_id = None
        self._verification_id = None
        self._type = None
        self._status = None
        self._user_id = None
        self._dt = None
        self._value = None
        self._comment = None
        self._user_name = None
        self.discriminator = None
        self.id = id
        self.param_def_id = param_def_id
        if parameter_id is not None:
            self.parameter_id = parameter_id
        if verification_id is not None:
            self.verification_id = verification_id
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if user_id is not None:
            self.user_id = user_id
        if dt is not None:
            self.dt = dt
        if value is not None:
            self.value = value
        if comment is not None:
            self.comment = comment
        if user_name is not None:
            self.user_name = user_name

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsRatingViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsRatingViewModel.


        :param id: The id of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def param_def_id(self):
        """Gets the param_def_id of this AIForgedViewModelsRatingViewModel.  # noqa: E501


        :return: The param_def_id of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :rtype: int
        """
        return self._param_def_id

    @param_def_id.setter
    def param_def_id(self, param_def_id):
        """Sets the param_def_id of this AIForgedViewModelsRatingViewModel.


        :param param_def_id: The param_def_id of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :type: int
        """
        if param_def_id is None:
            raise ValueError("Invalid value for `param_def_id`, must not be `None`")  # noqa: E501

        self._param_def_id = param_def_id

    @property
    def parameter_id(self):
        """Gets the parameter_id of this AIForgedViewModelsRatingViewModel.  # noqa: E501


        :return: The parameter_id of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :rtype: int
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id):
        """Sets the parameter_id of this AIForgedViewModelsRatingViewModel.


        :param parameter_id: The parameter_id of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :type: int
        """

        self._parameter_id = parameter_id

    @property
    def verification_id(self):
        """Gets the verification_id of this AIForgedViewModelsRatingViewModel.  # noqa: E501


        :return: The verification_id of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :rtype: int
        """
        return self._verification_id

    @verification_id.setter
    def verification_id(self, verification_id):
        """Sets the verification_id of this AIForgedViewModelsRatingViewModel.


        :param verification_id: The verification_id of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :type: int
        """

        self._verification_id = verification_id

    @property
    def type(self):
        """Gets the type of this AIForgedViewModelsRatingViewModel.  # noqa: E501


        :return: The type of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :rtype: AIForgedDALRatingType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedViewModelsRatingViewModel.


        :param type: The type of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :type: AIForgedDALRatingType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsRatingViewModel.  # noqa: E501


        :return: The status of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsRatingViewModelStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsRatingViewModel.


        :param status: The status of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsRatingViewModelStatus
        """

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedViewModelsRatingViewModel.  # noqa: E501


        :return: The user_id of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedViewModelsRatingViewModel.


        :param user_id: The user_id of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def dt(self):
        """Gets the dt of this AIForgedViewModelsRatingViewModel.  # noqa: E501


        :return: The dt of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this AIForgedViewModelsRatingViewModel.


        :param dt: The dt of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def value(self):
        """Gets the value of this AIForgedViewModelsRatingViewModel.  # noqa: E501


        :return: The value of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AIForgedViewModelsRatingViewModel.


        :param value: The value of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def comment(self):
        """Gets the comment of this AIForgedViewModelsRatingViewModel.  # noqa: E501


        :return: The comment of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AIForgedViewModelsRatingViewModel.


        :param comment: The comment of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def user_name(self):
        """Gets the user_name of this AIForgedViewModelsRatingViewModel.  # noqa: E501


        :return: The user_name of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AIForgedViewModelsRatingViewModel.


        :param user_name: The user_name of this AIForgedViewModelsRatingViewModel.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsRatingViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsRatingViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
