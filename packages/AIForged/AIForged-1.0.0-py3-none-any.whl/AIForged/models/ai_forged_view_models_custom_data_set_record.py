# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsCustomDataSetRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_id': 'int',
        'key_def_id': 'int',
        'key_value': 'str',
        'availability': 'OneOfAIForgedViewModelsCustomDataSetRecordAvailability',
        'values': 'list[AIForgedViewModelsCustomDataSetValue]'
    }

    attribute_map = {
        'key_id': 'keyId',
        'key_def_id': 'keyDefId',
        'key_value': 'keyValue',
        'availability': 'availability',
        'values': 'values'
    }

    def __init__(self, key_id=None, key_def_id=None, key_value=None, availability=None, values=None):  # noqa: E501
        """AIForgedViewModelsCustomDataSetRecord - a model defined in Swagger"""  # noqa: E501
        self._key_id = None
        self._key_def_id = None
        self._key_value = None
        self._availability = None
        self._values = None
        self.discriminator = None
        if key_id is not None:
            self.key_id = key_id
        if key_def_id is not None:
            self.key_def_id = key_def_id
        if key_value is not None:
            self.key_value = key_value
        if availability is not None:
            self.availability = availability
        if values is not None:
            self.values = values

    @property
    def key_id(self):
        """Gets the key_id of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501


        :return: The key_id of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501
        :rtype: int
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this AIForgedViewModelsCustomDataSetRecord.


        :param key_id: The key_id of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501
        :type: int
        """

        self._key_id = key_id

    @property
    def key_def_id(self):
        """Gets the key_def_id of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501


        :return: The key_def_id of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501
        :rtype: int
        """
        return self._key_def_id

    @key_def_id.setter
    def key_def_id(self, key_def_id):
        """Sets the key_def_id of this AIForgedViewModelsCustomDataSetRecord.


        :param key_def_id: The key_def_id of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501
        :type: int
        """

        self._key_def_id = key_def_id

    @property
    def key_value(self):
        """Gets the key_value of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501


        :return: The key_value of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501
        :rtype: str
        """
        return self._key_value

    @key_value.setter
    def key_value(self, key_value):
        """Sets the key_value of this AIForgedViewModelsCustomDataSetRecord.


        :param key_value: The key_value of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501
        :type: str
        """

        self._key_value = key_value

    @property
    def availability(self):
        """Gets the availability of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501


        :return: The availability of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsCustomDataSetRecordAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AIForgedViewModelsCustomDataSetRecord.


        :param availability: The availability of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501
        :type: OneOfAIForgedViewModelsCustomDataSetRecordAvailability
        """

        self._availability = availability

    @property
    def values(self):
        """Gets the values of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501


        :return: The values of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501
        :rtype: list[AIForgedViewModelsCustomDataSetValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this AIForgedViewModelsCustomDataSetRecord.


        :param values: The values of this AIForgedViewModelsCustomDataSetRecord.  # noqa: E501
        :type: list[AIForgedViewModelsCustomDataSetValue]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsCustomDataSetRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsCustomDataSetRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
