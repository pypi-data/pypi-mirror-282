# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftPowerBIApiModelsUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_address': 'str',
        'display_name': 'str',
        'identifier': 'str',
        'graph_id': 'str',
        'user_type': 'str',
        'principal_type': 'MicrosoftPowerBIApiModelsPrincipalType',
        'profile': 'OneOfMicrosoftPowerBIApiModelsUserProfile'
    }

    attribute_map = {
        'email_address': 'emailAddress',
        'display_name': 'displayName',
        'identifier': 'identifier',
        'graph_id': 'graphId',
        'user_type': 'userType',
        'principal_type': 'principalType',
        'profile': 'profile'
    }

    def __init__(self, email_address=None, display_name=None, identifier=None, graph_id=None, user_type=None, principal_type=None, profile=None):  # noqa: E501
        """MicrosoftPowerBIApiModelsUser - a model defined in Swagger"""  # noqa: E501
        self._email_address = None
        self._display_name = None
        self._identifier = None
        self._graph_id = None
        self._user_type = None
        self._principal_type = None
        self._profile = None
        self.discriminator = None
        if email_address is not None:
            self.email_address = email_address
        if display_name is not None:
            self.display_name = display_name
        if identifier is not None:
            self.identifier = identifier
        if graph_id is not None:
            self.graph_id = graph_id
        if user_type is not None:
            self.user_type = user_type
        if principal_type is not None:
            self.principal_type = principal_type
        if profile is not None:
            self.profile = profile

    @property
    def email_address(self):
        """Gets the email_address of this MicrosoftPowerBIApiModelsUser.  # noqa: E501


        :return: The email_address of this MicrosoftPowerBIApiModelsUser.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this MicrosoftPowerBIApiModelsUser.


        :param email_address: The email_address of this MicrosoftPowerBIApiModelsUser.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def display_name(self):
        """Gets the display_name of this MicrosoftPowerBIApiModelsUser.  # noqa: E501


        :return: The display_name of this MicrosoftPowerBIApiModelsUser.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MicrosoftPowerBIApiModelsUser.


        :param display_name: The display_name of this MicrosoftPowerBIApiModelsUser.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def identifier(self):
        """Gets the identifier of this MicrosoftPowerBIApiModelsUser.  # noqa: E501


        :return: The identifier of this MicrosoftPowerBIApiModelsUser.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this MicrosoftPowerBIApiModelsUser.


        :param identifier: The identifier of this MicrosoftPowerBIApiModelsUser.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def graph_id(self):
        """Gets the graph_id of this MicrosoftPowerBIApiModelsUser.  # noqa: E501


        :return: The graph_id of this MicrosoftPowerBIApiModelsUser.  # noqa: E501
        :rtype: str
        """
        return self._graph_id

    @graph_id.setter
    def graph_id(self, graph_id):
        """Sets the graph_id of this MicrosoftPowerBIApiModelsUser.


        :param graph_id: The graph_id of this MicrosoftPowerBIApiModelsUser.  # noqa: E501
        :type: str
        """

        self._graph_id = graph_id

    @property
    def user_type(self):
        """Gets the user_type of this MicrosoftPowerBIApiModelsUser.  # noqa: E501


        :return: The user_type of this MicrosoftPowerBIApiModelsUser.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this MicrosoftPowerBIApiModelsUser.


        :param user_type: The user_type of this MicrosoftPowerBIApiModelsUser.  # noqa: E501
        :type: str
        """

        self._user_type = user_type

    @property
    def principal_type(self):
        """Gets the principal_type of this MicrosoftPowerBIApiModelsUser.  # noqa: E501


        :return: The principal_type of this MicrosoftPowerBIApiModelsUser.  # noqa: E501
        :rtype: MicrosoftPowerBIApiModelsPrincipalType
        """
        return self._principal_type

    @principal_type.setter
    def principal_type(self, principal_type):
        """Sets the principal_type of this MicrosoftPowerBIApiModelsUser.


        :param principal_type: The principal_type of this MicrosoftPowerBIApiModelsUser.  # noqa: E501
        :type: MicrosoftPowerBIApiModelsPrincipalType
        """

        self._principal_type = principal_type

    @property
    def profile(self):
        """Gets the profile of this MicrosoftPowerBIApiModelsUser.  # noqa: E501


        :return: The profile of this MicrosoftPowerBIApiModelsUser.  # noqa: E501
        :rtype: OneOfMicrosoftPowerBIApiModelsUserProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this MicrosoftPowerBIApiModelsUser.


        :param profile: The profile of this MicrosoftPowerBIApiModelsUser.  # noqa: E501
        :type: OneOfMicrosoftPowerBIApiModelsUserProfile
        """

        self._profile = profile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftPowerBIApiModelsUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftPowerBIApiModelsUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
