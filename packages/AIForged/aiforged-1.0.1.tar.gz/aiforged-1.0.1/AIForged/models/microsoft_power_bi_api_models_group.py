# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftPowerBIApiModelsGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'is_read_only': 'bool',
        'is_on_dedicated_capacity': 'bool',
        'capacity_id': 'str',
        'dataflow_storage_id': 'str',
        'default_dataset_storage_format': 'str',
        'log_analytics_workspace': 'OneOfMicrosoftPowerBIApiModelsGroupLogAnalyticsWorkspace'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'is_read_only': 'isReadOnly',
        'is_on_dedicated_capacity': 'isOnDedicatedCapacity',
        'capacity_id': 'capacityId',
        'dataflow_storage_id': 'dataflowStorageId',
        'default_dataset_storage_format': 'defaultDatasetStorageFormat',
        'log_analytics_workspace': 'logAnalyticsWorkspace'
    }

    def __init__(self, id=None, name=None, is_read_only=None, is_on_dedicated_capacity=None, capacity_id=None, dataflow_storage_id=None, default_dataset_storage_format=None, log_analytics_workspace=None):  # noqa: E501
        """MicrosoftPowerBIApiModelsGroup - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._is_read_only = None
        self._is_on_dedicated_capacity = None
        self._capacity_id = None
        self._dataflow_storage_id = None
        self._default_dataset_storage_format = None
        self._log_analytics_workspace = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if is_read_only is not None:
            self.is_read_only = is_read_only
        if is_on_dedicated_capacity is not None:
            self.is_on_dedicated_capacity = is_on_dedicated_capacity
        if capacity_id is not None:
            self.capacity_id = capacity_id
        if dataflow_storage_id is not None:
            self.dataflow_storage_id = dataflow_storage_id
        if default_dataset_storage_format is not None:
            self.default_dataset_storage_format = default_dataset_storage_format
        if log_analytics_workspace is not None:
            self.log_analytics_workspace = log_analytics_workspace

    @property
    def id(self):
        """Gets the id of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501


        :return: The id of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MicrosoftPowerBIApiModelsGroup.


        :param id: The id of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501


        :return: The name of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MicrosoftPowerBIApiModelsGroup.


        :param name: The name of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_read_only(self):
        """Gets the is_read_only of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501


        :return: The is_read_only of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this MicrosoftPowerBIApiModelsGroup.


        :param is_read_only: The is_read_only of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :type: bool
        """

        self._is_read_only = is_read_only

    @property
    def is_on_dedicated_capacity(self):
        """Gets the is_on_dedicated_capacity of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501


        :return: The is_on_dedicated_capacity of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :rtype: bool
        """
        return self._is_on_dedicated_capacity

    @is_on_dedicated_capacity.setter
    def is_on_dedicated_capacity(self, is_on_dedicated_capacity):
        """Sets the is_on_dedicated_capacity of this MicrosoftPowerBIApiModelsGroup.


        :param is_on_dedicated_capacity: The is_on_dedicated_capacity of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :type: bool
        """

        self._is_on_dedicated_capacity = is_on_dedicated_capacity

    @property
    def capacity_id(self):
        """Gets the capacity_id of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501


        :return: The capacity_id of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :rtype: str
        """
        return self._capacity_id

    @capacity_id.setter
    def capacity_id(self, capacity_id):
        """Sets the capacity_id of this MicrosoftPowerBIApiModelsGroup.


        :param capacity_id: The capacity_id of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :type: str
        """

        self._capacity_id = capacity_id

    @property
    def dataflow_storage_id(self):
        """Gets the dataflow_storage_id of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501


        :return: The dataflow_storage_id of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :rtype: str
        """
        return self._dataflow_storage_id

    @dataflow_storage_id.setter
    def dataflow_storage_id(self, dataflow_storage_id):
        """Sets the dataflow_storage_id of this MicrosoftPowerBIApiModelsGroup.


        :param dataflow_storage_id: The dataflow_storage_id of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :type: str
        """

        self._dataflow_storage_id = dataflow_storage_id

    @property
    def default_dataset_storage_format(self):
        """Gets the default_dataset_storage_format of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501


        :return: The default_dataset_storage_format of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :rtype: str
        """
        return self._default_dataset_storage_format

    @default_dataset_storage_format.setter
    def default_dataset_storage_format(self, default_dataset_storage_format):
        """Sets the default_dataset_storage_format of this MicrosoftPowerBIApiModelsGroup.


        :param default_dataset_storage_format: The default_dataset_storage_format of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :type: str
        """

        self._default_dataset_storage_format = default_dataset_storage_format

    @property
    def log_analytics_workspace(self):
        """Gets the log_analytics_workspace of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501


        :return: The log_analytics_workspace of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :rtype: OneOfMicrosoftPowerBIApiModelsGroupLogAnalyticsWorkspace
        """
        return self._log_analytics_workspace

    @log_analytics_workspace.setter
    def log_analytics_workspace(self, log_analytics_workspace):
        """Sets the log_analytics_workspace of this MicrosoftPowerBIApiModelsGroup.


        :param log_analytics_workspace: The log_analytics_workspace of this MicrosoftPowerBIApiModelsGroup.  # noqa: E501
        :type: OneOfMicrosoftPowerBIApiModelsGroupLogAnalyticsWorkspace
        """

        self._log_analytics_workspace = log_analytics_workspace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftPowerBIApiModelsGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftPowerBIApiModelsGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
