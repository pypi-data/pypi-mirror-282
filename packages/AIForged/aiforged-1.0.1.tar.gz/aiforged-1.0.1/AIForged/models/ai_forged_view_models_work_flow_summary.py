# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsWorkFlowSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'int',
        'user_id': 'str',
        'user_name': 'str',
        'service_id': 'int',
        'def_id': 'int',
        'doc_id': 'int',
        'filename': 'str',
        'doc_status': 'OneOfAIForgedViewModelsWorkFlowSummaryDocStatus',
        'doc_usage': 'OneOfAIForgedViewModelsWorkFlowSummaryDocUsage',
        'doc_class_id': 'int',
        'doc_class_name': 'str',
        'action': 'AIForgedDALWorkItemAction',
        'type': 'AIForgedDALWorkItemType',
        'status': 'AIForgedDALWorkItemStatus',
        'method': 'OneOfAIForgedViewModelsWorkFlowSummaryMethod',
        'dt': 'datetime',
        'duration': 'str',
        'active_duration': 'str',
        'count': 'int'
    }

    attribute_map = {
        'project_id': 'projectId',
        'user_id': 'userId',
        'user_name': 'userName',
        'service_id': 'serviceId',
        'def_id': 'defId',
        'doc_id': 'docId',
        'filename': 'filename',
        'doc_status': 'docStatus',
        'doc_usage': 'docUsage',
        'doc_class_id': 'docClassId',
        'doc_class_name': 'docClassName',
        'action': 'action',
        'type': 'type',
        'status': 'status',
        'method': 'method',
        'dt': 'dt',
        'duration': 'duration',
        'active_duration': 'activeDuration',
        'count': 'count'
    }

    def __init__(self, project_id=None, user_id=None, user_name=None, service_id=None, def_id=None, doc_id=None, filename=None, doc_status=None, doc_usage=None, doc_class_id=None, doc_class_name=None, action=None, type=None, status=None, method=None, dt=None, duration=None, active_duration=None, count=None):  # noqa: E501
        """AIForgedViewModelsWorkFlowSummary - a model defined in Swagger"""  # noqa: E501
        self._project_id = None
        self._user_id = None
        self._user_name = None
        self._service_id = None
        self._def_id = None
        self._doc_id = None
        self._filename = None
        self._doc_status = None
        self._doc_usage = None
        self._doc_class_id = None
        self._doc_class_name = None
        self._action = None
        self._type = None
        self._status = None
        self._method = None
        self._dt = None
        self._duration = None
        self._active_duration = None
        self._count = None
        self.discriminator = None
        if project_id is not None:
            self.project_id = project_id
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if service_id is not None:
            self.service_id = service_id
        if def_id is not None:
            self.def_id = def_id
        if doc_id is not None:
            self.doc_id = doc_id
        if filename is not None:
            self.filename = filename
        if doc_status is not None:
            self.doc_status = doc_status
        if doc_usage is not None:
            self.doc_usage = doc_usage
        if doc_class_id is not None:
            self.doc_class_id = doc_class_id
        if doc_class_name is not None:
            self.doc_class_name = doc_class_name
        if action is not None:
            self.action = action
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if method is not None:
            self.method = method
        if dt is not None:
            self.dt = dt
        if duration is not None:
            self.duration = duration
        if active_duration is not None:
            self.active_duration = active_duration
        if count is not None:
            self.count = count

    @property
    def project_id(self):
        """Gets the project_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The project_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AIForgedViewModelsWorkFlowSummary.


        :param project_id: The project_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The user_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedViewModelsWorkFlowSummary.


        :param user_id: The user_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The user_name of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AIForgedViewModelsWorkFlowSummary.


        :param user_name: The user_name of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def service_id(self):
        """Gets the service_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The service_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AIForgedViewModelsWorkFlowSummary.


        :param service_id: The service_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def def_id(self):
        """Gets the def_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The def_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: int
        """
        return self._def_id

    @def_id.setter
    def def_id(self, def_id):
        """Sets the def_id of this AIForgedViewModelsWorkFlowSummary.


        :param def_id: The def_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: int
        """

        self._def_id = def_id

    @property
    def doc_id(self):
        """Gets the doc_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The doc_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: int
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id):
        """Sets the doc_id of this AIForgedViewModelsWorkFlowSummary.


        :param doc_id: The doc_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: int
        """

        self._doc_id = doc_id

    @property
    def filename(self):
        """Gets the filename of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The filename of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this AIForgedViewModelsWorkFlowSummary.


        :param filename: The filename of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def doc_status(self):
        """Gets the doc_status of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The doc_status of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWorkFlowSummaryDocStatus
        """
        return self._doc_status

    @doc_status.setter
    def doc_status(self, doc_status):
        """Sets the doc_status of this AIForgedViewModelsWorkFlowSummary.


        :param doc_status: The doc_status of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: OneOfAIForgedViewModelsWorkFlowSummaryDocStatus
        """

        self._doc_status = doc_status

    @property
    def doc_usage(self):
        """Gets the doc_usage of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The doc_usage of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWorkFlowSummaryDocUsage
        """
        return self._doc_usage

    @doc_usage.setter
    def doc_usage(self, doc_usage):
        """Sets the doc_usage of this AIForgedViewModelsWorkFlowSummary.


        :param doc_usage: The doc_usage of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: OneOfAIForgedViewModelsWorkFlowSummaryDocUsage
        """

        self._doc_usage = doc_usage

    @property
    def doc_class_id(self):
        """Gets the doc_class_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The doc_class_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: int
        """
        return self._doc_class_id

    @doc_class_id.setter
    def doc_class_id(self, doc_class_id):
        """Sets the doc_class_id of this AIForgedViewModelsWorkFlowSummary.


        :param doc_class_id: The doc_class_id of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: int
        """

        self._doc_class_id = doc_class_id

    @property
    def doc_class_name(self):
        """Gets the doc_class_name of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The doc_class_name of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: str
        """
        return self._doc_class_name

    @doc_class_name.setter
    def doc_class_name(self, doc_class_name):
        """Sets the doc_class_name of this AIForgedViewModelsWorkFlowSummary.


        :param doc_class_name: The doc_class_name of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: str
        """

        self._doc_class_name = doc_class_name

    @property
    def action(self):
        """Gets the action of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The action of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: AIForgedDALWorkItemAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AIForgedViewModelsWorkFlowSummary.


        :param action: The action of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: AIForgedDALWorkItemAction
        """

        self._action = action

    @property
    def type(self):
        """Gets the type of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The type of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: AIForgedDALWorkItemType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedViewModelsWorkFlowSummary.


        :param type: The type of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: AIForgedDALWorkItemType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The status of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: AIForgedDALWorkItemStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsWorkFlowSummary.


        :param status: The status of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: AIForgedDALWorkItemStatus
        """

        self._status = status

    @property
    def method(self):
        """Gets the method of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The method of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWorkFlowSummaryMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this AIForgedViewModelsWorkFlowSummary.


        :param method: The method of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: OneOfAIForgedViewModelsWorkFlowSummaryMethod
        """

        self._method = method

    @property
    def dt(self):
        """Gets the dt of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The dt of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this AIForgedViewModelsWorkFlowSummary.


        :param dt: The dt of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def duration(self):
        """Gets the duration of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The duration of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this AIForgedViewModelsWorkFlowSummary.


        :param duration: The duration of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def active_duration(self):
        """Gets the active_duration of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The active_duration of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: str
        """
        return self._active_duration

    @active_duration.setter
    def active_duration(self, active_duration):
        """Sets the active_duration of this AIForgedViewModelsWorkFlowSummary.


        :param active_duration: The active_duration of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: str
        """

        self._active_duration = active_duration

    @property
    def count(self):
        """Gets the count of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501


        :return: The count of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AIForgedViewModelsWorkFlowSummary.


        :param count: The count of this AIForgedViewModelsWorkFlowSummary.  # noqa: E501
        :type: int
        """

        self._count = count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsWorkFlowSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsWorkFlowSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
