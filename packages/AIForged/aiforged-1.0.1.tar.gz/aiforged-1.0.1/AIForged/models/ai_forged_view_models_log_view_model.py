# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsLogViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'OneOfAIForgedViewModelsLogViewModelType',
        'project_id': 'int',
        'service_id': 'int',
        'document_id': 'int',
        'def_id': 'int',
        'parameter_id': 'int',
        'verification_id': 'int',
        'work_item_id': 'int',
        'transaction_id': 'int',
        'event_id': 'int',
        'user_id': 'str',
        'dtc': 'datetime',
        'comment': 'str',
        'stack_trace': 'str',
        'error_message': 'str',
        'page': 'str',
        'project': 'OneOfAIForgedViewModelsLogViewModelProject',
        'service': 'OneOfAIForgedViewModelsLogViewModelService',
        'document': 'OneOfAIForgedViewModelsLogViewModelDocument',
        '_def': 'OneOfAIForgedViewModelsLogViewModelDef',
        'parameter': 'OneOfAIForgedViewModelsLogViewModelParameter',
        'verification': 'OneOfAIForgedViewModelsLogViewModelVerification',
        'work_item': 'OneOfAIForgedViewModelsLogViewModelWorkItem',
        'transaction': 'OneOfAIForgedViewModelsLogViewModelTransaction',
        'event': 'OneOfAIForgedViewModelsLogViewModelEvent'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'project_id': 'projectId',
        'service_id': 'serviceId',
        'document_id': 'documentId',
        'def_id': 'defId',
        'parameter_id': 'parameterId',
        'verification_id': 'verificationId',
        'work_item_id': 'workItemId',
        'transaction_id': 'transactionId',
        'event_id': 'eventId',
        'user_id': 'userId',
        'dtc': 'dtc',
        'comment': 'comment',
        'stack_trace': 'stackTrace',
        'error_message': 'errorMessage',
        'page': 'page',
        'project': 'project',
        'service': 'service',
        'document': 'document',
        '_def': 'def',
        'parameter': 'parameter',
        'verification': 'verification',
        'work_item': 'workItem',
        'transaction': 'transaction',
        'event': 'event'
    }

    def __init__(self, id=None, type=None, project_id=None, service_id=None, document_id=None, def_id=None, parameter_id=None, verification_id=None, work_item_id=None, transaction_id=None, event_id=None, user_id=None, dtc=None, comment=None, stack_trace=None, error_message=None, page=None, project=None, service=None, document=None, _def=None, parameter=None, verification=None, work_item=None, transaction=None, event=None):  # noqa: E501
        """AIForgedViewModelsLogViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._project_id = None
        self._service_id = None
        self._document_id = None
        self._def_id = None
        self._parameter_id = None
        self._verification_id = None
        self._work_item_id = None
        self._transaction_id = None
        self._event_id = None
        self._user_id = None
        self._dtc = None
        self._comment = None
        self._stack_trace = None
        self._error_message = None
        self._page = None
        self._project = None
        self._service = None
        self._document = None
        self.__def = None
        self._parameter = None
        self._verification = None
        self._work_item = None
        self._transaction = None
        self._event = None
        self.discriminator = None
        self.id = id
        if type is not None:
            self.type = type
        if project_id is not None:
            self.project_id = project_id
        if service_id is not None:
            self.service_id = service_id
        if document_id is not None:
            self.document_id = document_id
        if def_id is not None:
            self.def_id = def_id
        if parameter_id is not None:
            self.parameter_id = parameter_id
        if verification_id is not None:
            self.verification_id = verification_id
        if work_item_id is not None:
            self.work_item_id = work_item_id
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if event_id is not None:
            self.event_id = event_id
        if user_id is not None:
            self.user_id = user_id
        if dtc is not None:
            self.dtc = dtc
        if comment is not None:
            self.comment = comment
        if stack_trace is not None:
            self.stack_trace = stack_trace
        if error_message is not None:
            self.error_message = error_message
        if page is not None:
            self.page = page
        if project is not None:
            self.project = project
        if service is not None:
            self.service = service
        if document is not None:
            self.document = document
        if _def is not None:
            self._def = _def
        if parameter is not None:
            self.parameter = parameter
        if verification is not None:
            self.verification = verification
        if work_item is not None:
            self.work_item = work_item
        if transaction is not None:
            self.transaction = transaction
        if event is not None:
            self.event = event

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsLogViewModel.


        :param id: The id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The type of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsLogViewModelType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedViewModelsLogViewModel.


        :param type: The type of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsLogViewModelType
        """

        self._type = type

    @property
    def project_id(self):
        """Gets the project_id of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The project_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AIForgedViewModelsLogViewModel.


        :param project_id: The project_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def service_id(self):
        """Gets the service_id of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The service_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AIForgedViewModelsLogViewModel.


        :param service_id: The service_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def document_id(self):
        """Gets the document_id of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The document_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AIForgedViewModelsLogViewModel.


        :param document_id: The document_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def def_id(self):
        """Gets the def_id of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The def_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: int
        """
        return self._def_id

    @def_id.setter
    def def_id(self, def_id):
        """Sets the def_id of this AIForgedViewModelsLogViewModel.


        :param def_id: The def_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: int
        """

        self._def_id = def_id

    @property
    def parameter_id(self):
        """Gets the parameter_id of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The parameter_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: int
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id):
        """Sets the parameter_id of this AIForgedViewModelsLogViewModel.


        :param parameter_id: The parameter_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: int
        """

        self._parameter_id = parameter_id

    @property
    def verification_id(self):
        """Gets the verification_id of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The verification_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: int
        """
        return self._verification_id

    @verification_id.setter
    def verification_id(self, verification_id):
        """Sets the verification_id of this AIForgedViewModelsLogViewModel.


        :param verification_id: The verification_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: int
        """

        self._verification_id = verification_id

    @property
    def work_item_id(self):
        """Gets the work_item_id of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The work_item_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: int
        """
        return self._work_item_id

    @work_item_id.setter
    def work_item_id(self, work_item_id):
        """Sets the work_item_id of this AIForgedViewModelsLogViewModel.


        :param work_item_id: The work_item_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: int
        """

        self._work_item_id = work_item_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The transaction_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this AIForgedViewModelsLogViewModel.


        :param transaction_id: The transaction_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: int
        """

        self._transaction_id = transaction_id

    @property
    def event_id(self):
        """Gets the event_id of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The event_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this AIForgedViewModelsLogViewModel.


        :param event_id: The event_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: int
        """

        self._event_id = event_id

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The user_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedViewModelsLogViewModel.


        :param user_id: The user_id of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The dtc of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedViewModelsLogViewModel.


        :param dtc: The dtc of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def comment(self):
        """Gets the comment of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The comment of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AIForgedViewModelsLogViewModel.


        :param comment: The comment of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def stack_trace(self):
        """Gets the stack_trace of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The stack_trace of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: str
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace):
        """Sets the stack_trace of this AIForgedViewModelsLogViewModel.


        :param stack_trace: The stack_trace of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: str
        """

        self._stack_trace = stack_trace

    @property
    def error_message(self):
        """Gets the error_message of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The error_message of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this AIForgedViewModelsLogViewModel.


        :param error_message: The error_message of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def page(self):
        """Gets the page of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The page of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: str
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this AIForgedViewModelsLogViewModel.


        :param page: The page of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: str
        """

        self._page = page

    @property
    def project(self):
        """Gets the project of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The project of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsLogViewModelProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AIForgedViewModelsLogViewModel.


        :param project: The project of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsLogViewModelProject
        """

        self._project = project

    @property
    def service(self):
        """Gets the service of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The service of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsLogViewModelService
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this AIForgedViewModelsLogViewModel.


        :param service: The service of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsLogViewModelService
        """

        self._service = service

    @property
    def document(self):
        """Gets the document of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The document of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsLogViewModelDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this AIForgedViewModelsLogViewModel.


        :param document: The document of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsLogViewModelDocument
        """

        self._document = document

    @property
    def _def(self):
        """Gets the _def of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The _def of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsLogViewModelDef
        """
        return self.__def

    @_def.setter
    def _def(self, _def):
        """Sets the _def of this AIForgedViewModelsLogViewModel.


        :param _def: The _def of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsLogViewModelDef
        """

        self.__def = _def

    @property
    def parameter(self):
        """Gets the parameter of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The parameter of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsLogViewModelParameter
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this AIForgedViewModelsLogViewModel.


        :param parameter: The parameter of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsLogViewModelParameter
        """

        self._parameter = parameter

    @property
    def verification(self):
        """Gets the verification of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The verification of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsLogViewModelVerification
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this AIForgedViewModelsLogViewModel.


        :param verification: The verification of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsLogViewModelVerification
        """

        self._verification = verification

    @property
    def work_item(self):
        """Gets the work_item of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The work_item of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsLogViewModelWorkItem
        """
        return self._work_item

    @work_item.setter
    def work_item(self, work_item):
        """Sets the work_item of this AIForgedViewModelsLogViewModel.


        :param work_item: The work_item of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsLogViewModelWorkItem
        """

        self._work_item = work_item

    @property
    def transaction(self):
        """Gets the transaction of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The transaction of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsLogViewModelTransaction
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this AIForgedViewModelsLogViewModel.


        :param transaction: The transaction of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsLogViewModelTransaction
        """

        self._transaction = transaction

    @property
    def event(self):
        """Gets the event of this AIForgedViewModelsLogViewModel.  # noqa: E501


        :return: The event of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsLogViewModelEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this AIForgedViewModelsLogViewModel.


        :param event: The event of this AIForgedViewModelsLogViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsLogViewModelEvent
        """

        self._event = event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsLogViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsLogViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
