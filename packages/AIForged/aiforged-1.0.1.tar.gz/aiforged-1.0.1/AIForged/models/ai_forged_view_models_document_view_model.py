# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsDocumentViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'str',
        'project_id': 'int',
        'service_id': 'int',
        'status': 'AIForgedDALDocumentStatus',
        'usage': 'AIForgedDALUsageType',
        'class_id': 'int',
        'content_type': 'str',
        'filename': 'str',
        'file_type': 'str',
        'dtc': 'datetime',
        'dtm': 'datetime',
        'document_id': 'str',
        'external_id': 'str',
        'master_id': 'int',
        'result': 'str',
        'result_id': 'str',
        'result_index': 'int',
        'comment': 'str',
        'availability': 'OneOfAIForgedViewModelsDocumentViewModelAvailability',
        'result_parameters': 'list[AIForgedViewModelsDocumentParameterViewModel]',
        'data': 'list[AIForgedViewModelsDocumentDataViewModel]',
        'documents': 'list[AIForgedViewModelsDocumentViewModel]',
        'info': 'list[str]',
        'latest_child_status': 'OneOfAIForgedViewModelsDocumentViewModelLatestChildStatus',
        'origin_id': 'int',
        'can_verify': 'bool',
        'can_classify': 'bool',
        'can_train': 'bool',
        'trained': 'bool',
        'linked_docs_count': 'int',
        'training_field_count': 'int',
        'trained_parameters_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'project_id': 'projectId',
        'service_id': 'serviceId',
        'status': 'status',
        'usage': 'usage',
        'class_id': 'classId',
        'content_type': 'contentType',
        'filename': 'filename',
        'file_type': 'fileType',
        'dtc': 'dtc',
        'dtm': 'dtm',
        'document_id': 'documentId',
        'external_id': 'externalId',
        'master_id': 'masterId',
        'result': 'result',
        'result_id': 'resultId',
        'result_index': 'resultIndex',
        'comment': 'comment',
        'availability': 'availability',
        'result_parameters': 'resultParameters',
        'data': 'data',
        'documents': 'documents',
        'info': 'info',
        'latest_child_status': 'latestChildStatus',
        'origin_id': 'originId',
        'can_verify': 'canVerify',
        'can_classify': 'canClassify',
        'can_train': 'canTrain',
        'trained': 'trained',
        'linked_docs_count': 'linkedDocsCount',
        'training_field_count': 'trainingFieldCount',
        'trained_parameters_count': 'trainedParametersCount'
    }

    def __init__(self, id=None, user_id=None, project_id=None, service_id=None, status=None, usage=None, class_id=None, content_type=None, filename=None, file_type=None, dtc=None, dtm=None, document_id=None, external_id=None, master_id=None, result=None, result_id=None, result_index=None, comment=None, availability=None, result_parameters=None, data=None, documents=None, info=None, latest_child_status=None, origin_id=None, can_verify=None, can_classify=None, can_train=None, trained=None, linked_docs_count=None, training_field_count=None, trained_parameters_count=None):  # noqa: E501
        """AIForgedViewModelsDocumentViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._project_id = None
        self._service_id = None
        self._status = None
        self._usage = None
        self._class_id = None
        self._content_type = None
        self._filename = None
        self._file_type = None
        self._dtc = None
        self._dtm = None
        self._document_id = None
        self._external_id = None
        self._master_id = None
        self._result = None
        self._result_id = None
        self._result_index = None
        self._comment = None
        self._availability = None
        self._result_parameters = None
        self._data = None
        self._documents = None
        self._info = None
        self._latest_child_status = None
        self._origin_id = None
        self._can_verify = None
        self._can_classify = None
        self._can_train = None
        self._trained = None
        self._linked_docs_count = None
        self._training_field_count = None
        self._trained_parameters_count = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if project_id is not None:
            self.project_id = project_id
        if service_id is not None:
            self.service_id = service_id
        if status is not None:
            self.status = status
        if usage is not None:
            self.usage = usage
        if class_id is not None:
            self.class_id = class_id
        if content_type is not None:
            self.content_type = content_type
        if filename is not None:
            self.filename = filename
        if file_type is not None:
            self.file_type = file_type
        if dtc is not None:
            self.dtc = dtc
        if dtm is not None:
            self.dtm = dtm
        if document_id is not None:
            self.document_id = document_id
        if external_id is not None:
            self.external_id = external_id
        if master_id is not None:
            self.master_id = master_id
        if result is not None:
            self.result = result
        if result_id is not None:
            self.result_id = result_id
        if result_index is not None:
            self.result_index = result_index
        if comment is not None:
            self.comment = comment
        if availability is not None:
            self.availability = availability
        if result_parameters is not None:
            self.result_parameters = result_parameters
        if data is not None:
            self.data = data
        if documents is not None:
            self.documents = documents
        if info is not None:
            self.info = info
        if latest_child_status is not None:
            self.latest_child_status = latest_child_status
        if origin_id is not None:
            self.origin_id = origin_id
        if can_verify is not None:
            self.can_verify = can_verify
        if can_classify is not None:
            self.can_classify = can_classify
        if can_train is not None:
            self.can_train = can_train
        if trained is not None:
            self.trained = trained
        if linked_docs_count is not None:
            self.linked_docs_count = linked_docs_count
        if training_field_count is not None:
            self.training_field_count = training_field_count
        if trained_parameters_count is not None:
            self.trained_parameters_count = trained_parameters_count

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsDocumentViewModel.


        :param id: The id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The user_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedViewModelsDocumentViewModel.


        :param user_id: The user_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def project_id(self):
        """Gets the project_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The project_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AIForgedViewModelsDocumentViewModel.


        :param project_id: The project_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def service_id(self):
        """Gets the service_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The service_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AIForgedViewModelsDocumentViewModel.


        :param service_id: The service_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The status of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: AIForgedDALDocumentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsDocumentViewModel.


        :param status: The status of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: AIForgedDALDocumentStatus
        """

        self._status = status

    @property
    def usage(self):
        """Gets the usage of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The usage of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: AIForgedDALUsageType
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this AIForgedViewModelsDocumentViewModel.


        :param usage: The usage of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: AIForgedDALUsageType
        """

        self._usage = usage

    @property
    def class_id(self):
        """Gets the class_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The class_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: int
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this AIForgedViewModelsDocumentViewModel.


        :param class_id: The class_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: int
        """

        self._class_id = class_id

    @property
    def content_type(self):
        """Gets the content_type of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The content_type of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AIForgedViewModelsDocumentViewModel.


        :param content_type: The content_type of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def filename(self):
        """Gets the filename of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The filename of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this AIForgedViewModelsDocumentViewModel.


        :param filename: The filename of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def file_type(self):
        """Gets the file_type of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The file_type of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this AIForgedViewModelsDocumentViewModel.


        :param file_type: The file_type of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: str
        """

        self._file_type = file_type

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The dtc of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedViewModelsDocumentViewModel.


        :param dtc: The dtc of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def dtm(self):
        """Gets the dtm of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The dtm of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtm

    @dtm.setter
    def dtm(self, dtm):
        """Sets the dtm of this AIForgedViewModelsDocumentViewModel.


        :param dtm: The dtm of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtm = dtm

    @property
    def document_id(self):
        """Gets the document_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The document_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AIForgedViewModelsDocumentViewModel.


        :param document_id: The document_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def external_id(self):
        """Gets the external_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The external_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AIForgedViewModelsDocumentViewModel.


        :param external_id: The external_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def master_id(self):
        """Gets the master_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The master_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: int
        """
        return self._master_id

    @master_id.setter
    def master_id(self, master_id):
        """Sets the master_id of this AIForgedViewModelsDocumentViewModel.


        :param master_id: The master_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: int
        """

        self._master_id = master_id

    @property
    def result(self):
        """Gets the result of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The result of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AIForgedViewModelsDocumentViewModel.


        :param result: The result of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def result_id(self):
        """Gets the result_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The result_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._result_id

    @result_id.setter
    def result_id(self, result_id):
        """Sets the result_id of this AIForgedViewModelsDocumentViewModel.


        :param result_id: The result_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: str
        """

        self._result_id = result_id

    @property
    def result_index(self):
        """Gets the result_index of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The result_index of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: int
        """
        return self._result_index

    @result_index.setter
    def result_index(self, result_index):
        """Sets the result_index of this AIForgedViewModelsDocumentViewModel.


        :param result_index: The result_index of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: int
        """

        self._result_index = result_index

    @property
    def comment(self):
        """Gets the comment of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The comment of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AIForgedViewModelsDocumentViewModel.


        :param comment: The comment of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def availability(self):
        """Gets the availability of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The availability of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsDocumentViewModelAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AIForgedViewModelsDocumentViewModel.


        :param availability: The availability of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsDocumentViewModelAvailability
        """

        self._availability = availability

    @property
    def result_parameters(self):
        """Gets the result_parameters of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The result_parameters of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: list[AIForgedViewModelsDocumentParameterViewModel]
        """
        return self._result_parameters

    @result_parameters.setter
    def result_parameters(self, result_parameters):
        """Sets the result_parameters of this AIForgedViewModelsDocumentViewModel.


        :param result_parameters: The result_parameters of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: list[AIForgedViewModelsDocumentParameterViewModel]
        """

        self._result_parameters = result_parameters

    @property
    def data(self):
        """Gets the data of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The data of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: list[AIForgedViewModelsDocumentDataViewModel]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AIForgedViewModelsDocumentViewModel.


        :param data: The data of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: list[AIForgedViewModelsDocumentDataViewModel]
        """

        self._data = data

    @property
    def documents(self):
        """Gets the documents of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The documents of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: list[AIForgedViewModelsDocumentViewModel]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this AIForgedViewModelsDocumentViewModel.


        :param documents: The documents of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: list[AIForgedViewModelsDocumentViewModel]
        """

        self._documents = documents

    @property
    def info(self):
        """Gets the info of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The info of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AIForgedViewModelsDocumentViewModel.


        :param info: The info of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: list[str]
        """

        self._info = info

    @property
    def latest_child_status(self):
        """Gets the latest_child_status of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The latest_child_status of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsDocumentViewModelLatestChildStatus
        """
        return self._latest_child_status

    @latest_child_status.setter
    def latest_child_status(self, latest_child_status):
        """Sets the latest_child_status of this AIForgedViewModelsDocumentViewModel.


        :param latest_child_status: The latest_child_status of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsDocumentViewModelLatestChildStatus
        """

        self._latest_child_status = latest_child_status

    @property
    def origin_id(self):
        """Gets the origin_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The origin_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: int
        """
        return self._origin_id

    @origin_id.setter
    def origin_id(self, origin_id):
        """Sets the origin_id of this AIForgedViewModelsDocumentViewModel.


        :param origin_id: The origin_id of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: int
        """

        self._origin_id = origin_id

    @property
    def can_verify(self):
        """Gets the can_verify of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The can_verify of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._can_verify

    @can_verify.setter
    def can_verify(self, can_verify):
        """Sets the can_verify of this AIForgedViewModelsDocumentViewModel.


        :param can_verify: The can_verify of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: bool
        """

        self._can_verify = can_verify

    @property
    def can_classify(self):
        """Gets the can_classify of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The can_classify of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._can_classify

    @can_classify.setter
    def can_classify(self, can_classify):
        """Sets the can_classify of this AIForgedViewModelsDocumentViewModel.


        :param can_classify: The can_classify of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: bool
        """

        self._can_classify = can_classify

    @property
    def can_train(self):
        """Gets the can_train of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The can_train of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._can_train

    @can_train.setter
    def can_train(self, can_train):
        """Sets the can_train of this AIForgedViewModelsDocumentViewModel.


        :param can_train: The can_train of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: bool
        """

        self._can_train = can_train

    @property
    def trained(self):
        """Gets the trained of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The trained of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._trained

    @trained.setter
    def trained(self, trained):
        """Sets the trained of this AIForgedViewModelsDocumentViewModel.


        :param trained: The trained of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: bool
        """

        self._trained = trained

    @property
    def linked_docs_count(self):
        """Gets the linked_docs_count of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The linked_docs_count of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: int
        """
        return self._linked_docs_count

    @linked_docs_count.setter
    def linked_docs_count(self, linked_docs_count):
        """Sets the linked_docs_count of this AIForgedViewModelsDocumentViewModel.


        :param linked_docs_count: The linked_docs_count of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: int
        """

        self._linked_docs_count = linked_docs_count

    @property
    def training_field_count(self):
        """Gets the training_field_count of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The training_field_count of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: int
        """
        return self._training_field_count

    @training_field_count.setter
    def training_field_count(self, training_field_count):
        """Sets the training_field_count of this AIForgedViewModelsDocumentViewModel.


        :param training_field_count: The training_field_count of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: int
        """

        self._training_field_count = training_field_count

    @property
    def trained_parameters_count(self):
        """Gets the trained_parameters_count of this AIForgedViewModelsDocumentViewModel.  # noqa: E501


        :return: The trained_parameters_count of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :rtype: int
        """
        return self._trained_parameters_count

    @trained_parameters_count.setter
    def trained_parameters_count(self, trained_parameters_count):
        """Sets the trained_parameters_count of this AIForgedViewModelsDocumentViewModel.


        :param trained_parameters_count: The trained_parameters_count of this AIForgedViewModelsDocumentViewModel.  # noqa: E501
        :type: int
        """

        self._trained_parameters_count = trained_parameters_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsDocumentViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsDocumentViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
