# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedProcessorBackgoundWorkItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conn_id': 'str',
        'user_id': 'str',
        'id': 'str',
        'info': 'str',
        'exception': 'str',
        'progress': 'float',
        'start': 'datetime',
        'end': 'datetime',
        'last_msg_dt': 'datetime'
    }

    attribute_map = {
        'conn_id': 'connId',
        'user_id': 'userId',
        'id': 'id',
        'info': 'info',
        'exception': 'exception',
        'progress': 'progress',
        'start': 'start',
        'end': 'end',
        'last_msg_dt': 'lastMsgDT'
    }

    def __init__(self, conn_id=None, user_id=None, id=None, info=None, exception=None, progress=None, start=None, end=None, last_msg_dt=None):  # noqa: E501
        """AIForgedProcessorBackgoundWorkItem - a model defined in Swagger"""  # noqa: E501
        self._conn_id = None
        self._user_id = None
        self._id = None
        self._info = None
        self._exception = None
        self._progress = None
        self._start = None
        self._end = None
        self._last_msg_dt = None
        self.discriminator = None
        if conn_id is not None:
            self.conn_id = conn_id
        if user_id is not None:
            self.user_id = user_id
        if id is not None:
            self.id = id
        if info is not None:
            self.info = info
        if exception is not None:
            self.exception = exception
        if progress is not None:
            self.progress = progress
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if last_msg_dt is not None:
            self.last_msg_dt = last_msg_dt

    @property
    def conn_id(self):
        """Gets the conn_id of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501


        :return: The conn_id of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :rtype: str
        """
        return self._conn_id

    @conn_id.setter
    def conn_id(self, conn_id):
        """Sets the conn_id of this AIForgedProcessorBackgoundWorkItem.


        :param conn_id: The conn_id of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :type: str
        """

        self._conn_id = conn_id

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501


        :return: The user_id of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedProcessorBackgoundWorkItem.


        :param user_id: The user_id of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def id(self):
        """Gets the id of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501


        :return: The id of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedProcessorBackgoundWorkItem.


        :param id: The id of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def info(self):
        """Gets the info of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501


        :return: The info of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AIForgedProcessorBackgoundWorkItem.


        :param info: The info of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def exception(self):
        """Gets the exception of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501


        :return: The exception of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :rtype: str
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this AIForgedProcessorBackgoundWorkItem.


        :param exception: The exception of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :type: str
        """

        self._exception = exception

    @property
    def progress(self):
        """Gets the progress of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501


        :return: The progress of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this AIForgedProcessorBackgoundWorkItem.


        :param progress: The progress of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def start(self):
        """Gets the start of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501


        :return: The start of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this AIForgedProcessorBackgoundWorkItem.


        :param start: The start of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501


        :return: The end of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this AIForgedProcessorBackgoundWorkItem.


        :param end: The end of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def last_msg_dt(self):
        """Gets the last_msg_dt of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501


        :return: The last_msg_dt of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :rtype: datetime
        """
        return self._last_msg_dt

    @last_msg_dt.setter
    def last_msg_dt(self, last_msg_dt):
        """Sets the last_msg_dt of this AIForgedProcessorBackgoundWorkItem.


        :param last_msg_dt: The last_msg_dt of this AIForgedProcessorBackgoundWorkItem.  # noqa: E501
        :type: datetime
        """

        self._last_msg_dt = last_msg_dt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedProcessorBackgoundWorkItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedProcessorBackgoundWorkItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
