# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_activate_account(self, body, **kwargs):  # noqa: E501
        """Allow new user to Activate user account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_activate_account(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserActivateViewModel body: (required)
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_activate_account_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.account_activate_account_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def account_activate_account_with_http_info(self, body, **kwargs):  # noqa: E501
        """Allow new user to Activate user account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_activate_account_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserActivateViewModel body: (required)
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_activate_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `account_activate_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/ActivateAccount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_activate_user(self, **kwargs):  # noqa: E501
        """Allow admin to Activate another user account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_activate_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_activate_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_activate_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_activate_user_with_http_info(self, **kwargs):  # noqa: E501
        """Allow admin to Activate another user account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_activate_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_activate_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/ActivateUser', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_block_user(self, **kwargs):  # noqa: E501
        """Unblock a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_block_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_block_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_block_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_block_user_with_http_info(self, **kwargs):  # noqa: E501
        """Unblock a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_block_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_block_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/BlockUser', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_create(self, body, **kwargs):  # noqa: E501
        """Create a new user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserEditViewModel body: (required)
        :param str x_api_version:
        :return: AIForgedViewModelsUserViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.account_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def account_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserEditViewModel body: (required)
        :param str x_api_version:
        :return: AIForgedViewModelsUserViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `account_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/Create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsUserViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_delete(self, **kwargs):  # noqa: E501
        """Delete a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param str x_api_version:
        :return: AIForgedViewModelsUserViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Delete a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param str x_api_version:
        :return: AIForgedViewModelsUserViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/Delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsUserViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_delete_user_login_provider(self, **kwargs):  # noqa: E501
        """Get list of current user login providers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_delete_user_login_provider(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MicrosoftAspNetCoreIdentityUserLoginInfo body:
        :param str x_api_version:
        :param str user_id:
        :return: MicrosoftAspNetCoreIdentityUserLoginInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_delete_user_login_provider_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_delete_user_login_provider_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_delete_user_login_provider_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of current user login providers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_delete_user_login_provider_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MicrosoftAspNetCoreIdentityUserLoginInfo body:
        :param str x_api_version:
        :param str user_id:
        :return: MicrosoftAspNetCoreIdentityUserLoginInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_delete_user_login_provider" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/DeleteUserLoginProvider', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MicrosoftAspNetCoreIdentityUserLoginInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_disable2_fa(self, **kwargs):  # noqa: E501
        """Disable 2FA  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_disable2_fa(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_disable2_fa_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_disable2_fa_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_disable2_fa_with_http_info(self, **kwargs):  # noqa: E501
        """Disable 2FA  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_disable2_fa_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_disable2_fa" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/Disable2FA', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_enable2_fa(self, **kwargs):  # noqa: E501
        """Enable 2FA  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_enable2_fa(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str provider:
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_enable2_fa_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_enable2_fa_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_enable2_fa_with_http_info(self, **kwargs):  # noqa: E501
        """Enable 2FA  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_enable2_fa_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str provider:
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'provider', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_enable2_fa" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'provider' in params:
            query_params.append(('provider', params['provider']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/Enable2FA', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_find(self, **kwargs):  # noqa: E501
        """Find users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_find(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter:
        :param int group_id:
        :param str x_api_version:
        :return: list[AIForgedViewModelsUserViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_find_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_find_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_find_with_http_info(self, **kwargs):  # noqa: E501
        """Find users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_find_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter:
        :param int group_id:
        :param str x_api_version:
        :return: list[AIForgedViewModelsUserViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'group_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_find" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/Find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsUserViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_generate_authenticator_key(self, **kwargs):  # noqa: E501
        """Enabled and Generate Authenticator Key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_generate_authenticator_key(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_generate_authenticator_key_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_generate_authenticator_key_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_generate_authenticator_key_with_http_info(self, **kwargs):  # noqa: E501
        """Enabled and Generate Authenticator Key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_generate_authenticator_key_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_generate_authenticator_key" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/GenerateAuthenticator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_get2_fa_providers(self, **kwargs):  # noqa: E501
        """Get 2FAProviders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get2_fa_providers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_get2_fa_providers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_get2_fa_providers_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_get2_fa_providers_with_http_info(self, **kwargs):  # noqa: E501
        """Get 2FAProviders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get2_fa_providers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get2_fa_providers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/Get2FAProviders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_get_all(self, **kwargs):  # noqa: E501
        """Get all users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id:
        :param str x_api_version:
        :return: list[AIForgedViewModelsUserViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_get_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_get_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_get_all_with_http_info(self, **kwargs):  # noqa: E501
        """Get all users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id:
        :param str x_api_version:
        :return: list[AIForgedViewModelsUserViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/GetAll', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsUserViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_get_api_key(self, **kwargs):  # noqa: E501
        """Get the API key for a user  # noqa: E501

        This operation gets the API key for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_api_key(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user API key
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_get_api_key_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_get_api_key_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_get_api_key_with_http_info(self, **kwargs):  # noqa: E501
        """Get the API key for a user  # noqa: E501

        This operation gets the API key for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_api_key_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user API key
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get_api_key" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/GetAPIKey', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_get_authenticator_url(self, **kwargs):  # noqa: E501
        """Get Authenticator Url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_authenticator_url(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_get_authenticator_url_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_get_authenticator_url_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_get_authenticator_url_with_http_info(self, **kwargs):  # noqa: E501
        """Get Authenticator Url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_authenticator_url_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get_authenticator_url" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/GetAuthenticatorUrl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_get_by_id(self, **kwargs):  # noqa: E501
        """Get user by Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_by_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid: The user id
        :param str x_api_version:
        :return: AIForgedViewModelsUserViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_get_by_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_get_by_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_get_by_id_with_http_info(self, **kwargs):  # noqa: E501
        """Get user by Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_by_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid: The user id
        :param str x_api_version:
        :return: AIForgedViewModelsUserViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'userid' in params:
            query_params.append(('userid', params['userid']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/GetById', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsUserViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_get_by_user_name(self, **kwargs):  # noqa: E501
        """Get user info by username  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_by_user_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name:
        :param str x_api_version:
        :return: AIForgedViewModelsUserViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_get_by_user_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_get_by_user_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_get_by_user_name_with_http_info(self, **kwargs):  # noqa: E501
        """Get user info by username  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_by_user_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name:
        :param str x_api_version:
        :return: AIForgedViewModelsUserViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_name', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get_by_user_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_name' in params:
            query_params.append(('userName', params['user_name']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/GetByUserName', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsUserViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_get_current_user(self, **kwargs):  # noqa: E501
        """Get the current logged in user  # noqa: E501

        This operation gets info for the current logged in user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_current_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: AIForgedViewModelsUserViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_get_current_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_get_current_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_get_current_user_with_http_info(self, **kwargs):  # noqa: E501
        """Get the current logged in user  # noqa: E501

        This operation gets info for the current logged in user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_current_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: AIForgedViewModelsUserViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get_current_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/GetCurrentUser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsUserViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_get_paged(self, **kwargs):  # noqa: E501
        """Get users paged  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_paged(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter:
        :param int page:
        :param int page_size:
        :param int group_id:
        :param str x_api_version:
        :return: list[AIForgedViewModelsUserViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_get_paged_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_get_paged_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_get_paged_with_http_info(self, **kwargs):  # noqa: E501
        """Get users paged  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_paged_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter:
        :param int page:
        :param int page_size:
        :param int group_id:
        :param str x_api_version:
        :return: list[AIForgedViewModelsUserViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'page', 'page_size', 'group_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get_paged" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/GetPaged', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsUserViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_get_user_count(self, **kwargs):  # noqa: E501
        """Get count of users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_user_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter:
        :param int group_id:
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_get_user_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_get_user_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_get_user_count_with_http_info(self, **kwargs):  # noqa: E501
        """Get count of users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_user_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter:
        :param int group_id:
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'group_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get_user_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/GetUserCount', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_get_user_login_providers(self, **kwargs):  # noqa: E501
        """Get list of current user login providers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_user_login_providers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: list[MicrosoftAspNetCoreIdentityUserLoginInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_get_user_login_providers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_get_user_login_providers_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_get_user_login_providers_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of current user login providers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_user_login_providers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: list[MicrosoftAspNetCoreIdentityUserLoginInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get_user_login_providers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/GetUserLoginProviders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MicrosoftAspNetCoreIdentityUserLoginInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_group_create(self, body, **kwargs):  # noqa: E501
        """Create a new user int a group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_group_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserEditViewModel body: New user info (required)
        :param str x_api_version:
        :param str user_id: The user id
        :param int role_id:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_group_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.account_group_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def account_group_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new user int a group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_group_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserEditViewModel body: New user info (required)
        :param str x_api_version:
        :param str user_id: The user id
        :param int role_id:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'user_id', 'role_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_group_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `account_group_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'role_id' in params:
            query_params.append(('roleId', params['role_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/GroupCreate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_logout(self, **kwargs):  # noqa: E501
        """Log out the current user  # noqa: E501

        This operation logs the current user out  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_logout(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_logout_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_logout_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_logout_with_http_info(self, **kwargs):  # noqa: E501
        """Log out the current user  # noqa: E501

        This operation logs the current user out  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_logout_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_logout" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/Logout', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_password_reset(self, body, **kwargs):  # noqa: E501
        """Reset a password request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_password_reset(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserPasswordResetViewModel body: (required)
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_password_reset_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.account_password_reset_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def account_password_reset_with_http_info(self, body, **kwargs):  # noqa: E501
        """Reset a password request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_password_reset_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserPasswordResetViewModel body: (required)
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_password_reset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `account_password_reset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/PasswordReset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_password_reset_request(self, body, **kwargs):  # noqa: E501
        """Request a reset a user account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_password_reset_request(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserActivateViewModel body: (required)
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_password_reset_request_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.account_password_reset_request_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def account_password_reset_request_with_http_info(self, body, **kwargs):  # noqa: E501
        """Request a reset a user account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_password_reset_request_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserActivateViewModel body: (required)
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_password_reset_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `account_password_reset_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/PasswordResetRequest', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_register(self, body, **kwargs):  # noqa: E501
        """Register a new user account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_register(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserEditViewModel body: (required)
        :param str x_api_version:
        :return: AIForgedViewModelsUserViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_register_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.account_register_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def account_register_with_http_info(self, body, **kwargs):  # noqa: E501
        """Register a new user account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_register_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserEditViewModel body: (required)
        :param str x_api_version:
        :return: AIForgedViewModelsUserViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_register" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `account_register`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/Register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsUserViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_send_registration_mail(self, body, **kwargs):  # noqa: E501
        """Send a registration email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_send_registration_mail(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserActivateViewModel body: (required)
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_send_registration_mail_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.account_send_registration_mail_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def account_send_registration_mail_with_http_info(self, body, **kwargs):  # noqa: E501
        """Send a registration email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_send_registration_mail_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserActivateViewModel body: (required)
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_send_registration_mail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `account_send_registration_mail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/SendRegistrationMail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_unblock_user(self, **kwargs):  # noqa: E501
        """Unblock a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_unblock_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_unblock_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_unblock_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_unblock_user_with_http_info(self, **kwargs):  # noqa: E501
        """Unblock a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_unblock_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_unblock_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/UnblockUser', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_update(self, body, **kwargs):  # noqa: E501
        """Update a different users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserEditViewModel body: (required)
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.account_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def account_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update a different users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsUserEditViewModel body: (required)
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `account_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/Update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_verify2_fa_token(self, **kwargs):  # noqa: E501
        """Get Verify 2FA Token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_verify2_fa_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str provider:
        :param str token:
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_verify2_fa_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_verify2_fa_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_verify2_fa_token_with_http_info(self, **kwargs):  # noqa: E501
        """Get Verify 2FA Token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_verify2_fa_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str provider:
        :param str token:
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'provider', 'token', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_verify2_fa_token" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'provider' in params:
            query_params.append(('provider', params['provider']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/Verify2FAToken', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_verify_phone_no(self, **kwargs):  # noqa: E501
        """Verify Phone number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_verify_phone_no(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str phone_no:
        :param str token:
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_verify_phone_no_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_verify_phone_no_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_verify_phone_no_with_http_info(self, **kwargs):  # noqa: E501
        """Verify Phone number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_verify_phone_no_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str phone_no:
        :param str token:
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'phone_no', 'token', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_verify_phone_no" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'phone_no' in params:
            query_params.append(('phoneNo', params['phone_no']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Account/VerifyPhoneNo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
