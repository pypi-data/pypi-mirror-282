# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NotificationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def notification_bulk_flag_as_read(self, **kwargs):  # noqa: E501
        """Flag multiple notifications as read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_bulk_flag_as_read(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param datetime from_date:
        :param datetime to_date:
        :param bool include_already_read:
        :param str to:
        :param str subject:
        :param str body:
        :param str error:
        :param Type4 type:
        :param Status2 status:
        :param Area2 area:
        :param Evnt2 evnt:
        :param int page_no:
        :param int page_size:
        :param SortField2 sort_field:
        :param SortDirection6 sort_direction:
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_bulk_flag_as_read_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notification_bulk_flag_as_read_with_http_info(**kwargs)  # noqa: E501
            return data

    def notification_bulk_flag_as_read_with_http_info(self, **kwargs):  # noqa: E501
        """Flag multiple notifications as read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_bulk_flag_as_read_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param datetime from_date:
        :param datetime to_date:
        :param bool include_already_read:
        :param str to:
        :param str subject:
        :param str body:
        :param str error:
        :param Type4 type:
        :param Status2 status:
        :param Area2 area:
        :param Evnt2 evnt:
        :param int page_no:
        :param int page_size:
        :param SortField2 sort_field:
        :param SortDirection6 sort_direction:
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'from_date', 'to_date', 'include_already_read', 'to', 'subject', 'body', 'error', 'type', 'status', 'area', 'evnt', 'page_no', 'page_size', 'sort_field', 'sort_direction', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_bulk_flag_as_read" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'include_already_read' in params:
            query_params.append(('includeAlreadyRead', params['include_already_read']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'subject' in params:
            query_params.append(('subject', params['subject']))  # noqa: E501
        if 'body' in params:
            query_params.append(('body', params['body']))  # noqa: E501
        if 'error' in params:
            query_params.append(('error', params['error']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'area' in params:
            query_params.append(('area', params['area']))  # noqa: E501
        if 'evnt' in params:
            query_params.append(('evnt', params['evnt']))  # noqa: E501
        if 'page_no' in params:
            query_params.append(('pageNo', params['page_no']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Notification/BulkFlagAsRead', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_create(self, body, **kwargs):  # noqa: E501
        """Create Email Notifications for Support and Other  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsNotificationViewModel body: (required)
        :param str x_api_version:
        :return: AIForgedViewModelsNotificationViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.notification_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def notification_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Email Notifications for Support and Other  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsNotificationViewModel body: (required)
        :param str x_api_version:
        :return: AIForgedViewModelsNotificationViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `notification_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Notification/Create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsNotificationViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_delete(self, **kwargs):  # noqa: E501
        """Delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:
        :param str x_api_version:
        :return: AIForgedViewModelsNotificationViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notification_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def notification_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:
        :param str x_api_version:
        :return: AIForgedViewModelsNotificationViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Notification/Delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsNotificationViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_flag_as_read(self, **kwargs):  # noqa: E501
        """Flag Notification as read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_flag_as_read(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_flag_as_read_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notification_flag_as_read_with_http_info(**kwargs)  # noqa: E501
            return data

    def notification_flag_as_read_with_http_info(self, **kwargs):  # noqa: E501
        """Flag Notification as read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_flag_as_read_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_flag_as_read" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Notification/FlagAsRead', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_get(self, **kwargs):  # noqa: E501
        """Get Notifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param datetime from_date:
        :param datetime to_date:
        :param bool include_already_read:
        :param str to:
        :param str subject:
        :param str body:
        :param str error:
        :param Type3 type:
        :param Status1 status:
        :param Area1 area:
        :param Evnt1 evnt:
        :param int page_no:
        :param int page_size:
        :param SortField1 sort_field:
        :param SortDirection5 sort_direction:
        :param str x_api_version:
        :return: list[AIForgedViewModelsNotificationViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notification_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def notification_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Notifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param datetime from_date:
        :param datetime to_date:
        :param bool include_already_read:
        :param str to:
        :param str subject:
        :param str body:
        :param str error:
        :param Type3 type:
        :param Status1 status:
        :param Area1 area:
        :param Evnt1 evnt:
        :param int page_no:
        :param int page_size:
        :param SortField1 sort_field:
        :param SortDirection5 sort_direction:
        :param str x_api_version:
        :return: list[AIForgedViewModelsNotificationViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'from_date', 'to_date', 'include_already_read', 'to', 'subject', 'body', 'error', 'type', 'status', 'area', 'evnt', 'page_no', 'page_size', 'sort_field', 'sort_direction', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'include_already_read' in params:
            query_params.append(('includeAlreadyRead', params['include_already_read']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'subject' in params:
            query_params.append(('subject', params['subject']))  # noqa: E501
        if 'body' in params:
            query_params.append(('body', params['body']))  # noqa: E501
        if 'error' in params:
            query_params.append(('error', params['error']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'area' in params:
            query_params.append(('area', params['area']))  # noqa: E501
        if 'evnt' in params:
            query_params.append(('evnt', params['evnt']))  # noqa: E501
        if 'page_no' in params:
            query_params.append(('pageNo', params['page_no']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Notification/Get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsNotificationViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_get_attachment(self, **kwargs):  # noqa: E501
        """Get Attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_get_attachment(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:
        :param str x_api_version:
        :return: AIForgedViewModelsNotificationAttachmentViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_get_attachment_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notification_get_attachment_with_http_info(**kwargs)  # noqa: E501
            return data

    def notification_get_attachment_with_http_info(self, **kwargs):  # noqa: E501
        """Get Attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_get_attachment_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:
        :param str x_api_version:
        :return: AIForgedViewModelsNotificationAttachmentViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_get_attachment" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('Id', params['id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Notification/GetAttachment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsNotificationAttachmentViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_get_count(self, **kwargs):  # noqa: E501
        """Get Notifications Count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_get_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param datetime from_date:
        :param datetime to_date:
        :param bool include_already_read:
        :param str to:
        :param str subject:
        :param str body:
        :param str error:
        :param Type2 type:
        :param Status status:
        :param Area area:
        :param Evnt evnt:
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_get_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notification_get_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def notification_get_count_with_http_info(self, **kwargs):  # noqa: E501
        """Get Notifications Count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_get_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param datetime from_date:
        :param datetime to_date:
        :param bool include_already_read:
        :param str to:
        :param str subject:
        :param str body:
        :param str error:
        :param Type2 type:
        :param Status status:
        :param Area area:
        :param Evnt evnt:
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'from_date', 'to_date', 'include_already_read', 'to', 'subject', 'body', 'error', 'type', 'status', 'area', 'evnt', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_get_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'include_already_read' in params:
            query_params.append(('includeAlreadyRead', params['include_already_read']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'subject' in params:
            query_params.append(('subject', params['subject']))  # noqa: E501
        if 'body' in params:
            query_params.append(('body', params['body']))  # noqa: E501
        if 'error' in params:
            query_params.append(('error', params['error']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'area' in params:
            query_params.append(('area', params['area']))  # noqa: E501
        if 'evnt' in params:
            query_params.append(('evnt', params['evnt']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Notification/GetCount', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_get_preferences(self, **kwargs):  # noqa: E501
        """Get the current user notification preferences  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_get_preferences(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: AIForgedDALViewModelsNotificationPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_get_preferences_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notification_get_preferences_with_http_info(**kwargs)  # noqa: E501
            return data

    def notification_get_preferences_with_http_info(self, **kwargs):  # noqa: E501
        """Get the current user notification preferences  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_get_preferences_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: AIForgedDALViewModelsNotificationPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_get_preferences" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Notification/GetPreferences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedDALViewModelsNotificationPreferences',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_get_unread_count(self, **kwargs):  # noqa: E501
        """Get Notifications Count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_get_unread_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_get_unread_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notification_get_unread_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def notification_get_unread_count_with_http_info(self, **kwargs):  # noqa: E501
        """Get Notifications Count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_get_unread_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_get_unread_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Notification/GetUnreadCount', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_save_preferences(self, **kwargs):  # noqa: E501
        """Save the current user notification preferences  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_save_preferences(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedDALViewModelsNotificationPreferences body: The preferences to save
        :param str x_api_version:
        :param str user_id:
        :return: AIForgedDALViewModelsNotificationPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_save_preferences_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notification_save_preferences_with_http_info(**kwargs)  # noqa: E501
            return data

    def notification_save_preferences_with_http_info(self, **kwargs):  # noqa: E501
        """Save the current user notification preferences  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_save_preferences_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedDALViewModelsNotificationPreferences body: The preferences to save
        :param str x_api_version:
        :param str user_id:
        :return: AIForgedDALViewModelsNotificationPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_save_preferences" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Notification/SavePreferences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedDALViewModelsNotificationPreferences',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_web_hook_get(self, **kwargs):  # noqa: E501
        """Webhook for WhatApp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_web_hook_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_web_hook_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notification_web_hook_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def notification_web_hook_get_with_http_info(self, **kwargs):  # noqa: E501
        """Webhook for WhatApp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_web_hook_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_web_hook_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Notification/WebHook', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_web_hook_post(self, **kwargs):  # noqa: E501
        """Webhook for WhatApp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_web_hook_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_web_hook_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.notification_web_hook_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def notification_web_hook_post_with_http_info(self, **kwargs):  # noqa: E501
        """Webhook for WhatApp  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_web_hook_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_web_hook_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Notification/WebHook', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
