# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedDALModelsServiceEventViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'str',
        'project_id': 'int',
        'service_id': 'int',
        'event_type': 'AIForgedDALServiceEventType',
        'status': 'AIForgedDALServiceEventStatus',
        'description': 'str',
        'dtc': 'datetime',
        'dtm': 'datetime',
        'start': 'datetime',
        'end': 'datetime',
        'source_type': 'OneOfAIForgedDALModelsServiceEventViewModelSourceType',
        'source_id': 'str',
        'result_type': 'OneOfAIForgedDALModelsServiceEventViewModelResultType',
        'result_id': 'str',
        'result_body': 'str',
        'result_count': 'int',
        'result_status_id': 'int',
        'result_class_id': 'int',
        'master_id': 'int',
        'master': 'OneOfAIForgedDALModelsServiceEventViewModelMaster',
        'related': 'list[AIForgedDALModelsServiceEventViewModel]'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'project_id': 'projectId',
        'service_id': 'serviceId',
        'event_type': 'eventType',
        'status': 'status',
        'description': 'description',
        'dtc': 'dtc',
        'dtm': 'dtm',
        'start': 'start',
        'end': 'end',
        'source_type': 'sourceType',
        'source_id': 'sourceId',
        'result_type': 'resultType',
        'result_id': 'resultId',
        'result_body': 'resultBody',
        'result_count': 'resultCount',
        'result_status_id': 'resultStatusId',
        'result_class_id': 'resultClassId',
        'master_id': 'masterId',
        'master': 'master',
        'related': 'related'
    }

    def __init__(self, id=None, user_id=None, project_id=None, service_id=None, event_type=None, status=None, description=None, dtc=None, dtm=None, start=None, end=None, source_type=None, source_id=None, result_type=None, result_id=None, result_body=None, result_count=None, result_status_id=None, result_class_id=None, master_id=None, master=None, related=None):  # noqa: E501
        """AIForgedDALModelsServiceEventViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._project_id = None
        self._service_id = None
        self._event_type = None
        self._status = None
        self._description = None
        self._dtc = None
        self._dtm = None
        self._start = None
        self._end = None
        self._source_type = None
        self._source_id = None
        self._result_type = None
        self._result_id = None
        self._result_body = None
        self._result_count = None
        self._result_status_id = None
        self._result_class_id = None
        self._master_id = None
        self._master = None
        self._related = None
        self.discriminator = None
        self.id = id
        if user_id is not None:
            self.user_id = user_id
        if project_id is not None:
            self.project_id = project_id
        if service_id is not None:
            self.service_id = service_id
        if event_type is not None:
            self.event_type = event_type
        if status is not None:
            self.status = status
        if description is not None:
            self.description = description
        if dtc is not None:
            self.dtc = dtc
        if dtm is not None:
            self.dtm = dtm
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if source_type is not None:
            self.source_type = source_type
        if source_id is not None:
            self.source_id = source_id
        if result_type is not None:
            self.result_type = result_type
        if result_id is not None:
            self.result_id = result_id
        if result_body is not None:
            self.result_body = result_body
        if result_count is not None:
            self.result_count = result_count
        if result_status_id is not None:
            self.result_status_id = result_status_id
        if result_class_id is not None:
            self.result_class_id = result_class_id
        if master_id is not None:
            self.master_id = master_id
        if master is not None:
            self.master = master
        if related is not None:
            self.related = related

    @property
    def id(self):
        """Gets the id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedDALModelsServiceEventViewModel.


        :param id: The id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The user_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedDALModelsServiceEventViewModel.


        :param user_id: The user_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def project_id(self):
        """Gets the project_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The project_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AIForgedDALModelsServiceEventViewModel.


        :param project_id: The project_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def service_id(self):
        """Gets the service_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The service_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AIForgedDALModelsServiceEventViewModel.


        :param service_id: The service_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def event_type(self):
        """Gets the event_type of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The event_type of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: AIForgedDALServiceEventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this AIForgedDALModelsServiceEventViewModel.


        :param event_type: The event_type of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: AIForgedDALServiceEventType
        """

        self._event_type = event_type

    @property
    def status(self):
        """Gets the status of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The status of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: AIForgedDALServiceEventStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedDALModelsServiceEventViewModel.


        :param status: The status of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: AIForgedDALServiceEventStatus
        """

        self._status = status

    @property
    def description(self):
        """Gets the description of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The description of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AIForgedDALModelsServiceEventViewModel.


        :param description: The description of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The dtc of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedDALModelsServiceEventViewModel.


        :param dtc: The dtc of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def dtm(self):
        """Gets the dtm of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The dtm of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtm

    @dtm.setter
    def dtm(self, dtm):
        """Sets the dtm of this AIForgedDALModelsServiceEventViewModel.


        :param dtm: The dtm of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtm = dtm

    @property
    def start(self):
        """Gets the start of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The start of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this AIForgedDALModelsServiceEventViewModel.


        :param start: The start of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The end of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this AIForgedDALModelsServiceEventViewModel.


        :param end: The end of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def source_type(self):
        """Gets the source_type of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The source_type of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: OneOfAIForgedDALModelsServiceEventViewModelSourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this AIForgedDALModelsServiceEventViewModel.


        :param source_type: The source_type of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: OneOfAIForgedDALModelsServiceEventViewModelSourceType
        """

        self._source_type = source_type

    @property
    def source_id(self):
        """Gets the source_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The source_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this AIForgedDALModelsServiceEventViewModel.


        :param source_id: The source_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def result_type(self):
        """Gets the result_type of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The result_type of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: OneOfAIForgedDALModelsServiceEventViewModelResultType
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this AIForgedDALModelsServiceEventViewModel.


        :param result_type: The result_type of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: OneOfAIForgedDALModelsServiceEventViewModelResultType
        """

        self._result_type = result_type

    @property
    def result_id(self):
        """Gets the result_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The result_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: str
        """
        return self._result_id

    @result_id.setter
    def result_id(self, result_id):
        """Sets the result_id of this AIForgedDALModelsServiceEventViewModel.


        :param result_id: The result_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: str
        """

        self._result_id = result_id

    @property
    def result_body(self):
        """Gets the result_body of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The result_body of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: str
        """
        return self._result_body

    @result_body.setter
    def result_body(self, result_body):
        """Sets the result_body of this AIForgedDALModelsServiceEventViewModel.


        :param result_body: The result_body of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: str
        """

        self._result_body = result_body

    @property
    def result_count(self):
        """Gets the result_count of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The result_count of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: int
        """
        return self._result_count

    @result_count.setter
    def result_count(self, result_count):
        """Sets the result_count of this AIForgedDALModelsServiceEventViewModel.


        :param result_count: The result_count of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: int
        """

        self._result_count = result_count

    @property
    def result_status_id(self):
        """Gets the result_status_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The result_status_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: int
        """
        return self._result_status_id

    @result_status_id.setter
    def result_status_id(self, result_status_id):
        """Sets the result_status_id of this AIForgedDALModelsServiceEventViewModel.


        :param result_status_id: The result_status_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: int
        """

        self._result_status_id = result_status_id

    @property
    def result_class_id(self):
        """Gets the result_class_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The result_class_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: int
        """
        return self._result_class_id

    @result_class_id.setter
    def result_class_id(self, result_class_id):
        """Sets the result_class_id of this AIForgedDALModelsServiceEventViewModel.


        :param result_class_id: The result_class_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: int
        """

        self._result_class_id = result_class_id

    @property
    def master_id(self):
        """Gets the master_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The master_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: int
        """
        return self._master_id

    @master_id.setter
    def master_id(self, master_id):
        """Sets the master_id of this AIForgedDALModelsServiceEventViewModel.


        :param master_id: The master_id of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: int
        """

        self._master_id = master_id

    @property
    def master(self):
        """Gets the master of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The master of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: OneOfAIForgedDALModelsServiceEventViewModelMaster
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this AIForgedDALModelsServiceEventViewModel.


        :param master: The master of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: OneOfAIForgedDALModelsServiceEventViewModelMaster
        """

        self._master = master

    @property
    def related(self):
        """Gets the related of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501


        :return: The related of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :rtype: list[AIForgedDALModelsServiceEventViewModel]
        """
        return self._related

    @related.setter
    def related(self, related):
        """Sets the related of this AIForgedDALModelsServiceEventViewModel.


        :param related: The related of this AIForgedDALModelsServiceEventViewModel.  # noqa: E501
        :type: list[AIForgedDALModelsServiceEventViewModel]
        """

        self._related = related

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedDALModelsServiceEventViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedDALModelsServiceEventViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
