# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedReportsCustomLayout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_option': 'AIForgedReportsDisplayOption',
        'report_alignment': 'OneOfAIForgedReportsCustomLayoutReportAlignment',
        'page_size_type': 'OneOfAIForgedReportsCustomLayoutPageSizeType'
    }

    attribute_map = {
        'display_option': 'displayOption',
        'report_alignment': 'reportAlignment',
        'page_size_type': 'pageSizeType'
    }

    def __init__(self, display_option=None, report_alignment=None, page_size_type=None):  # noqa: E501
        """AIForgedReportsCustomLayout - a model defined in Swagger"""  # noqa: E501
        self._display_option = None
        self._report_alignment = None
        self._page_size_type = None
        self.discriminator = None
        if display_option is not None:
            self.display_option = display_option
        if report_alignment is not None:
            self.report_alignment = report_alignment
        if page_size_type is not None:
            self.page_size_type = page_size_type

    @property
    def display_option(self):
        """Gets the display_option of this AIForgedReportsCustomLayout.  # noqa: E501


        :return: The display_option of this AIForgedReportsCustomLayout.  # noqa: E501
        :rtype: AIForgedReportsDisplayOption
        """
        return self._display_option

    @display_option.setter
    def display_option(self, display_option):
        """Sets the display_option of this AIForgedReportsCustomLayout.


        :param display_option: The display_option of this AIForgedReportsCustomLayout.  # noqa: E501
        :type: AIForgedReportsDisplayOption
        """

        self._display_option = display_option

    @property
    def report_alignment(self):
        """Gets the report_alignment of this AIForgedReportsCustomLayout.  # noqa: E501


        :return: The report_alignment of this AIForgedReportsCustomLayout.  # noqa: E501
        :rtype: OneOfAIForgedReportsCustomLayoutReportAlignment
        """
        return self._report_alignment

    @report_alignment.setter
    def report_alignment(self, report_alignment):
        """Sets the report_alignment of this AIForgedReportsCustomLayout.


        :param report_alignment: The report_alignment of this AIForgedReportsCustomLayout.  # noqa: E501
        :type: OneOfAIForgedReportsCustomLayoutReportAlignment
        """

        self._report_alignment = report_alignment

    @property
    def page_size_type(self):
        """Gets the page_size_type of this AIForgedReportsCustomLayout.  # noqa: E501


        :return: The page_size_type of this AIForgedReportsCustomLayout.  # noqa: E501
        :rtype: OneOfAIForgedReportsCustomLayoutPageSizeType
        """
        return self._page_size_type

    @page_size_type.setter
    def page_size_type(self, page_size_type):
        """Sets the page_size_type of this AIForgedReportsCustomLayout.


        :param page_size_type: The page_size_type of this AIForgedReportsCustomLayout.  # noqa: E501
        :type: OneOfAIForgedReportsCustomLayoutPageSizeType
        """

        self._page_size_type = page_size_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedReportsCustomLayout, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedReportsCustomLayout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
