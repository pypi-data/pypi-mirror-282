# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftAspNetCoreIdentityUserLoginInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'login_provider': 'str',
        'provider_key': 'str',
        'provider_display_name': 'str'
    }

    attribute_map = {
        'login_provider': 'loginProvider',
        'provider_key': 'providerKey',
        'provider_display_name': 'providerDisplayName'
    }

    def __init__(self, login_provider=None, provider_key=None, provider_display_name=None):  # noqa: E501
        """MicrosoftAspNetCoreIdentityUserLoginInfo - a model defined in Swagger"""  # noqa: E501
        self._login_provider = None
        self._provider_key = None
        self._provider_display_name = None
        self.discriminator = None
        if login_provider is not None:
            self.login_provider = login_provider
        if provider_key is not None:
            self.provider_key = provider_key
        if provider_display_name is not None:
            self.provider_display_name = provider_display_name

    @property
    def login_provider(self):
        """Gets the login_provider of this MicrosoftAspNetCoreIdentityUserLoginInfo.  # noqa: E501


        :return: The login_provider of this MicrosoftAspNetCoreIdentityUserLoginInfo.  # noqa: E501
        :rtype: str
        """
        return self._login_provider

    @login_provider.setter
    def login_provider(self, login_provider):
        """Sets the login_provider of this MicrosoftAspNetCoreIdentityUserLoginInfo.


        :param login_provider: The login_provider of this MicrosoftAspNetCoreIdentityUserLoginInfo.  # noqa: E501
        :type: str
        """

        self._login_provider = login_provider

    @property
    def provider_key(self):
        """Gets the provider_key of this MicrosoftAspNetCoreIdentityUserLoginInfo.  # noqa: E501


        :return: The provider_key of this MicrosoftAspNetCoreIdentityUserLoginInfo.  # noqa: E501
        :rtype: str
        """
        return self._provider_key

    @provider_key.setter
    def provider_key(self, provider_key):
        """Sets the provider_key of this MicrosoftAspNetCoreIdentityUserLoginInfo.


        :param provider_key: The provider_key of this MicrosoftAspNetCoreIdentityUserLoginInfo.  # noqa: E501
        :type: str
        """

        self._provider_key = provider_key

    @property
    def provider_display_name(self):
        """Gets the provider_display_name of this MicrosoftAspNetCoreIdentityUserLoginInfo.  # noqa: E501


        :return: The provider_display_name of this MicrosoftAspNetCoreIdentityUserLoginInfo.  # noqa: E501
        :rtype: str
        """
        return self._provider_display_name

    @provider_display_name.setter
    def provider_display_name(self, provider_display_name):
        """Sets the provider_display_name of this MicrosoftAspNetCoreIdentityUserLoginInfo.


        :param provider_display_name: The provider_display_name of this MicrosoftAspNetCoreIdentityUserLoginInfo.  # noqa: E501
        :type: str
        """

        self._provider_display_name = provider_display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftAspNetCoreIdentityUserLoginInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftAspNetCoreIdentityUserLoginInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
