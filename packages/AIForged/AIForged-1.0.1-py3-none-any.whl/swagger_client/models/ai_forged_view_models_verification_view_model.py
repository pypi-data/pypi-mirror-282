# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsVerificationViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'parameter_id': 'int',
        'user_id': 'str',
        'value': 'str',
        'dt': 'datetime',
        'confidence': 'float',
        'symbols_confidence': 'str',
        'type': 'AIForgedDALVerificationType',
        'status': 'AIForgedDALVerificationStatus',
        'result': 'str',
        'box': 'str',
        'info': 'str',
        'data': 'str',
        'user_name': 'str',
        'service_id': 'int',
        'service_doc_id': 'int',
        'provider': 'str',
        'setting_id': 'int',
        'work_item': 'int',
        'transaction_id': 'int',
        'reference_doc_id': 'int',
        'reference_param_id': 'int',
        'reference_def_id': 'int',
        'charge': 'float'
    }

    attribute_map = {
        'id': 'id',
        'parameter_id': 'parameterId',
        'user_id': 'userId',
        'value': 'value',
        'dt': 'dt',
        'confidence': 'confidence',
        'symbols_confidence': 'symbolsConfidence',
        'type': 'type',
        'status': 'status',
        'result': 'result',
        'box': 'box',
        'info': 'info',
        'data': 'data',
        'user_name': 'userName',
        'service_id': 'serviceId',
        'service_doc_id': 'serviceDocId',
        'provider': 'provider',
        'setting_id': 'settingId',
        'work_item': 'workItem',
        'transaction_id': 'transactionId',
        'reference_doc_id': 'referenceDocId',
        'reference_param_id': 'referenceParamId',
        'reference_def_id': 'referenceDefId',
        'charge': 'charge'
    }

    def __init__(self, id=None, parameter_id=None, user_id=None, value=None, dt=None, confidence=None, symbols_confidence=None, type=None, status=None, result=None, box=None, info=None, data=None, user_name=None, service_id=None, service_doc_id=None, provider=None, setting_id=None, work_item=None, transaction_id=None, reference_doc_id=None, reference_param_id=None, reference_def_id=None, charge=None):  # noqa: E501
        """AIForgedViewModelsVerificationViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._parameter_id = None
        self._user_id = None
        self._value = None
        self._dt = None
        self._confidence = None
        self._symbols_confidence = None
        self._type = None
        self._status = None
        self._result = None
        self._box = None
        self._info = None
        self._data = None
        self._user_name = None
        self._service_id = None
        self._service_doc_id = None
        self._provider = None
        self._setting_id = None
        self._work_item = None
        self._transaction_id = None
        self._reference_doc_id = None
        self._reference_param_id = None
        self._reference_def_id = None
        self._charge = None
        self.discriminator = None
        self.id = id
        self.parameter_id = parameter_id
        if user_id is not None:
            self.user_id = user_id
        if value is not None:
            self.value = value
        if dt is not None:
            self.dt = dt
        if confidence is not None:
            self.confidence = confidence
        if symbols_confidence is not None:
            self.symbols_confidence = symbols_confidence
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if result is not None:
            self.result = result
        if box is not None:
            self.box = box
        if info is not None:
            self.info = info
        if data is not None:
            self.data = data
        if user_name is not None:
            self.user_name = user_name
        if service_id is not None:
            self.service_id = service_id
        if service_doc_id is not None:
            self.service_doc_id = service_doc_id
        if provider is not None:
            self.provider = provider
        if setting_id is not None:
            self.setting_id = setting_id
        if work_item is not None:
            self.work_item = work_item
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if reference_doc_id is not None:
            self.reference_doc_id = reference_doc_id
        if reference_param_id is not None:
            self.reference_param_id = reference_param_id
        if reference_def_id is not None:
            self.reference_def_id = reference_def_id
        if charge is not None:
            self.charge = charge

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsVerificationViewModel.


        :param id: The id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def parameter_id(self):
        """Gets the parameter_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The parameter_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id):
        """Sets the parameter_id of this AIForgedViewModelsVerificationViewModel.


        :param parameter_id: The parameter_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: int
        """
        if parameter_id is None:
            raise ValueError("Invalid value for `parameter_id`, must not be `None`")  # noqa: E501

        self._parameter_id = parameter_id

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The user_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedViewModelsVerificationViewModel.


        :param user_id: The user_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def value(self):
        """Gets the value of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The value of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AIForgedViewModelsVerificationViewModel.


        :param value: The value of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def dt(self):
        """Gets the dt of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The dt of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this AIForgedViewModelsVerificationViewModel.


        :param dt: The dt of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def confidence(self):
        """Gets the confidence of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The confidence of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this AIForgedViewModelsVerificationViewModel.


        :param confidence: The confidence of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def symbols_confidence(self):
        """Gets the symbols_confidence of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The symbols_confidence of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._symbols_confidence

    @symbols_confidence.setter
    def symbols_confidence(self, symbols_confidence):
        """Sets the symbols_confidence of this AIForgedViewModelsVerificationViewModel.


        :param symbols_confidence: The symbols_confidence of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: str
        """

        self._symbols_confidence = symbols_confidence

    @property
    def type(self):
        """Gets the type of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The type of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: AIForgedDALVerificationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedViewModelsVerificationViewModel.


        :param type: The type of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: AIForgedDALVerificationType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The status of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: AIForgedDALVerificationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsVerificationViewModel.


        :param status: The status of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: AIForgedDALVerificationStatus
        """

        self._status = status

    @property
    def result(self):
        """Gets the result of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The result of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AIForgedViewModelsVerificationViewModel.


        :param result: The result of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def box(self):
        """Gets the box of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The box of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._box

    @box.setter
    def box(self, box):
        """Sets the box of this AIForgedViewModelsVerificationViewModel.


        :param box: The box of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: str
        """

        self._box = box

    @property
    def info(self):
        """Gets the info of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The info of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AIForgedViewModelsVerificationViewModel.


        :param info: The info of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def data(self):
        """Gets the data of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The data of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AIForgedViewModelsVerificationViewModel.


        :param data: The data of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def user_name(self):
        """Gets the user_name of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The user_name of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AIForgedViewModelsVerificationViewModel.


        :param user_name: The user_name of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def service_id(self):
        """Gets the service_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The service_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AIForgedViewModelsVerificationViewModel.


        :param service_id: The service_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def service_doc_id(self):
        """Gets the service_doc_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The service_doc_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._service_doc_id

    @service_doc_id.setter
    def service_doc_id(self, service_doc_id):
        """Sets the service_doc_id of this AIForgedViewModelsVerificationViewModel.


        :param service_doc_id: The service_doc_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: int
        """

        self._service_doc_id = service_doc_id

    @property
    def provider(self):
        """Gets the provider of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The provider of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this AIForgedViewModelsVerificationViewModel.


        :param provider: The provider of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def setting_id(self):
        """Gets the setting_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The setting_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._setting_id

    @setting_id.setter
    def setting_id(self, setting_id):
        """Sets the setting_id of this AIForgedViewModelsVerificationViewModel.


        :param setting_id: The setting_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: int
        """

        self._setting_id = setting_id

    @property
    def work_item(self):
        """Gets the work_item of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The work_item of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._work_item

    @work_item.setter
    def work_item(self, work_item):
        """Sets the work_item of this AIForgedViewModelsVerificationViewModel.


        :param work_item: The work_item of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: int
        """

        self._work_item = work_item

    @property
    def transaction_id(self):
        """Gets the transaction_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The transaction_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this AIForgedViewModelsVerificationViewModel.


        :param transaction_id: The transaction_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: int
        """

        self._transaction_id = transaction_id

    @property
    def reference_doc_id(self):
        """Gets the reference_doc_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The reference_doc_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._reference_doc_id

    @reference_doc_id.setter
    def reference_doc_id(self, reference_doc_id):
        """Sets the reference_doc_id of this AIForgedViewModelsVerificationViewModel.


        :param reference_doc_id: The reference_doc_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: int
        """

        self._reference_doc_id = reference_doc_id

    @property
    def reference_param_id(self):
        """Gets the reference_param_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The reference_param_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._reference_param_id

    @reference_param_id.setter
    def reference_param_id(self, reference_param_id):
        """Sets the reference_param_id of this AIForgedViewModelsVerificationViewModel.


        :param reference_param_id: The reference_param_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: int
        """

        self._reference_param_id = reference_param_id

    @property
    def reference_def_id(self):
        """Gets the reference_def_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The reference_def_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._reference_def_id

    @reference_def_id.setter
    def reference_def_id(self, reference_def_id):
        """Sets the reference_def_id of this AIForgedViewModelsVerificationViewModel.


        :param reference_def_id: The reference_def_id of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: int
        """

        self._reference_def_id = reference_def_id

    @property
    def charge(self):
        """Gets the charge of this AIForgedViewModelsVerificationViewModel.  # noqa: E501


        :return: The charge of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :rtype: float
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """Sets the charge of this AIForgedViewModelsVerificationViewModel.


        :param charge: The charge of this AIForgedViewModelsVerificationViewModel.  # noqa: E501
        :type: float
        """

        self._charge = charge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsVerificationViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsVerificationViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
