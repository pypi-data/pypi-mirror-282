# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsNotificationViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'str',
        'project_id': 'int',
        'class_id': 'int',
        'service_id': 'int',
        'document_id': 'int',
        'work_item_id': 'int',
        'shred_id': 'int',
        'verification_id': 'int',
        'contact_id': 'int',
        'type': 'AIForgedDALNotificationType',
        'status': 'AIForgedDALNotificationStatus',
        'area': 'AIForgedDALNotificationArea',
        'event': 'AIForgedDALNotificationEvent',
        'level': 'AIForgedDALNotificationLevel',
        'to': 'str',
        'address': 'str',
        'subject': 'str',
        'content_type': 'str',
        'body': 'str',
        'error': 'str',
        'dtc': 'datetime',
        'dtm': 'datetime',
        'sent': 'datetime',
        'delivered': 'datetime',
        'read_date': 'datetime',
        'contact': 'OneOfAIForgedViewModelsNotificationViewModelContact',
        'attachments': 'list[AIForgedViewModelsNotificationAttachmentViewModel]'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'project_id': 'projectId',
        'class_id': 'classId',
        'service_id': 'serviceId',
        'document_id': 'documentId',
        'work_item_id': 'workItemId',
        'shred_id': 'shredId',
        'verification_id': 'verificationId',
        'contact_id': 'contactId',
        'type': 'type',
        'status': 'status',
        'area': 'area',
        'event': 'event',
        'level': 'level',
        'to': 'to',
        'address': 'address',
        'subject': 'subject',
        'content_type': 'contentType',
        'body': 'body',
        'error': 'error',
        'dtc': 'dtc',
        'dtm': 'dtm',
        'sent': 'sent',
        'delivered': 'delivered',
        'read_date': 'readDate',
        'contact': 'contact',
        'attachments': 'attachments'
    }

    def __init__(self, id=None, user_id=None, project_id=None, class_id=None, service_id=None, document_id=None, work_item_id=None, shred_id=None, verification_id=None, contact_id=None, type=None, status=None, area=None, event=None, level=None, to=None, address=None, subject=None, content_type=None, body=None, error=None, dtc=None, dtm=None, sent=None, delivered=None, read_date=None, contact=None, attachments=None):  # noqa: E501
        """AIForgedViewModelsNotificationViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._project_id = None
        self._class_id = None
        self._service_id = None
        self._document_id = None
        self._work_item_id = None
        self._shred_id = None
        self._verification_id = None
        self._contact_id = None
        self._type = None
        self._status = None
        self._area = None
        self._event = None
        self._level = None
        self._to = None
        self._address = None
        self._subject = None
        self._content_type = None
        self._body = None
        self._error = None
        self._dtc = None
        self._dtm = None
        self._sent = None
        self._delivered = None
        self._read_date = None
        self._contact = None
        self._attachments = None
        self.discriminator = None
        self.id = id
        self.user_id = user_id
        if project_id is not None:
            self.project_id = project_id
        if class_id is not None:
            self.class_id = class_id
        if service_id is not None:
            self.service_id = service_id
        if document_id is not None:
            self.document_id = document_id
        if work_item_id is not None:
            self.work_item_id = work_item_id
        if shred_id is not None:
            self.shred_id = shred_id
        if verification_id is not None:
            self.verification_id = verification_id
        if contact_id is not None:
            self.contact_id = contact_id
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if area is not None:
            self.area = area
        if event is not None:
            self.event = event
        if level is not None:
            self.level = level
        if to is not None:
            self.to = to
        if address is not None:
            self.address = address
        if subject is not None:
            self.subject = subject
        if content_type is not None:
            self.content_type = content_type
        if body is not None:
            self.body = body
        if error is not None:
            self.error = error
        if dtc is not None:
            self.dtc = dtc
        if dtm is not None:
            self.dtm = dtm
        if sent is not None:
            self.sent = sent
        if delivered is not None:
            self.delivered = delivered
        if read_date is not None:
            self.read_date = read_date
        if contact is not None:
            self.contact = contact
        if attachments is not None:
            self.attachments = attachments

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsNotificationViewModel.


        :param id: The id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The user_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedViewModelsNotificationViewModel.


        :param user_id: The user_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def project_id(self):
        """Gets the project_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The project_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AIForgedViewModelsNotificationViewModel.


        :param project_id: The project_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def class_id(self):
        """Gets the class_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The class_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this AIForgedViewModelsNotificationViewModel.


        :param class_id: The class_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: int
        """

        self._class_id = class_id

    @property
    def service_id(self):
        """Gets the service_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The service_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AIForgedViewModelsNotificationViewModel.


        :param service_id: The service_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def document_id(self):
        """Gets the document_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The document_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AIForgedViewModelsNotificationViewModel.


        :param document_id: The document_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def work_item_id(self):
        """Gets the work_item_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The work_item_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._work_item_id

    @work_item_id.setter
    def work_item_id(self, work_item_id):
        """Sets the work_item_id of this AIForgedViewModelsNotificationViewModel.


        :param work_item_id: The work_item_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: int
        """

        self._work_item_id = work_item_id

    @property
    def shred_id(self):
        """Gets the shred_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The shred_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._shred_id

    @shred_id.setter
    def shred_id(self, shred_id):
        """Sets the shred_id of this AIForgedViewModelsNotificationViewModel.


        :param shred_id: The shred_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: int
        """

        self._shred_id = shred_id

    @property
    def verification_id(self):
        """Gets the verification_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The verification_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._verification_id

    @verification_id.setter
    def verification_id(self, verification_id):
        """Sets the verification_id of this AIForgedViewModelsNotificationViewModel.


        :param verification_id: The verification_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: int
        """

        self._verification_id = verification_id

    @property
    def contact_id(self):
        """Gets the contact_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The contact_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this AIForgedViewModelsNotificationViewModel.


        :param contact_id: The contact_id of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: int
        """

        self._contact_id = contact_id

    @property
    def type(self):
        """Gets the type of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The type of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: AIForgedDALNotificationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedViewModelsNotificationViewModel.


        :param type: The type of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: AIForgedDALNotificationType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The status of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: AIForgedDALNotificationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsNotificationViewModel.


        :param status: The status of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: AIForgedDALNotificationStatus
        """

        self._status = status

    @property
    def area(self):
        """Gets the area of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The area of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: AIForgedDALNotificationArea
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this AIForgedViewModelsNotificationViewModel.


        :param area: The area of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: AIForgedDALNotificationArea
        """

        self._area = area

    @property
    def event(self):
        """Gets the event of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The event of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: AIForgedDALNotificationEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this AIForgedViewModelsNotificationViewModel.


        :param event: The event of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: AIForgedDALNotificationEvent
        """

        self._event = event

    @property
    def level(self):
        """Gets the level of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The level of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: AIForgedDALNotificationLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this AIForgedViewModelsNotificationViewModel.


        :param level: The level of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: AIForgedDALNotificationLevel
        """

        self._level = level

    @property
    def to(self):
        """Gets the to of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The to of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this AIForgedViewModelsNotificationViewModel.


        :param to: The to of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def address(self):
        """Gets the address of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The address of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AIForgedViewModelsNotificationViewModel.


        :param address: The address of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def subject(self):
        """Gets the subject of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The subject of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this AIForgedViewModelsNotificationViewModel.


        :param subject: The subject of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def content_type(self):
        """Gets the content_type of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The content_type of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AIForgedViewModelsNotificationViewModel.


        :param content_type: The content_type of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def body(self):
        """Gets the body of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The body of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this AIForgedViewModelsNotificationViewModel.


        :param body: The body of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def error(self):
        """Gets the error of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The error of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AIForgedViewModelsNotificationViewModel.


        :param error: The error of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The dtc of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedViewModelsNotificationViewModel.


        :param dtc: The dtc of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def dtm(self):
        """Gets the dtm of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The dtm of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtm

    @dtm.setter
    def dtm(self, dtm):
        """Sets the dtm of this AIForgedViewModelsNotificationViewModel.


        :param dtm: The dtm of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtm = dtm

    @property
    def sent(self):
        """Gets the sent of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The sent of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this AIForgedViewModelsNotificationViewModel.


        :param sent: The sent of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: datetime
        """

        self._sent = sent

    @property
    def delivered(self):
        """Gets the delivered of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The delivered of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._delivered

    @delivered.setter
    def delivered(self, delivered):
        """Sets the delivered of this AIForgedViewModelsNotificationViewModel.


        :param delivered: The delivered of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: datetime
        """

        self._delivered = delivered

    @property
    def read_date(self):
        """Gets the read_date of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The read_date of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._read_date

    @read_date.setter
    def read_date(self, read_date):
        """Sets the read_date of this AIForgedViewModelsNotificationViewModel.


        :param read_date: The read_date of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: datetime
        """

        self._read_date = read_date

    @property
    def contact(self):
        """Gets the contact of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The contact of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsNotificationViewModelContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this AIForgedViewModelsNotificationViewModel.


        :param contact: The contact of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsNotificationViewModelContact
        """

        self._contact = contact

    @property
    def attachments(self):
        """Gets the attachments of this AIForgedViewModelsNotificationViewModel.  # noqa: E501


        :return: The attachments of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :rtype: list[AIForgedViewModelsNotificationAttachmentViewModel]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this AIForgedViewModelsNotificationViewModel.


        :param attachments: The attachments of this AIForgedViewModelsNotificationViewModel.  # noqa: E501
        :type: list[AIForgedViewModelsNotificationAttachmentViewModel]
        """

        self._attachments = attachments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsNotificationViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsNotificationViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
