# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsServiceChargeViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'service_id': 'int',
        'status': 'AIForgedDALChargeStatus',
        'dtc': 'datetime',
        'dtm': 'datetime',
        'from_date': 'datetime',
        'to_date': 'datetime',
        'cost': 'float',
        'charge': 'float',
        'comment': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'service_id': 'serviceId',
        'status': 'status',
        'dtc': 'dtc',
        'dtm': 'dtm',
        'from_date': 'fromDate',
        'to_date': 'toDate',
        'cost': 'cost',
        'charge': 'charge',
        'comment': 'comment',
        'user_id': 'userId'
    }

    def __init__(self, id=None, service_id=None, status=None, dtc=None, dtm=None, from_date=None, to_date=None, cost=None, charge=None, comment=None, user_id=None):  # noqa: E501
        """AIForgedViewModelsServiceChargeViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._service_id = None
        self._status = None
        self._dtc = None
        self._dtm = None
        self._from_date = None
        self._to_date = None
        self._cost = None
        self._charge = None
        self._comment = None
        self._user_id = None
        self.discriminator = None
        self.id = id
        self.service_id = service_id
        if status is not None:
            self.status = status
        if dtc is not None:
            self.dtc = dtc
        if dtm is not None:
            self.dtm = dtm
        if from_date is not None:
            self.from_date = from_date
        if to_date is not None:
            self.to_date = to_date
        if cost is not None:
            self.cost = cost
        if charge is not None:
            self.charge = charge
        if comment is not None:
            self.comment = comment
        if user_id is not None:
            self.user_id = user_id

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsServiceChargeViewModel.


        :param id: The id of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def service_id(self):
        """Gets the service_id of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501


        :return: The service_id of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AIForgedViewModelsServiceChargeViewModel.


        :param service_id: The service_id of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :type: int
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501


        :return: The status of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :rtype: AIForgedDALChargeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsServiceChargeViewModel.


        :param status: The status of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :type: AIForgedDALChargeStatus
        """

        self._status = status

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501


        :return: The dtc of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedViewModelsServiceChargeViewModel.


        :param dtc: The dtc of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def dtm(self):
        """Gets the dtm of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501


        :return: The dtm of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtm

    @dtm.setter
    def dtm(self, dtm):
        """Sets the dtm of this AIForgedViewModelsServiceChargeViewModel.


        :param dtm: The dtm of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtm = dtm

    @property
    def from_date(self):
        """Gets the from_date of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501


        :return: The from_date of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this AIForgedViewModelsServiceChargeViewModel.


        :param from_date: The from_date of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :type: datetime
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501


        :return: The to_date of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this AIForgedViewModelsServiceChargeViewModel.


        :param to_date: The to_date of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :type: datetime
        """

        self._to_date = to_date

    @property
    def cost(self):
        """Gets the cost of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501


        :return: The cost of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this AIForgedViewModelsServiceChargeViewModel.


        :param cost: The cost of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def charge(self):
        """Gets the charge of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501


        :return: The charge of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :rtype: float
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """Sets the charge of this AIForgedViewModelsServiceChargeViewModel.


        :param charge: The charge of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :type: float
        """

        self._charge = charge

    @property
    def comment(self):
        """Gets the comment of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501


        :return: The comment of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AIForgedViewModelsServiceChargeViewModel.


        :param comment: The comment of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501


        :return: The user_id of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedViewModelsServiceChargeViewModel.


        :param user_id: The user_id of this AIForgedViewModelsServiceChargeViewModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsServiceChargeViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsServiceChargeViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
