# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ParametersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def parameters_bulk_change_param_def(self, **kwargs):  # noqa: E501
        """Bulk change parameter definitions for parameters in all documents in a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_bulk_change_param_def(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project Id
        :param int pd_id_from: From definition Id
        :param int pd_id_to: To definition Id
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_bulk_change_param_def_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parameters_bulk_change_param_def_with_http_info(**kwargs)  # noqa: E501
            return data

    def parameters_bulk_change_param_def_with_http_info(self, **kwargs):  # noqa: E501
        """Bulk change parameter definitions for parameters in all documents in a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_bulk_change_param_def_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project Id
        :param int pd_id_from: From definition Id
        :param int pd_id_to: To definition Id
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'pd_id_from', 'pd_id_to', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_bulk_change_param_def" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'pd_id_from' in params:
            query_params.append(('pdIdFrom', params['pd_id_from']))  # noqa: E501
        if 'pd_id_to' in params:
            query_params.append(('pdIdTo', params['pd_id_to']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/BulkChangeParamDef', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_create(self, body, **kwargs):  # noqa: E501
        """Create a new parameter on a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsDocumentParameterViewModel body: (required)
        :param str x_api_version:
        :return: AIForgedViewModelsDocumentParameterViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.parameters_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def parameters_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new parameter on a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsDocumentParameterViewModel body: (required)
        :param str x_api_version:
        :return: AIForgedViewModelsDocumentParameterViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `parameters_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/Create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsDocumentParameterViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_deep_search(self, **kwargs):  # noqa: E501
        """Deep Search for parameter values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_deep_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param int project_id:
        :param int stpd_id:
        :param str value:
        :param int pd_id:
        :param int doc_id:
        :param DocUsage doc_usage:
        :param DocStatus doc_status:
        :param datetime doc_from:
        :param datetime doc_to:
        :param int class_id:
        :param str x_api_version:
        :return: list[AIForgedViewModelsDocumentParameterViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_deep_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parameters_deep_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def parameters_deep_search_with_http_info(self, **kwargs):  # noqa: E501
        """Deep Search for parameter values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_deep_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param int project_id:
        :param int stpd_id:
        :param str value:
        :param int pd_id:
        :param int doc_id:
        :param DocUsage doc_usage:
        :param DocStatus doc_status:
        :param datetime doc_from:
        :param datetime doc_to:
        :param int class_id:
        :param str x_api_version:
        :return: list[AIForgedViewModelsDocumentParameterViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'stpd_id', 'value', 'pd_id', 'doc_id', 'doc_usage', 'doc_status', 'doc_from', 'doc_to', 'class_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_deep_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'pd_id' in params:
            query_params.append(('pdId', params['pd_id']))  # noqa: E501
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'doc_usage' in params:
            query_params.append(('docUsage', params['doc_usage']))  # noqa: E501
        if 'doc_status' in params:
            query_params.append(('docStatus', params['doc_status']))  # noqa: E501
        if 'doc_from' in params:
            query_params.append(('docFrom', params['doc_from']))  # noqa: E501
        if 'doc_to' in params:
            query_params.append(('docTo', params['doc_to']))  # noqa: E501
        if 'class_id' in params:
            query_params.append(('classId', params['class_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/DeepSearch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsDocumentParameterViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_delete(self, **kwargs):  # noqa: E501
        """Delete a parameter  # noqa: E501

        This operation deletes a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int paramid: The parameter ID
        :param str x_api_version:
        :return: AIForgedViewModelsDocumentParameterViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parameters_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def parameters_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Delete a parameter  # noqa: E501

        This operation deletes a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int paramid: The parameter ID
        :param str x_api_version:
        :return: AIForgedViewModelsDocumentParameterViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['paramid', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'paramid' in params:
            query_params.append(('paramid', params['paramid']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/Delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsDocumentParameterViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_delete_by_param_def(self, **kwargs):  # noqa: E501
        """Delete parameters by definitions from a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_delete_by_param_def(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document id
        :param int pd_id: Definition id
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_delete_by_param_def_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parameters_delete_by_param_def_with_http_info(**kwargs)  # noqa: E501
            return data

    def parameters_delete_by_param_def_with_http_info(self, **kwargs):  # noqa: E501
        """Delete parameters by definitions from a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_delete_by_param_def_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document id
        :param int pd_id: Definition id
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_id', 'pd_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_delete_by_param_def" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'pd_id' in params:
            query_params.append(('pdId', params['pd_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/DeleteByParamDef', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_delete_by_project_service_param_def(self, **kwargs):  # noqa: E501
        """Delete parameters by definitions from a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_delete_by_project_service_param_def(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project id
        :param int service_id: Service id
        :param int category_id:
        :param AIForgedDALUsageType usage: Document usage folder
        :param list[AIForgedDALDocumentStatus] statuses: Document statuses
        :param int pd_id: Definition id
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_delete_by_project_service_param_def_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parameters_delete_by_project_service_param_def_with_http_info(**kwargs)  # noqa: E501
            return data

    def parameters_delete_by_project_service_param_def_with_http_info(self, **kwargs):  # noqa: E501
        """Delete parameters by definitions from a document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_delete_by_project_service_param_def_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project id
        :param int service_id: Service id
        :param int category_id:
        :param AIForgedDALUsageType usage: Document usage folder
        :param list[AIForgedDALDocumentStatus] statuses: Document statuses
        :param int pd_id: Definition id
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'service_id', 'category_id', 'usage', 'statuses', 'pd_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_delete_by_project_service_param_def" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'service_id' in params:
            query_params.append(('serviceId', params['service_id']))  # noqa: E501
        if 'category_id' in params:
            query_params.append(('categoryId', params['category_id']))  # noqa: E501
        if 'usage' in params:
            query_params.append(('usage', params['usage']))  # noqa: E501
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501
            collection_formats['statuses'] = 'multi'  # noqa: E501
        if 'pd_id' in params:
            query_params.append(('pdId', params['pd_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/DeleteByProjectServiceParamDef', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_export_to_excel(self, **kwargs):  # noqa: E501
        """Export results to Excel  # noqa: E501

        This operation extracts the result parameters in a document to Excel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_export_to_excel(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project ID
        :param int service_id: The service ID
        :param datetime from_date: From date
        :param datetime to_date: To date
        :param bool use_modified_date_for_date_range: Use modified dates in stead of creation date. Optional
        :param int page_no: Page number. Optional
        :param int page_size: Page size of list of parameters. Optional
        :param Usage3 usage: The document usage type to include. Optional
        :param list[AIForgedDALDocumentStatus] statuses: List of document statuses to include. Optional
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_export_to_excel_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parameters_export_to_excel_with_http_info(**kwargs)  # noqa: E501
            return data

    def parameters_export_to_excel_with_http_info(self, **kwargs):  # noqa: E501
        """Export results to Excel  # noqa: E501

        This operation extracts the result parameters in a document to Excel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_export_to_excel_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project ID
        :param int service_id: The service ID
        :param datetime from_date: From date
        :param datetime to_date: To date
        :param bool use_modified_date_for_date_range: Use modified dates in stead of creation date. Optional
        :param int page_no: Page number. Optional
        :param int page_size: Page size of list of parameters. Optional
        :param Usage3 usage: The document usage type to include. Optional
        :param list[AIForgedDALDocumentStatus] statuses: List of document statuses to include. Optional
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'service_id', 'from_date', 'to_date', 'use_modified_date_for_date_range', 'page_no', 'page_size', 'usage', 'statuses', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_export_to_excel" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'service_id' in params:
            query_params.append(('serviceId', params['service_id']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'use_modified_date_for_date_range' in params:
            query_params.append(('useModifiedDateForDateRange', params['use_modified_date_for_date_range']))  # noqa: E501
        if 'page_no' in params:
            query_params.append(('pageNo', params['page_no']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'usage' in params:
            query_params.append(('usage', params['usage']))  # noqa: E501
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501
            collection_formats['statuses'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/ExportToExcel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_extract(self, **kwargs):  # noqa: E501
        """Extract document parameters  # noqa: E501

        This operation extracts all the parameters in a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_extract(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int docid: The document ID
        :param str x_api_version:
        :return: list[AIForgedViewModelsDocumentExtraction]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_extract_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parameters_extract_with_http_info(**kwargs)  # noqa: E501
            return data

    def parameters_extract_with_http_info(self, **kwargs):  # noqa: E501
        """Extract document parameters  # noqa: E501

        This operation extracts all the parameters in a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_extract_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int docid: The document ID
        :param str x_api_version:
        :return: list[AIForgedViewModelsDocumentExtraction]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['docid', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_extract" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'docid' in params:
            query_params.append(('docid', params['docid']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/Extract', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsDocumentExtraction]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_get(self, **kwargs):  # noqa: E501
        """Get parameter value  # noqa: E501

        This operation gets the value of a parameter in a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document ID
        :param int stpd_id: The service ID
        :param Category category: The parameter category. Optional
        :param Grouping grouping: The parameter grouping type. Optional
        :param bool includeverification: Include verification data. Optional
        :param str x_api_version:
        :return: list[AIForgedViewModelsDocumentParameterViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parameters_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def parameters_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get parameter value  # noqa: E501

        This operation gets the value of a parameter in a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document ID
        :param int stpd_id: The service ID
        :param Category category: The parameter category. Optional
        :param Grouping grouping: The parameter grouping type. Optional
        :param bool includeverification: Include verification data. Optional
        :param str x_api_version:
        :return: list[AIForgedViewModelsDocumentParameterViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_id', 'stpd_id', 'category', 'grouping', 'includeverification', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'grouping' in params:
            query_params.append(('grouping', params['grouping']))  # noqa: E501
        if 'includeverification' in params:
            query_params.append(('includeverification', params['includeverification']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/Get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsDocumentParameterViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_get_by_verification(self, **kwargs):  # noqa: E501
        """Get parameter by verification id  # noqa: E501

        This operation gets a parameter associated with a verification item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_get_by_verification(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int verification_id: The verification ID
        :param str x_api_version:
        :return: AIForgedViewModelsDocumentParameterViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_get_by_verification_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parameters_get_by_verification_with_http_info(**kwargs)  # noqa: E501
            return data

    def parameters_get_by_verification_with_http_info(self, **kwargs):  # noqa: E501
        """Get parameter by verification id  # noqa: E501

        This operation gets a parameter associated with a verification item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_get_by_verification_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int verification_id: The verification ID
        :param str x_api_version:
        :return: AIForgedViewModelsDocumentParameterViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['verification_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_get_by_verification" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'verification_id' in params:
            query_params.append(('verificationId', params['verification_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/GetByVerification', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsDocumentParameterViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_get_hierarchy(self, **kwargs):  # noqa: E501
        """Get document parameter hierarchy  # noqa: E501

        This operation gets the list of parameters in a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_get_hierarchy(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document ID
        :param int stpd_id: The service ID
        :param bool includeverification: Indicates whether verification items must be included. Optional
        :param int page_index: The page index of the parameters. Optional
        :param str x_api_version:
        :return: list[AIForgedViewModelsDocumentParameterViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_get_hierarchy_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parameters_get_hierarchy_with_http_info(**kwargs)  # noqa: E501
            return data

    def parameters_get_hierarchy_with_http_info(self, **kwargs):  # noqa: E501
        """Get document parameter hierarchy  # noqa: E501

        This operation gets the list of parameters in a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_get_hierarchy_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: The document ID
        :param int stpd_id: The service ID
        :param bool includeverification: Indicates whether verification items must be included. Optional
        :param int page_index: The page index of the parameters. Optional
        :param str x_api_version:
        :return: list[AIForgedViewModelsDocumentParameterViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_id', 'stpd_id', 'includeverification', 'page_index', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_get_hierarchy" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('docId', params['doc_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'includeverification' in params:
            query_params.append(('includeverification', params['includeverification']))  # noqa: E501
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/GetHierarchy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsDocumentParameterViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_get_summary(self, **kwargs):  # noqa: E501
        """Get summary of project verifications  # noqa: E501

        This operation gets a summary of verifications for a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_get_summary(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project ID
        :param str x_api_version:
        :return: list[AIForgedViewModelsDocParamSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_get_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parameters_get_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def parameters_get_summary_with_http_info(self, **kwargs):  # noqa: E501
        """Get summary of project verifications  # noqa: E501

        This operation gets a summary of verifications for a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_get_summary_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project ID
        :param str x_api_version:
        :return: list[AIForgedViewModelsDocParamSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_get_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/GetSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsDocParamSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_get_usage(self, body, **kwargs):  # noqa: E501
        """Get parameter definition usage  # noqa: E501

        This operation gets all parameters associated with the parameter definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_get_usage(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: The list of document IDs (required)
        :param str x_api_version:
        :param int pd_id: The parameter definition ID
        :return: list[AIForgedViewModelsDocumentParameterViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_get_usage_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.parameters_get_usage_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def parameters_get_usage_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get parameter definition usage  # noqa: E501

        This operation gets all parameters associated with the parameter definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_get_usage_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: The list of document IDs (required)
        :param str x_api_version:
        :param int pd_id: The parameter definition ID
        :return: list[AIForgedViewModelsDocumentParameterViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'pd_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_get_usage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `parameters_get_usage`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pd_id' in params:
            query_params.append(('pdId', params['pd_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/GetUsage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsDocumentParameterViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_multi_extract(self, **kwargs):  # noqa: E501
        """Extract multiple document parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_multi_extract(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] docids: The document id
        :param str x_api_version:
        :return: list[AIForgedViewModelsDocumentExtraction]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_multi_extract_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parameters_multi_extract_with_http_info(**kwargs)  # noqa: E501
            return data

    def parameters_multi_extract_with_http_info(self, **kwargs):  # noqa: E501
        """Extract multiple document parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_multi_extract_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] docids: The document id
        :param str x_api_version:
        :return: list[AIForgedViewModelsDocumentExtraction]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['docids', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_multi_extract" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'docids' in params:
            query_params.append(('docids', params['docids']))  # noqa: E501
            collection_formats['docids'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/MultiExtract', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsDocumentExtraction]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_update(self, body, **kwargs):  # noqa: E501
        """Update a parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsDocumentParameterViewModel body: The parameter (required)
        :param str x_api_version:
        :return: AIForgedViewModelsDocumentParameterViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.parameters_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def parameters_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update a parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsDocumentParameterViewModel body: The parameter (required)
        :param str x_api_version:
        :return: AIForgedViewModelsDocumentParameterViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `parameters_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/Update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsDocumentParameterViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parameters_update_multi(self, body, **kwargs):  # noqa: E501
        """Update multiple parameter values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_update_multi(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AIForgedViewModelsDocumentParameterViewModel] body: (required)
        :param str x_api_version:
        :return: list[AIForgedViewModelsDocumentParameterViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parameters_update_multi_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.parameters_update_multi_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def parameters_update_multi_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update multiple parameter values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parameters_update_multi_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AIForgedViewModelsDocumentParameterViewModel] body: (required)
        :param str x_api_version:
        :return: list[AIForgedViewModelsDocumentParameterViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parameters_update_multi" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `parameters_update_multi`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Parameters/UpdateMulti', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsDocumentParameterViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
