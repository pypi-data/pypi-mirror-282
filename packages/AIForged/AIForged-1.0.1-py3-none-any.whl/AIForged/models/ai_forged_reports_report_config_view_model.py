# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedReportsReportConfigViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'token_type': 'AIForgedReportsTokenType',
        'access_token': 'str',
        'embed_url': 'str',
        'expiration': 'datetime',
        'page_name': 'str',
        'settings': 'OneOfAIForgedReportsReportConfigViewModelSettings',
        'filters': 'list[AIForgedReportsFilter]'
    }

    attribute_map = {
        'type': 'type',
        'token_type': 'tokenType',
        'access_token': 'accessToken',
        'embed_url': 'embedUrl',
        'expiration': 'expiration',
        'page_name': 'pageName',
        'settings': 'settings',
        'filters': 'filters'
    }

    def __init__(self, type=None, token_type=None, access_token=None, embed_url=None, expiration=None, page_name=None, settings=None, filters=None):  # noqa: E501
        """AIForgedReportsReportConfigViewModel - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._token_type = None
        self._access_token = None
        self._embed_url = None
        self._expiration = None
        self._page_name = None
        self._settings = None
        self._filters = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if token_type is not None:
            self.token_type = token_type
        if access_token is not None:
            self.access_token = access_token
        if embed_url is not None:
            self.embed_url = embed_url
        if expiration is not None:
            self.expiration = expiration
        if page_name is not None:
            self.page_name = page_name
        if settings is not None:
            self.settings = settings
        if filters is not None:
            self.filters = filters

    @property
    def type(self):
        """Gets the type of this AIForgedReportsReportConfigViewModel.  # noqa: E501


        :return: The type of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedReportsReportConfigViewModel.


        :param type: The type of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def token_type(self):
        """Gets the token_type of this AIForgedReportsReportConfigViewModel.  # noqa: E501


        :return: The token_type of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :rtype: AIForgedReportsTokenType
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this AIForgedReportsReportConfigViewModel.


        :param token_type: The token_type of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :type: AIForgedReportsTokenType
        """

        self._token_type = token_type

    @property
    def access_token(self):
        """Gets the access_token of this AIForgedReportsReportConfigViewModel.  # noqa: E501


        :return: The access_token of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AIForgedReportsReportConfigViewModel.


        :param access_token: The access_token of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def embed_url(self):
        """Gets the embed_url of this AIForgedReportsReportConfigViewModel.  # noqa: E501


        :return: The embed_url of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :rtype: str
        """
        return self._embed_url

    @embed_url.setter
    def embed_url(self, embed_url):
        """Sets the embed_url of this AIForgedReportsReportConfigViewModel.


        :param embed_url: The embed_url of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :type: str
        """

        self._embed_url = embed_url

    @property
    def expiration(self):
        """Gets the expiration of this AIForgedReportsReportConfigViewModel.  # noqa: E501


        :return: The expiration of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this AIForgedReportsReportConfigViewModel.


        :param expiration: The expiration of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :type: datetime
        """

        self._expiration = expiration

    @property
    def page_name(self):
        """Gets the page_name of this AIForgedReportsReportConfigViewModel.  # noqa: E501


        :return: The page_name of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :rtype: str
        """
        return self._page_name

    @page_name.setter
    def page_name(self, page_name):
        """Sets the page_name of this AIForgedReportsReportConfigViewModel.


        :param page_name: The page_name of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :type: str
        """

        self._page_name = page_name

    @property
    def settings(self):
        """Gets the settings of this AIForgedReportsReportConfigViewModel.  # noqa: E501


        :return: The settings of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :rtype: OneOfAIForgedReportsReportConfigViewModelSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this AIForgedReportsReportConfigViewModel.


        :param settings: The settings of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :type: OneOfAIForgedReportsReportConfigViewModelSettings
        """

        self._settings = settings

    @property
    def filters(self):
        """Gets the filters of this AIForgedReportsReportConfigViewModel.  # noqa: E501


        :return: The filters of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :rtype: list[AIForgedReportsFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this AIForgedReportsReportConfigViewModel.


        :param filters: The filters of this AIForgedReportsReportConfigViewModel.  # noqa: E501
        :type: list[AIForgedReportsFilter]
        """

        self._filters = filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedReportsReportConfigViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedReportsReportConfigViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
