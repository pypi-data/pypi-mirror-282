# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsPaymentViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'str',
        'project_id': 'int',
        'bundle_id': 'int',
        'amount': 'float',
        'status': 'AIForgedDALPaymentStatus',
        'reference': 'str',
        'description': 'str',
        'result_code': 'str',
        'result': 'str',
        'reason': 'str',
        'error': 'str',
        'data': 'str',
        'dtc': 'datetime',
        'dtm': 'datetime',
        'product_code': 'str',
        'processor': 'str',
        'project': 'OneOfAIForgedViewModelsPaymentViewModelProject',
        'bundle': 'OneOfAIForgedViewModelsPaymentViewModelBundle'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'project_id': 'projectId',
        'bundle_id': 'bundleId',
        'amount': 'amount',
        'status': 'status',
        'reference': 'reference',
        'description': 'description',
        'result_code': 'resultCode',
        'result': 'result',
        'reason': 'reason',
        'error': 'error',
        'data': 'data',
        'dtc': 'dtc',
        'dtm': 'dtm',
        'product_code': 'productCode',
        'processor': 'processor',
        'project': 'project',
        'bundle': 'bundle'
    }

    def __init__(self, id=None, user_id=None, project_id=None, bundle_id=None, amount=None, status=None, reference=None, description=None, result_code=None, result=None, reason=None, error=None, data=None, dtc=None, dtm=None, product_code=None, processor=None, project=None, bundle=None):  # noqa: E501
        """AIForgedViewModelsPaymentViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._project_id = None
        self._bundle_id = None
        self._amount = None
        self._status = None
        self._reference = None
        self._description = None
        self._result_code = None
        self._result = None
        self._reason = None
        self._error = None
        self._data = None
        self._dtc = None
        self._dtm = None
        self._product_code = None
        self._processor = None
        self._project = None
        self._bundle = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if project_id is not None:
            self.project_id = project_id
        if bundle_id is not None:
            self.bundle_id = bundle_id
        if amount is not None:
            self.amount = amount
        if status is not None:
            self.status = status
        if reference is not None:
            self.reference = reference
        if description is not None:
            self.description = description
        if result_code is not None:
            self.result_code = result_code
        if result is not None:
            self.result = result
        if reason is not None:
            self.reason = reason
        if error is not None:
            self.error = error
        if data is not None:
            self.data = data
        if dtc is not None:
            self.dtc = dtc
        if dtm is not None:
            self.dtm = dtm
        if product_code is not None:
            self.product_code = product_code
        if processor is not None:
            self.processor = processor
        if project is not None:
            self.project = project
        if bundle is not None:
            self.bundle = bundle

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsPaymentViewModel.


        :param id: The id of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The user_id of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedViewModelsPaymentViewModel.


        :param user_id: The user_id of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def project_id(self):
        """Gets the project_id of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The project_id of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AIForgedViewModelsPaymentViewModel.


        :param project_id: The project_id of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def bundle_id(self):
        """Gets the bundle_id of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The bundle_id of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: int
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this AIForgedViewModelsPaymentViewModel.


        :param bundle_id: The bundle_id of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: int
        """

        self._bundle_id = bundle_id

    @property
    def amount(self):
        """Gets the amount of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The amount of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AIForgedViewModelsPaymentViewModel.


        :param amount: The amount of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The status of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: AIForgedDALPaymentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsPaymentViewModel.


        :param status: The status of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: AIForgedDALPaymentStatus
        """

        self._status = status

    @property
    def reference(self):
        """Gets the reference of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The reference of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this AIForgedViewModelsPaymentViewModel.


        :param reference: The reference of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def description(self):
        """Gets the description of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The description of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AIForgedViewModelsPaymentViewModel.


        :param description: The description of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def result_code(self):
        """Gets the result_code of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The result_code of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this AIForgedViewModelsPaymentViewModel.


        :param result_code: The result_code of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: str
        """

        self._result_code = result_code

    @property
    def result(self):
        """Gets the result of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The result of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AIForgedViewModelsPaymentViewModel.


        :param result: The result of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def reason(self):
        """Gets the reason of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The reason of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this AIForgedViewModelsPaymentViewModel.


        :param reason: The reason of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def error(self):
        """Gets the error of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The error of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AIForgedViewModelsPaymentViewModel.


        :param error: The error of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def data(self):
        """Gets the data of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The data of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AIForgedViewModelsPaymentViewModel.


        :param data: The data of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def dtc(self):
        """Gets the dtc of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The dtc of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtc

    @dtc.setter
    def dtc(self, dtc):
        """Sets the dtc of this AIForgedViewModelsPaymentViewModel.


        :param dtc: The dtc of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtc = dtc

    @property
    def dtm(self):
        """Gets the dtm of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The dtm of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dtm

    @dtm.setter
    def dtm(self, dtm):
        """Sets the dtm of this AIForgedViewModelsPaymentViewModel.


        :param dtm: The dtm of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: datetime
        """

        self._dtm = dtm

    @property
    def product_code(self):
        """Gets the product_code of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The product_code of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this AIForgedViewModelsPaymentViewModel.


        :param product_code: The product_code of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def processor(self):
        """Gets the processor of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The processor of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: str
        """
        return self._processor

    @processor.setter
    def processor(self, processor):
        """Sets the processor of this AIForgedViewModelsPaymentViewModel.


        :param processor: The processor of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: str
        """

        self._processor = processor

    @property
    def project(self):
        """Gets the project of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The project of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsPaymentViewModelProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AIForgedViewModelsPaymentViewModel.


        :param project: The project of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsPaymentViewModelProject
        """

        self._project = project

    @property
    def bundle(self):
        """Gets the bundle of this AIForgedViewModelsPaymentViewModel.  # noqa: E501


        :return: The bundle of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsPaymentViewModelBundle
        """
        return self._bundle

    @bundle.setter
    def bundle(self, bundle):
        """Sets the bundle of this AIForgedViewModelsPaymentViewModel.


        :param bundle: The bundle of this AIForgedViewModelsPaymentViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsPaymentViewModelBundle
        """

        self._bundle = bundle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsPaymentViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsPaymentViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
