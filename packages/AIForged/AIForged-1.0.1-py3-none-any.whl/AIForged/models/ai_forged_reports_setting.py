# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedReportsSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter_pane_enabled': 'bool',
        'nav_content_pane_enabled': 'bool',
        'background': 'OneOfAIForgedReportsSettingBackground',
        'layout_type': 'OneOfAIForgedReportsSettingLayoutType',
        'custom_layout': 'OneOfAIForgedReportsSettingCustomLayout'
    }

    attribute_map = {
        'filter_pane_enabled': 'filterPaneEnabled',
        'nav_content_pane_enabled': 'navContentPaneEnabled',
        'background': 'background',
        'layout_type': 'layoutType',
        'custom_layout': 'customLayout'
    }

    def __init__(self, filter_pane_enabled=None, nav_content_pane_enabled=None, background=None, layout_type=None, custom_layout=None):  # noqa: E501
        """AIForgedReportsSetting - a model defined in Swagger"""  # noqa: E501
        self._filter_pane_enabled = None
        self._nav_content_pane_enabled = None
        self._background = None
        self._layout_type = None
        self._custom_layout = None
        self.discriminator = None
        if filter_pane_enabled is not None:
            self.filter_pane_enabled = filter_pane_enabled
        if nav_content_pane_enabled is not None:
            self.nav_content_pane_enabled = nav_content_pane_enabled
        if background is not None:
            self.background = background
        if layout_type is not None:
            self.layout_type = layout_type
        if custom_layout is not None:
            self.custom_layout = custom_layout

    @property
    def filter_pane_enabled(self):
        """Gets the filter_pane_enabled of this AIForgedReportsSetting.  # noqa: E501


        :return: The filter_pane_enabled of this AIForgedReportsSetting.  # noqa: E501
        :rtype: bool
        """
        return self._filter_pane_enabled

    @filter_pane_enabled.setter
    def filter_pane_enabled(self, filter_pane_enabled):
        """Sets the filter_pane_enabled of this AIForgedReportsSetting.


        :param filter_pane_enabled: The filter_pane_enabled of this AIForgedReportsSetting.  # noqa: E501
        :type: bool
        """

        self._filter_pane_enabled = filter_pane_enabled

    @property
    def nav_content_pane_enabled(self):
        """Gets the nav_content_pane_enabled of this AIForgedReportsSetting.  # noqa: E501


        :return: The nav_content_pane_enabled of this AIForgedReportsSetting.  # noqa: E501
        :rtype: bool
        """
        return self._nav_content_pane_enabled

    @nav_content_pane_enabled.setter
    def nav_content_pane_enabled(self, nav_content_pane_enabled):
        """Sets the nav_content_pane_enabled of this AIForgedReportsSetting.


        :param nav_content_pane_enabled: The nav_content_pane_enabled of this AIForgedReportsSetting.  # noqa: E501
        :type: bool
        """

        self._nav_content_pane_enabled = nav_content_pane_enabled

    @property
    def background(self):
        """Gets the background of this AIForgedReportsSetting.  # noqa: E501


        :return: The background of this AIForgedReportsSetting.  # noqa: E501
        :rtype: OneOfAIForgedReportsSettingBackground
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this AIForgedReportsSetting.


        :param background: The background of this AIForgedReportsSetting.  # noqa: E501
        :type: OneOfAIForgedReportsSettingBackground
        """

        self._background = background

    @property
    def layout_type(self):
        """Gets the layout_type of this AIForgedReportsSetting.  # noqa: E501


        :return: The layout_type of this AIForgedReportsSetting.  # noqa: E501
        :rtype: OneOfAIForgedReportsSettingLayoutType
        """
        return self._layout_type

    @layout_type.setter
    def layout_type(self, layout_type):
        """Sets the layout_type of this AIForgedReportsSetting.


        :param layout_type: The layout_type of this AIForgedReportsSetting.  # noqa: E501
        :type: OneOfAIForgedReportsSettingLayoutType
        """

        self._layout_type = layout_type

    @property
    def custom_layout(self):
        """Gets the custom_layout of this AIForgedReportsSetting.  # noqa: E501


        :return: The custom_layout of this AIForgedReportsSetting.  # noqa: E501
        :rtype: OneOfAIForgedReportsSettingCustomLayout
        """
        return self._custom_layout

    @custom_layout.setter
    def custom_layout(self, custom_layout):
        """Sets the custom_layout of this AIForgedReportsSetting.


        :param custom_layout: The custom_layout of this AIForgedReportsSetting.  # noqa: E501
        :type: OneOfAIForgedReportsSettingCustomLayout
        """

        self._custom_layout = custom_layout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedReportsSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedReportsSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
