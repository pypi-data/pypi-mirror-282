# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsWizard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'int',
        'name': 'str',
        'description': 'str',
        'type': 'AIForgedDALWizardType',
        'state': 'AIForgedDALWizardState',
        'info': 'str',
        'error': 'str',
        'warning': 'str',
        'information': 'str',
        'stpd': 'OneOfAIForgedViewModelsWizardStpd',
        'dependency_pd': 'OneOfAIForgedViewModelsWizardDependencyPd',
        'pd': 'OneOfAIForgedViewModelsWizardPd',
        'remove_pdid': 'int',
        'docs_count': 'int'
    }

    attribute_map = {
        'index': 'index',
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'state': 'state',
        'info': 'info',
        'error': 'error',
        'warning': 'warning',
        'information': 'information',
        'stpd': 'stpd',
        'dependency_pd': 'dependencyPD',
        'pd': 'pd',
        'remove_pdid': 'removePDId',
        'docs_count': 'docsCount'
    }

    def __init__(self, index=None, name=None, description=None, type=None, state=None, info=None, error=None, warning=None, information=None, stpd=None, dependency_pd=None, pd=None, remove_pdid=None, docs_count=None):  # noqa: E501
        """AIForgedViewModelsWizard - a model defined in Swagger"""  # noqa: E501
        self._index = None
        self._name = None
        self._description = None
        self._type = None
        self._state = None
        self._info = None
        self._error = None
        self._warning = None
        self._information = None
        self._stpd = None
        self._dependency_pd = None
        self._pd = None
        self._remove_pdid = None
        self._docs_count = None
        self.discriminator = None
        if index is not None:
            self.index = index
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if state is not None:
            self.state = state
        if info is not None:
            self.info = info
        if error is not None:
            self.error = error
        if warning is not None:
            self.warning = warning
        if information is not None:
            self.information = information
        if stpd is not None:
            self.stpd = stpd
        if dependency_pd is not None:
            self.dependency_pd = dependency_pd
        if pd is not None:
            self.pd = pd
        if remove_pdid is not None:
            self.remove_pdid = remove_pdid
        if docs_count is not None:
            self.docs_count = docs_count

    @property
    def index(self):
        """Gets the index of this AIForgedViewModelsWizard.  # noqa: E501


        :return: The index of this AIForgedViewModelsWizard.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this AIForgedViewModelsWizard.


        :param index: The index of this AIForgedViewModelsWizard.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def name(self):
        """Gets the name of this AIForgedViewModelsWizard.  # noqa: E501


        :return: The name of this AIForgedViewModelsWizard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AIForgedViewModelsWizard.


        :param name: The name of this AIForgedViewModelsWizard.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AIForgedViewModelsWizard.  # noqa: E501


        :return: The description of this AIForgedViewModelsWizard.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AIForgedViewModelsWizard.


        :param description: The description of this AIForgedViewModelsWizard.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this AIForgedViewModelsWizard.  # noqa: E501


        :return: The type of this AIForgedViewModelsWizard.  # noqa: E501
        :rtype: AIForgedDALWizardType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedViewModelsWizard.


        :param type: The type of this AIForgedViewModelsWizard.  # noqa: E501
        :type: AIForgedDALWizardType
        """

        self._type = type

    @property
    def state(self):
        """Gets the state of this AIForgedViewModelsWizard.  # noqa: E501


        :return: The state of this AIForgedViewModelsWizard.  # noqa: E501
        :rtype: AIForgedDALWizardState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AIForgedViewModelsWizard.


        :param state: The state of this AIForgedViewModelsWizard.  # noqa: E501
        :type: AIForgedDALWizardState
        """

        self._state = state

    @property
    def info(self):
        """Gets the info of this AIForgedViewModelsWizard.  # noqa: E501


        :return: The info of this AIForgedViewModelsWizard.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AIForgedViewModelsWizard.


        :param info: The info of this AIForgedViewModelsWizard.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def error(self):
        """Gets the error of this AIForgedViewModelsWizard.  # noqa: E501


        :return: The error of this AIForgedViewModelsWizard.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AIForgedViewModelsWizard.


        :param error: The error of this AIForgedViewModelsWizard.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def warning(self):
        """Gets the warning of this AIForgedViewModelsWizard.  # noqa: E501


        :return: The warning of this AIForgedViewModelsWizard.  # noqa: E501
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this AIForgedViewModelsWizard.


        :param warning: The warning of this AIForgedViewModelsWizard.  # noqa: E501
        :type: str
        """

        self._warning = warning

    @property
    def information(self):
        """Gets the information of this AIForgedViewModelsWizard.  # noqa: E501


        :return: The information of this AIForgedViewModelsWizard.  # noqa: E501
        :rtype: str
        """
        return self._information

    @information.setter
    def information(self, information):
        """Sets the information of this AIForgedViewModelsWizard.


        :param information: The information of this AIForgedViewModelsWizard.  # noqa: E501
        :type: str
        """

        self._information = information

    @property
    def stpd(self):
        """Gets the stpd of this AIForgedViewModelsWizard.  # noqa: E501


        :return: The stpd of this AIForgedViewModelsWizard.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWizardStpd
        """
        return self._stpd

    @stpd.setter
    def stpd(self, stpd):
        """Sets the stpd of this AIForgedViewModelsWizard.


        :param stpd: The stpd of this AIForgedViewModelsWizard.  # noqa: E501
        :type: OneOfAIForgedViewModelsWizardStpd
        """

        self._stpd = stpd

    @property
    def dependency_pd(self):
        """Gets the dependency_pd of this AIForgedViewModelsWizard.  # noqa: E501


        :return: The dependency_pd of this AIForgedViewModelsWizard.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWizardDependencyPd
        """
        return self._dependency_pd

    @dependency_pd.setter
    def dependency_pd(self, dependency_pd):
        """Sets the dependency_pd of this AIForgedViewModelsWizard.


        :param dependency_pd: The dependency_pd of this AIForgedViewModelsWizard.  # noqa: E501
        :type: OneOfAIForgedViewModelsWizardDependencyPd
        """

        self._dependency_pd = dependency_pd

    @property
    def pd(self):
        """Gets the pd of this AIForgedViewModelsWizard.  # noqa: E501


        :return: The pd of this AIForgedViewModelsWizard.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsWizardPd
        """
        return self._pd

    @pd.setter
    def pd(self, pd):
        """Sets the pd of this AIForgedViewModelsWizard.


        :param pd: The pd of this AIForgedViewModelsWizard.  # noqa: E501
        :type: OneOfAIForgedViewModelsWizardPd
        """

        self._pd = pd

    @property
    def remove_pdid(self):
        """Gets the remove_pdid of this AIForgedViewModelsWizard.  # noqa: E501


        :return: The remove_pdid of this AIForgedViewModelsWizard.  # noqa: E501
        :rtype: int
        """
        return self._remove_pdid

    @remove_pdid.setter
    def remove_pdid(self, remove_pdid):
        """Sets the remove_pdid of this AIForgedViewModelsWizard.


        :param remove_pdid: The remove_pdid of this AIForgedViewModelsWizard.  # noqa: E501
        :type: int
        """

        self._remove_pdid = remove_pdid

    @property
    def docs_count(self):
        """Gets the docs_count of this AIForgedViewModelsWizard.  # noqa: E501


        :return: The docs_count of this AIForgedViewModelsWizard.  # noqa: E501
        :rtype: int
        """
        return self._docs_count

    @docs_count.setter
    def docs_count(self, docs_count):
        """Sets the docs_count of this AIForgedViewModelsWizard.


        :param docs_count: The docs_count of this AIForgedViewModelsWizard.  # noqa: E501
        :type: int
        """

        self._docs_count = docs_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsWizard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsWizard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
