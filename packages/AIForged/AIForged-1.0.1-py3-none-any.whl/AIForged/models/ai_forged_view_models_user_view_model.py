# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsUserViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_name': 'str',
        'full_name': 'str',
        'email': 'str',
        'job_title': 'str',
        'phone_number': 'str',
        'configuration': 'str',
        'is_enabled': 'bool',
        'is_locked_out': 'bool',
        'friendly_name': 'str',
        'created_by': 'str',
        'updated_by': 'str',
        'created_date': 'datetime',
        'updated_date': 'datetime',
        'roles': 'list[str]',
        'project_count': 'int',
        'group_count': 'int',
        'linked_project_count': 'int',
        'linked_group_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'user_name': 'userName',
        'full_name': 'fullName',
        'email': 'email',
        'job_title': 'jobTitle',
        'phone_number': 'phoneNumber',
        'configuration': 'configuration',
        'is_enabled': 'isEnabled',
        'is_locked_out': 'isLockedOut',
        'friendly_name': 'friendlyName',
        'created_by': 'createdBy',
        'updated_by': 'updatedBy',
        'created_date': 'createdDate',
        'updated_date': 'updatedDate',
        'roles': 'roles',
        'project_count': 'projectCount',
        'group_count': 'groupCount',
        'linked_project_count': 'linkedProjectCount',
        'linked_group_count': 'linkedGroupCount'
    }

    def __init__(self, id=None, user_name=None, full_name=None, email=None, job_title=None, phone_number=None, configuration=None, is_enabled=None, is_locked_out=None, friendly_name=None, created_by=None, updated_by=None, created_date=None, updated_date=None, roles=None, project_count=None, group_count=None, linked_project_count=None, linked_group_count=None):  # noqa: E501
        """AIForgedViewModelsUserViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_name = None
        self._full_name = None
        self._email = None
        self._job_title = None
        self._phone_number = None
        self._configuration = None
        self._is_enabled = None
        self._is_locked_out = None
        self._friendly_name = None
        self._created_by = None
        self._updated_by = None
        self._created_date = None
        self._updated_date = None
        self._roles = None
        self._project_count = None
        self._group_count = None
        self._linked_project_count = None
        self._linked_group_count = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.user_name = user_name
        if full_name is not None:
            self.full_name = full_name
        self.email = email
        if job_title is not None:
            self.job_title = job_title
        if phone_number is not None:
            self.phone_number = phone_number
        if configuration is not None:
            self.configuration = configuration
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if is_locked_out is not None:
            self.is_locked_out = is_locked_out
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if created_by is not None:
            self.created_by = created_by
        if updated_by is not None:
            self.updated_by = updated_by
        if created_date is not None:
            self.created_date = created_date
        if updated_date is not None:
            self.updated_date = updated_date
        if roles is not None:
            self.roles = roles
        if project_count is not None:
            self.project_count = project_count
        if group_count is not None:
            self.group_count = group_count
        if linked_project_count is not None:
            self.linked_project_count = linked_project_count
        if linked_group_count is not None:
            self.linked_group_count = linked_group_count

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsUserViewModel.


        :param id: The id of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_name(self):
        """Gets the user_name of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The user_name of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AIForgedViewModelsUserViewModel.


        :param user_name: The user_name of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def full_name(self):
        """Gets the full_name of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The full_name of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this AIForgedViewModelsUserViewModel.


        :param full_name: The full_name of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def email(self):
        """Gets the email of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The email of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AIForgedViewModelsUserViewModel.


        :param email: The email of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def job_title(self):
        """Gets the job_title of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The job_title of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this AIForgedViewModelsUserViewModel.


        :param job_title: The job_title of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def phone_number(self):
        """Gets the phone_number of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The phone_number of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this AIForgedViewModelsUserViewModel.


        :param phone_number: The phone_number of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def configuration(self):
        """Gets the configuration of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The configuration of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this AIForgedViewModelsUserViewModel.


        :param configuration: The configuration of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: str
        """

        self._configuration = configuration

    @property
    def is_enabled(self):
        """Gets the is_enabled of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The is_enabled of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this AIForgedViewModelsUserViewModel.


        :param is_enabled: The is_enabled of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_locked_out(self):
        """Gets the is_locked_out of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The is_locked_out of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked_out

    @is_locked_out.setter
    def is_locked_out(self, is_locked_out):
        """Sets the is_locked_out of this AIForgedViewModelsUserViewModel.


        :param is_locked_out: The is_locked_out of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: bool
        """

        self._is_locked_out = is_locked_out

    @property
    def friendly_name(self):
        """Gets the friendly_name of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The friendly_name of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this AIForgedViewModelsUserViewModel.


        :param friendly_name: The friendly_name of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def created_by(self):
        """Gets the created_by of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The created_by of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AIForgedViewModelsUserViewModel.


        :param created_by: The created_by of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The updated_by of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this AIForgedViewModelsUserViewModel.


        :param updated_by: The updated_by of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_date(self):
        """Gets the created_date of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The created_date of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this AIForgedViewModelsUserViewModel.


        :param created_date: The created_date of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def updated_date(self):
        """Gets the updated_date of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The updated_date of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this AIForgedViewModelsUserViewModel.


        :param updated_date: The updated_date of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    @property
    def roles(self):
        """Gets the roles of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The roles of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this AIForgedViewModelsUserViewModel.


        :param roles: The roles of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def project_count(self):
        """Gets the project_count of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The project_count of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: int
        """
        return self._project_count

    @project_count.setter
    def project_count(self, project_count):
        """Sets the project_count of this AIForgedViewModelsUserViewModel.


        :param project_count: The project_count of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: int
        """

        self._project_count = project_count

    @property
    def group_count(self):
        """Gets the group_count of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The group_count of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: int
        """
        return self._group_count

    @group_count.setter
    def group_count(self, group_count):
        """Sets the group_count of this AIForgedViewModelsUserViewModel.


        :param group_count: The group_count of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: int
        """

        self._group_count = group_count

    @property
    def linked_project_count(self):
        """Gets the linked_project_count of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The linked_project_count of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: int
        """
        return self._linked_project_count

    @linked_project_count.setter
    def linked_project_count(self, linked_project_count):
        """Sets the linked_project_count of this AIForgedViewModelsUserViewModel.


        :param linked_project_count: The linked_project_count of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: int
        """

        self._linked_project_count = linked_project_count

    @property
    def linked_group_count(self):
        """Gets the linked_group_count of this AIForgedViewModelsUserViewModel.  # noqa: E501


        :return: The linked_group_count of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :rtype: int
        """
        return self._linked_group_count

    @linked_group_count.setter
    def linked_group_count(self, linked_group_count):
        """Sets the linked_group_count of this AIForgedViewModelsUserViewModel.


        :param linked_group_count: The linked_group_count of this AIForgedViewModelsUserViewModel.  # noqa: E501
        :type: int
        """

        self._linked_group_count = linked_group_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsUserViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsUserViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
