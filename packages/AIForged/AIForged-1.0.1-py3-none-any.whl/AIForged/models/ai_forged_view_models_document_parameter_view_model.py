# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsDocumentParameterViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'document_id': 'int',
        'param_def_id': 'int',
        'parent_id': 'int',
        'source_id': 'int',
        'value': 'str',
        'data': 'str',
        'index': 'int',
        'col_index': 'int',
        'col_span': 'int',
        'row_index': 'int',
        'row_span': 'int',
        'availability': 'OneOfAIForgedViewModelsDocumentParameterViewModelAvailability',
        'param_def': 'OneOfAIForgedViewModelsDocumentParameterViewModelParamDef',
        'children': 'list[AIForgedViewModelsDocumentParameterViewModel]',
        'verifications': 'list[AIForgedViewModelsVerificationViewModel]'
    }

    attribute_map = {
        'id': 'id',
        'document_id': 'documentId',
        'param_def_id': 'paramDefId',
        'parent_id': 'parentId',
        'source_id': 'sourceId',
        'value': 'value',
        'data': 'data',
        'index': 'index',
        'col_index': 'colIndex',
        'col_span': 'colSpan',
        'row_index': 'rowIndex',
        'row_span': 'rowSpan',
        'availability': 'availability',
        'param_def': 'paramDef',
        'children': 'children',
        'verifications': 'verifications'
    }

    def __init__(self, id=None, document_id=None, param_def_id=None, parent_id=None, source_id=None, value=None, data=None, index=None, col_index=None, col_span=None, row_index=None, row_span=None, availability=None, param_def=None, children=None, verifications=None):  # noqa: E501
        """AIForgedViewModelsDocumentParameterViewModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._document_id = None
        self._param_def_id = None
        self._parent_id = None
        self._source_id = None
        self._value = None
        self._data = None
        self._index = None
        self._col_index = None
        self._col_span = None
        self._row_index = None
        self._row_span = None
        self._availability = None
        self._param_def = None
        self._children = None
        self._verifications = None
        self.discriminator = None
        self.id = id
        if document_id is not None:
            self.document_id = document_id
        if param_def_id is not None:
            self.param_def_id = param_def_id
        if parent_id is not None:
            self.parent_id = parent_id
        if source_id is not None:
            self.source_id = source_id
        if value is not None:
            self.value = value
        if data is not None:
            self.data = data
        if index is not None:
            self.index = index
        if col_index is not None:
            self.col_index = col_index
        if col_span is not None:
            self.col_span = col_span
        if row_index is not None:
            self.row_index = row_index
        if row_span is not None:
            self.row_span = row_span
        if availability is not None:
            self.availability = availability
        if param_def is not None:
            self.param_def = param_def
        if children is not None:
            self.children = children
        if verifications is not None:
            self.verifications = verifications

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsDocumentParameterViewModel.


        :param id: The id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def document_id(self):
        """Gets the document_id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The document_id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AIForgedViewModelsDocumentParameterViewModel.


        :param document_id: The document_id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def param_def_id(self):
        """Gets the param_def_id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The param_def_id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: int
        """
        return self._param_def_id

    @param_def_id.setter
    def param_def_id(self, param_def_id):
        """Sets the param_def_id of this AIForgedViewModelsDocumentParameterViewModel.


        :param param_def_id: The param_def_id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: int
        """

        self._param_def_id = param_def_id

    @property
    def parent_id(self):
        """Gets the parent_id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The parent_id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this AIForgedViewModelsDocumentParameterViewModel.


        :param parent_id: The parent_id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def source_id(self):
        """Gets the source_id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The source_id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this AIForgedViewModelsDocumentParameterViewModel.


        :param source_id: The source_id of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: int
        """

        self._source_id = source_id

    @property
    def value(self):
        """Gets the value of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The value of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AIForgedViewModelsDocumentParameterViewModel.


        :param value: The value of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def data(self):
        """Gets the data of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The data of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AIForgedViewModelsDocumentParameterViewModel.


        :param data: The data of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def index(self):
        """Gets the index of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The index of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this AIForgedViewModelsDocumentParameterViewModel.


        :param index: The index of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def col_index(self):
        """Gets the col_index of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The col_index of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: int
        """
        return self._col_index

    @col_index.setter
    def col_index(self, col_index):
        """Sets the col_index of this AIForgedViewModelsDocumentParameterViewModel.


        :param col_index: The col_index of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: int
        """

        self._col_index = col_index

    @property
    def col_span(self):
        """Gets the col_span of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The col_span of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: int
        """
        return self._col_span

    @col_span.setter
    def col_span(self, col_span):
        """Sets the col_span of this AIForgedViewModelsDocumentParameterViewModel.


        :param col_span: The col_span of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: int
        """

        self._col_span = col_span

    @property
    def row_index(self):
        """Gets the row_index of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The row_index of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: int
        """
        return self._row_index

    @row_index.setter
    def row_index(self, row_index):
        """Sets the row_index of this AIForgedViewModelsDocumentParameterViewModel.


        :param row_index: The row_index of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: int
        """

        self._row_index = row_index

    @property
    def row_span(self):
        """Gets the row_span of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The row_span of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: int
        """
        return self._row_span

    @row_span.setter
    def row_span(self, row_span):
        """Sets the row_span of this AIForgedViewModelsDocumentParameterViewModel.


        :param row_span: The row_span of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: int
        """

        self._row_span = row_span

    @property
    def availability(self):
        """Gets the availability of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The availability of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsDocumentParameterViewModelAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AIForgedViewModelsDocumentParameterViewModel.


        :param availability: The availability of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsDocumentParameterViewModelAvailability
        """

        self._availability = availability

    @property
    def param_def(self):
        """Gets the param_def of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The param_def of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsDocumentParameterViewModelParamDef
        """
        return self._param_def

    @param_def.setter
    def param_def(self, param_def):
        """Sets the param_def of this AIForgedViewModelsDocumentParameterViewModel.


        :param param_def: The param_def of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: OneOfAIForgedViewModelsDocumentParameterViewModelParamDef
        """

        self._param_def = param_def

    @property
    def children(self):
        """Gets the children of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The children of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: list[AIForgedViewModelsDocumentParameterViewModel]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this AIForgedViewModelsDocumentParameterViewModel.


        :param children: The children of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: list[AIForgedViewModelsDocumentParameterViewModel]
        """

        self._children = children

    @property
    def verifications(self):
        """Gets the verifications of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501


        :return: The verifications of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :rtype: list[AIForgedViewModelsVerificationViewModel]
        """
        return self._verifications

    @verifications.setter
    def verifications(self, verifications):
        """Sets the verifications of this AIForgedViewModelsDocumentParameterViewModel.


        :param verifications: The verifications of this AIForgedViewModelsDocumentParameterViewModel.  # noqa: E501
        :type: list[AIForgedViewModelsVerificationViewModel]
        """

        self._verifications = verifications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsDocumentParameterViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsDocumentParameterViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
