# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedCloneOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'classes': 'bool',
        'groups': 'bool',
        'project_users': 'bool',
        'service': 'bool',
        'service_recursive': 'bool',
        'service_def_settings': 'bool',
        'param_def_settings': 'bool',
        'param_def_categories': 'list[OneOfAIForgedCloneOptionsParamDefCategoriesItems]',
        'ratings': 'bool',
        'documents': 'bool',
        'document_from_id': 'int',
        'document_to_id': 'int',
        'document_descending': 'bool',
        'document_ids': 'list[int]',
        'document_categories_src': 'list[int]',
        'document_categories_dst': 'list[int]',
        'skip_docs': 'dict(str, list[str])',
        'document_max_degree_of_parallelism': 'int',
        'documents_data_set': 'bool',
        'documents_inbox': 'bool',
        'documents_out_box': 'bool',
        'documents_definitions': 'bool',
        'documents_training': 'bool',
        'documents_labelling': 'bool',
        'document_data': 'bool',
        'parameters': 'bool',
        'verifications': 'bool',
        'redo_verifications': 'bool',
        'work': 'bool',
        'audit': 'bool',
        'logs': 'bool',
        'transactions': 'bool',
        'payments': 'bool',
        'provider_projects': 'bool',
        'provider_models': 'bool',
        'checks': 'OneOfAIForgedCloneOptionsChecks'
    }

    attribute_map = {
        'classes': 'classes',
        'groups': 'groups',
        'project_users': 'projectUsers',
        'service': 'service',
        'service_recursive': 'serviceRecursive',
        'service_def_settings': 'serviceDefSettings',
        'param_def_settings': 'paramDefSettings',
        'param_def_categories': 'paramDefCategories',
        'ratings': 'ratings',
        'documents': 'documents',
        'document_from_id': 'documentFromId',
        'document_to_id': 'documentToId',
        'document_descending': 'documentDescending',
        'document_ids': 'documentIds',
        'document_categories_src': 'documentCategoriesSrc',
        'document_categories_dst': 'documentCategoriesDst',
        'skip_docs': 'skipDocs',
        'document_max_degree_of_parallelism': 'documentMaxDegreeOfParallelism',
        'documents_data_set': 'documentsDataSet',
        'documents_inbox': 'documentsInbox',
        'documents_out_box': 'documentsOutBox',
        'documents_definitions': 'documentsDefinitions',
        'documents_training': 'documentsTraining',
        'documents_labelling': 'documentsLabelling',
        'document_data': 'documentData',
        'parameters': 'parameters',
        'verifications': 'verifications',
        'redo_verifications': 'redoVerifications',
        'work': 'work',
        'audit': 'audit',
        'logs': 'logs',
        'transactions': 'transactions',
        'payments': 'payments',
        'provider_projects': 'providerProjects',
        'provider_models': 'providerModels',
        'checks': 'checks'
    }

    def __init__(self, classes=None, groups=None, project_users=None, service=None, service_recursive=None, service_def_settings=None, param_def_settings=None, param_def_categories=None, ratings=None, documents=None, document_from_id=None, document_to_id=None, document_descending=None, document_ids=None, document_categories_src=None, document_categories_dst=None, skip_docs=None, document_max_degree_of_parallelism=None, documents_data_set=None, documents_inbox=None, documents_out_box=None, documents_definitions=None, documents_training=None, documents_labelling=None, document_data=None, parameters=None, verifications=None, redo_verifications=None, work=None, audit=None, logs=None, transactions=None, payments=None, provider_projects=None, provider_models=None, checks=None):  # noqa: E501
        """AIForgedCloneOptions - a model defined in Swagger"""  # noqa: E501
        self._classes = None
        self._groups = None
        self._project_users = None
        self._service = None
        self._service_recursive = None
        self._service_def_settings = None
        self._param_def_settings = None
        self._param_def_categories = None
        self._ratings = None
        self._documents = None
        self._document_from_id = None
        self._document_to_id = None
        self._document_descending = None
        self._document_ids = None
        self._document_categories_src = None
        self._document_categories_dst = None
        self._skip_docs = None
        self._document_max_degree_of_parallelism = None
        self._documents_data_set = None
        self._documents_inbox = None
        self._documents_out_box = None
        self._documents_definitions = None
        self._documents_training = None
        self._documents_labelling = None
        self._document_data = None
        self._parameters = None
        self._verifications = None
        self._redo_verifications = None
        self._work = None
        self._audit = None
        self._logs = None
        self._transactions = None
        self._payments = None
        self._provider_projects = None
        self._provider_models = None
        self._checks = None
        self.discriminator = None
        if classes is not None:
            self.classes = classes
        if groups is not None:
            self.groups = groups
        if project_users is not None:
            self.project_users = project_users
        if service is not None:
            self.service = service
        if service_recursive is not None:
            self.service_recursive = service_recursive
        if service_def_settings is not None:
            self.service_def_settings = service_def_settings
        if param_def_settings is not None:
            self.param_def_settings = param_def_settings
        if param_def_categories is not None:
            self.param_def_categories = param_def_categories
        if ratings is not None:
            self.ratings = ratings
        if documents is not None:
            self.documents = documents
        if document_from_id is not None:
            self.document_from_id = document_from_id
        if document_to_id is not None:
            self.document_to_id = document_to_id
        if document_descending is not None:
            self.document_descending = document_descending
        if document_ids is not None:
            self.document_ids = document_ids
        if document_categories_src is not None:
            self.document_categories_src = document_categories_src
        if document_categories_dst is not None:
            self.document_categories_dst = document_categories_dst
        if skip_docs is not None:
            self.skip_docs = skip_docs
        if document_max_degree_of_parallelism is not None:
            self.document_max_degree_of_parallelism = document_max_degree_of_parallelism
        if documents_data_set is not None:
            self.documents_data_set = documents_data_set
        if documents_inbox is not None:
            self.documents_inbox = documents_inbox
        if documents_out_box is not None:
            self.documents_out_box = documents_out_box
        if documents_definitions is not None:
            self.documents_definitions = documents_definitions
        if documents_training is not None:
            self.documents_training = documents_training
        if documents_labelling is not None:
            self.documents_labelling = documents_labelling
        if document_data is not None:
            self.document_data = document_data
        if parameters is not None:
            self.parameters = parameters
        if verifications is not None:
            self.verifications = verifications
        if redo_verifications is not None:
            self.redo_verifications = redo_verifications
        if work is not None:
            self.work = work
        if audit is not None:
            self.audit = audit
        if logs is not None:
            self.logs = logs
        if transactions is not None:
            self.transactions = transactions
        if payments is not None:
            self.payments = payments
        if provider_projects is not None:
            self.provider_projects = provider_projects
        if provider_models is not None:
            self.provider_models = provider_models
        if checks is not None:
            self.checks = checks

    @property
    def classes(self):
        """Gets the classes of this AIForgedCloneOptions.  # noqa: E501


        :return: The classes of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """Sets the classes of this AIForgedCloneOptions.


        :param classes: The classes of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._classes = classes

    @property
    def groups(self):
        """Gets the groups of this AIForgedCloneOptions.  # noqa: E501


        :return: The groups of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this AIForgedCloneOptions.


        :param groups: The groups of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._groups = groups

    @property
    def project_users(self):
        """Gets the project_users of this AIForgedCloneOptions.  # noqa: E501


        :return: The project_users of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._project_users

    @project_users.setter
    def project_users(self, project_users):
        """Sets the project_users of this AIForgedCloneOptions.


        :param project_users: The project_users of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._project_users = project_users

    @property
    def service(self):
        """Gets the service of this AIForgedCloneOptions.  # noqa: E501


        :return: The service of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this AIForgedCloneOptions.


        :param service: The service of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._service = service

    @property
    def service_recursive(self):
        """Gets the service_recursive of this AIForgedCloneOptions.  # noqa: E501


        :return: The service_recursive of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._service_recursive

    @service_recursive.setter
    def service_recursive(self, service_recursive):
        """Sets the service_recursive of this AIForgedCloneOptions.


        :param service_recursive: The service_recursive of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._service_recursive = service_recursive

    @property
    def service_def_settings(self):
        """Gets the service_def_settings of this AIForgedCloneOptions.  # noqa: E501


        :return: The service_def_settings of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._service_def_settings

    @service_def_settings.setter
    def service_def_settings(self, service_def_settings):
        """Sets the service_def_settings of this AIForgedCloneOptions.


        :param service_def_settings: The service_def_settings of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._service_def_settings = service_def_settings

    @property
    def param_def_settings(self):
        """Gets the param_def_settings of this AIForgedCloneOptions.  # noqa: E501


        :return: The param_def_settings of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._param_def_settings

    @param_def_settings.setter
    def param_def_settings(self, param_def_settings):
        """Sets the param_def_settings of this AIForgedCloneOptions.


        :param param_def_settings: The param_def_settings of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._param_def_settings = param_def_settings

    @property
    def param_def_categories(self):
        """Gets the param_def_categories of this AIForgedCloneOptions.  # noqa: E501


        :return: The param_def_categories of this AIForgedCloneOptions.  # noqa: E501
        :rtype: list[OneOfAIForgedCloneOptionsParamDefCategoriesItems]
        """
        return self._param_def_categories

    @param_def_categories.setter
    def param_def_categories(self, param_def_categories):
        """Sets the param_def_categories of this AIForgedCloneOptions.


        :param param_def_categories: The param_def_categories of this AIForgedCloneOptions.  # noqa: E501
        :type: list[OneOfAIForgedCloneOptionsParamDefCategoriesItems]
        """

        self._param_def_categories = param_def_categories

    @property
    def ratings(self):
        """Gets the ratings of this AIForgedCloneOptions.  # noqa: E501


        :return: The ratings of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this AIForgedCloneOptions.


        :param ratings: The ratings of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._ratings = ratings

    @property
    def documents(self):
        """Gets the documents of this AIForgedCloneOptions.  # noqa: E501


        :return: The documents of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this AIForgedCloneOptions.


        :param documents: The documents of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._documents = documents

    @property
    def document_from_id(self):
        """Gets the document_from_id of this AIForgedCloneOptions.  # noqa: E501


        :return: The document_from_id of this AIForgedCloneOptions.  # noqa: E501
        :rtype: int
        """
        return self._document_from_id

    @document_from_id.setter
    def document_from_id(self, document_from_id):
        """Sets the document_from_id of this AIForgedCloneOptions.


        :param document_from_id: The document_from_id of this AIForgedCloneOptions.  # noqa: E501
        :type: int
        """

        self._document_from_id = document_from_id

    @property
    def document_to_id(self):
        """Gets the document_to_id of this AIForgedCloneOptions.  # noqa: E501


        :return: The document_to_id of this AIForgedCloneOptions.  # noqa: E501
        :rtype: int
        """
        return self._document_to_id

    @document_to_id.setter
    def document_to_id(self, document_to_id):
        """Sets the document_to_id of this AIForgedCloneOptions.


        :param document_to_id: The document_to_id of this AIForgedCloneOptions.  # noqa: E501
        :type: int
        """

        self._document_to_id = document_to_id

    @property
    def document_descending(self):
        """Gets the document_descending of this AIForgedCloneOptions.  # noqa: E501


        :return: The document_descending of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._document_descending

    @document_descending.setter
    def document_descending(self, document_descending):
        """Sets the document_descending of this AIForgedCloneOptions.


        :param document_descending: The document_descending of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._document_descending = document_descending

    @property
    def document_ids(self):
        """Gets the document_ids of this AIForgedCloneOptions.  # noqa: E501


        :return: The document_ids of this AIForgedCloneOptions.  # noqa: E501
        :rtype: list[int]
        """
        return self._document_ids

    @document_ids.setter
    def document_ids(self, document_ids):
        """Sets the document_ids of this AIForgedCloneOptions.


        :param document_ids: The document_ids of this AIForgedCloneOptions.  # noqa: E501
        :type: list[int]
        """

        self._document_ids = document_ids

    @property
    def document_categories_src(self):
        """Gets the document_categories_src of this AIForgedCloneOptions.  # noqa: E501


        :return: The document_categories_src of this AIForgedCloneOptions.  # noqa: E501
        :rtype: list[int]
        """
        return self._document_categories_src

    @document_categories_src.setter
    def document_categories_src(self, document_categories_src):
        """Sets the document_categories_src of this AIForgedCloneOptions.


        :param document_categories_src: The document_categories_src of this AIForgedCloneOptions.  # noqa: E501
        :type: list[int]
        """

        self._document_categories_src = document_categories_src

    @property
    def document_categories_dst(self):
        """Gets the document_categories_dst of this AIForgedCloneOptions.  # noqa: E501


        :return: The document_categories_dst of this AIForgedCloneOptions.  # noqa: E501
        :rtype: list[int]
        """
        return self._document_categories_dst

    @document_categories_dst.setter
    def document_categories_dst(self, document_categories_dst):
        """Sets the document_categories_dst of this AIForgedCloneOptions.


        :param document_categories_dst: The document_categories_dst of this AIForgedCloneOptions.  # noqa: E501
        :type: list[int]
        """

        self._document_categories_dst = document_categories_dst

    @property
    def skip_docs(self):
        """Gets the skip_docs of this AIForgedCloneOptions.  # noqa: E501


        :return: The skip_docs of this AIForgedCloneOptions.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._skip_docs

    @skip_docs.setter
    def skip_docs(self, skip_docs):
        """Sets the skip_docs of this AIForgedCloneOptions.


        :param skip_docs: The skip_docs of this AIForgedCloneOptions.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._skip_docs = skip_docs

    @property
    def document_max_degree_of_parallelism(self):
        """Gets the document_max_degree_of_parallelism of this AIForgedCloneOptions.  # noqa: E501


        :return: The document_max_degree_of_parallelism of this AIForgedCloneOptions.  # noqa: E501
        :rtype: int
        """
        return self._document_max_degree_of_parallelism

    @document_max_degree_of_parallelism.setter
    def document_max_degree_of_parallelism(self, document_max_degree_of_parallelism):
        """Sets the document_max_degree_of_parallelism of this AIForgedCloneOptions.


        :param document_max_degree_of_parallelism: The document_max_degree_of_parallelism of this AIForgedCloneOptions.  # noqa: E501
        :type: int
        """

        self._document_max_degree_of_parallelism = document_max_degree_of_parallelism

    @property
    def documents_data_set(self):
        """Gets the documents_data_set of this AIForgedCloneOptions.  # noqa: E501


        :return: The documents_data_set of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._documents_data_set

    @documents_data_set.setter
    def documents_data_set(self, documents_data_set):
        """Sets the documents_data_set of this AIForgedCloneOptions.


        :param documents_data_set: The documents_data_set of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._documents_data_set = documents_data_set

    @property
    def documents_inbox(self):
        """Gets the documents_inbox of this AIForgedCloneOptions.  # noqa: E501


        :return: The documents_inbox of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._documents_inbox

    @documents_inbox.setter
    def documents_inbox(self, documents_inbox):
        """Sets the documents_inbox of this AIForgedCloneOptions.


        :param documents_inbox: The documents_inbox of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._documents_inbox = documents_inbox

    @property
    def documents_out_box(self):
        """Gets the documents_out_box of this AIForgedCloneOptions.  # noqa: E501


        :return: The documents_out_box of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._documents_out_box

    @documents_out_box.setter
    def documents_out_box(self, documents_out_box):
        """Sets the documents_out_box of this AIForgedCloneOptions.


        :param documents_out_box: The documents_out_box of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._documents_out_box = documents_out_box

    @property
    def documents_definitions(self):
        """Gets the documents_definitions of this AIForgedCloneOptions.  # noqa: E501


        :return: The documents_definitions of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._documents_definitions

    @documents_definitions.setter
    def documents_definitions(self, documents_definitions):
        """Sets the documents_definitions of this AIForgedCloneOptions.


        :param documents_definitions: The documents_definitions of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._documents_definitions = documents_definitions

    @property
    def documents_training(self):
        """Gets the documents_training of this AIForgedCloneOptions.  # noqa: E501


        :return: The documents_training of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._documents_training

    @documents_training.setter
    def documents_training(self, documents_training):
        """Sets the documents_training of this AIForgedCloneOptions.


        :param documents_training: The documents_training of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._documents_training = documents_training

    @property
    def documents_labelling(self):
        """Gets the documents_labelling of this AIForgedCloneOptions.  # noqa: E501


        :return: The documents_labelling of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._documents_labelling

    @documents_labelling.setter
    def documents_labelling(self, documents_labelling):
        """Sets the documents_labelling of this AIForgedCloneOptions.


        :param documents_labelling: The documents_labelling of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._documents_labelling = documents_labelling

    @property
    def document_data(self):
        """Gets the document_data of this AIForgedCloneOptions.  # noqa: E501


        :return: The document_data of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._document_data

    @document_data.setter
    def document_data(self, document_data):
        """Sets the document_data of this AIForgedCloneOptions.


        :param document_data: The document_data of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._document_data = document_data

    @property
    def parameters(self):
        """Gets the parameters of this AIForgedCloneOptions.  # noqa: E501


        :return: The parameters of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this AIForgedCloneOptions.


        :param parameters: The parameters of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._parameters = parameters

    @property
    def verifications(self):
        """Gets the verifications of this AIForgedCloneOptions.  # noqa: E501


        :return: The verifications of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._verifications

    @verifications.setter
    def verifications(self, verifications):
        """Sets the verifications of this AIForgedCloneOptions.


        :param verifications: The verifications of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._verifications = verifications

    @property
    def redo_verifications(self):
        """Gets the redo_verifications of this AIForgedCloneOptions.  # noqa: E501


        :return: The redo_verifications of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._redo_verifications

    @redo_verifications.setter
    def redo_verifications(self, redo_verifications):
        """Sets the redo_verifications of this AIForgedCloneOptions.


        :param redo_verifications: The redo_verifications of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._redo_verifications = redo_verifications

    @property
    def work(self):
        """Gets the work of this AIForgedCloneOptions.  # noqa: E501


        :return: The work of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._work

    @work.setter
    def work(self, work):
        """Sets the work of this AIForgedCloneOptions.


        :param work: The work of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._work = work

    @property
    def audit(self):
        """Gets the audit of this AIForgedCloneOptions.  # noqa: E501


        :return: The audit of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._audit

    @audit.setter
    def audit(self, audit):
        """Sets the audit of this AIForgedCloneOptions.


        :param audit: The audit of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._audit = audit

    @property
    def logs(self):
        """Gets the logs of this AIForgedCloneOptions.  # noqa: E501


        :return: The logs of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this AIForgedCloneOptions.


        :param logs: The logs of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._logs = logs

    @property
    def transactions(self):
        """Gets the transactions of this AIForgedCloneOptions.  # noqa: E501


        :return: The transactions of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this AIForgedCloneOptions.


        :param transactions: The transactions of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._transactions = transactions

    @property
    def payments(self):
        """Gets the payments of this AIForgedCloneOptions.  # noqa: E501


        :return: The payments of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this AIForgedCloneOptions.


        :param payments: The payments of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._payments = payments

    @property
    def provider_projects(self):
        """Gets the provider_projects of this AIForgedCloneOptions.  # noqa: E501


        :return: The provider_projects of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._provider_projects

    @provider_projects.setter
    def provider_projects(self, provider_projects):
        """Sets the provider_projects of this AIForgedCloneOptions.


        :param provider_projects: The provider_projects of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._provider_projects = provider_projects

    @property
    def provider_models(self):
        """Gets the provider_models of this AIForgedCloneOptions.  # noqa: E501


        :return: The provider_models of this AIForgedCloneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._provider_models

    @provider_models.setter
    def provider_models(self, provider_models):
        """Sets the provider_models of this AIForgedCloneOptions.


        :param provider_models: The provider_models of this AIForgedCloneOptions.  # noqa: E501
        :type: bool
        """

        self._provider_models = provider_models

    @property
    def checks(self):
        """Gets the checks of this AIForgedCloneOptions.  # noqa: E501


        :return: The checks of this AIForgedCloneOptions.  # noqa: E501
        :rtype: OneOfAIForgedCloneOptionsChecks
        """
        return self._checks

    @checks.setter
    def checks(self, checks):
        """Sets the checks of this AIForgedCloneOptions.


        :param checks: The checks of this AIForgedCloneOptions.  # noqa: E501
        :type: OneOfAIForgedCloneOptionsChecks
        """

        self._checks = checks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedCloneOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedCloneOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
