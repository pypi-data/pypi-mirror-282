# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedViewModelsVerificationSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'parameter_id': 'int',
        'user_id': 'str',
        'value': 'str',
        'dt': 'datetime',
        'confidence': 'float',
        'symbols_confidence': 'str',
        'type': 'AIForgedDALVerificationType',
        'status': 'AIForgedDALVerificationStatus',
        'result': 'str',
        'box': 'str',
        'info': 'str',
        'data': 'str',
        'user_name': 'str',
        'service_id': 'int',
        'service_doc_id': 'int',
        'provider': 'str',
        'setting_id': 'int',
        'work_item': 'int',
        'transaction_id': 'int',
        'reference_doc_id': 'int',
        'reference_param_id': 'int',
        'reference_def_id': 'int',
        'charge': 'float',
        'param_def_id': 'int',
        'param_def_name': 'str',
        'project_id': 'int',
        'project_name': 'str',
        'doc_id': 'int',
        'doc_file_name': 'str',
        'doc_content_type': 'str',
        'doc_usage': 'OneOfAIForgedViewModelsVerificationSummaryDocUsage',
        'doc_status': 'OneOfAIForgedViewModelsVerificationSummaryDocStatus',
        'class_id': 'int',
        'class_name': 'str',
        'year': 'int',
        'month': 'int',
        'day': 'int',
        'day_of_week': 'SystemDayOfWeek',
        'count': 'int',
        'average': 'float',
        'min': 'float',
        'max': 'float',
        'parent_parameter_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'parameter_id': 'parameterId',
        'user_id': 'userId',
        'value': 'value',
        'dt': 'dt',
        'confidence': 'confidence',
        'symbols_confidence': 'symbolsConfidence',
        'type': 'type',
        'status': 'status',
        'result': 'result',
        'box': 'box',
        'info': 'info',
        'data': 'data',
        'user_name': 'userName',
        'service_id': 'serviceId',
        'service_doc_id': 'serviceDocId',
        'provider': 'provider',
        'setting_id': 'settingId',
        'work_item': 'workItem',
        'transaction_id': 'transactionId',
        'reference_doc_id': 'referenceDocId',
        'reference_param_id': 'referenceParamId',
        'reference_def_id': 'referenceDefId',
        'charge': 'charge',
        'param_def_id': 'paramDefId',
        'param_def_name': 'paramDefName',
        'project_id': 'projectId',
        'project_name': 'projectName',
        'doc_id': 'docId',
        'doc_file_name': 'docFileName',
        'doc_content_type': 'docContentType',
        'doc_usage': 'docUsage',
        'doc_status': 'docStatus',
        'class_id': 'classId',
        'class_name': 'className',
        'year': 'year',
        'month': 'month',
        'day': 'day',
        'day_of_week': 'dayOfWeek',
        'count': 'count',
        'average': 'average',
        'min': 'min',
        'max': 'max',
        'parent_parameter_id': 'parentParameterId'
    }

    def __init__(self, id=None, parameter_id=None, user_id=None, value=None, dt=None, confidence=None, symbols_confidence=None, type=None, status=None, result=None, box=None, info=None, data=None, user_name=None, service_id=None, service_doc_id=None, provider=None, setting_id=None, work_item=None, transaction_id=None, reference_doc_id=None, reference_param_id=None, reference_def_id=None, charge=None, param_def_id=None, param_def_name=None, project_id=None, project_name=None, doc_id=None, doc_file_name=None, doc_content_type=None, doc_usage=None, doc_status=None, class_id=None, class_name=None, year=None, month=None, day=None, day_of_week=None, count=None, average=None, min=None, max=None, parent_parameter_id=None):  # noqa: E501
        """AIForgedViewModelsVerificationSummary - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._parameter_id = None
        self._user_id = None
        self._value = None
        self._dt = None
        self._confidence = None
        self._symbols_confidence = None
        self._type = None
        self._status = None
        self._result = None
        self._box = None
        self._info = None
        self._data = None
        self._user_name = None
        self._service_id = None
        self._service_doc_id = None
        self._provider = None
        self._setting_id = None
        self._work_item = None
        self._transaction_id = None
        self._reference_doc_id = None
        self._reference_param_id = None
        self._reference_def_id = None
        self._charge = None
        self._param_def_id = None
        self._param_def_name = None
        self._project_id = None
        self._project_name = None
        self._doc_id = None
        self._doc_file_name = None
        self._doc_content_type = None
        self._doc_usage = None
        self._doc_status = None
        self._class_id = None
        self._class_name = None
        self._year = None
        self._month = None
        self._day = None
        self._day_of_week = None
        self._count = None
        self._average = None
        self._min = None
        self._max = None
        self._parent_parameter_id = None
        self.discriminator = None
        self.id = id
        self.parameter_id = parameter_id
        if user_id is not None:
            self.user_id = user_id
        if value is not None:
            self.value = value
        if dt is not None:
            self.dt = dt
        if confidence is not None:
            self.confidence = confidence
        if symbols_confidence is not None:
            self.symbols_confidence = symbols_confidence
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if result is not None:
            self.result = result
        if box is not None:
            self.box = box
        if info is not None:
            self.info = info
        if data is not None:
            self.data = data
        if user_name is not None:
            self.user_name = user_name
        if service_id is not None:
            self.service_id = service_id
        if service_doc_id is not None:
            self.service_doc_id = service_doc_id
        if provider is not None:
            self.provider = provider
        if setting_id is not None:
            self.setting_id = setting_id
        if work_item is not None:
            self.work_item = work_item
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if reference_doc_id is not None:
            self.reference_doc_id = reference_doc_id
        if reference_param_id is not None:
            self.reference_param_id = reference_param_id
        if reference_def_id is not None:
            self.reference_def_id = reference_def_id
        if charge is not None:
            self.charge = charge
        if param_def_id is not None:
            self.param_def_id = param_def_id
        if param_def_name is not None:
            self.param_def_name = param_def_name
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if doc_id is not None:
            self.doc_id = doc_id
        if doc_file_name is not None:
            self.doc_file_name = doc_file_name
        if doc_content_type is not None:
            self.doc_content_type = doc_content_type
        if doc_usage is not None:
            self.doc_usage = doc_usage
        if doc_status is not None:
            self.doc_status = doc_status
        if class_id is not None:
            self.class_id = class_id
        if class_name is not None:
            self.class_name = class_name
        if year is not None:
            self.year = year
        if month is not None:
            self.month = month
        if day is not None:
            self.day = day
        if day_of_week is not None:
            self.day_of_week = day_of_week
        if count is not None:
            self.count = count
        if average is not None:
            self.average = average
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if parent_parameter_id is not None:
            self.parent_parameter_id = parent_parameter_id

    @property
    def id(self):
        """Gets the id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AIForgedViewModelsVerificationSummary.


        :param id: The id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def parameter_id(self):
        """Gets the parameter_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The parameter_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id):
        """Sets the parameter_id of this AIForgedViewModelsVerificationSummary.


        :param parameter_id: The parameter_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """
        if parameter_id is None:
            raise ValueError("Invalid value for `parameter_id`, must not be `None`")  # noqa: E501

        self._parameter_id = parameter_id

    @property
    def user_id(self):
        """Gets the user_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The user_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AIForgedViewModelsVerificationSummary.


        :param user_id: The user_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def value(self):
        """Gets the value of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The value of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AIForgedViewModelsVerificationSummary.


        :param value: The value of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def dt(self):
        """Gets the dt of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The dt of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this AIForgedViewModelsVerificationSummary.


        :param dt: The dt of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def confidence(self):
        """Gets the confidence of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The confidence of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this AIForgedViewModelsVerificationSummary.


        :param confidence: The confidence of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def symbols_confidence(self):
        """Gets the symbols_confidence of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The symbols_confidence of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: str
        """
        return self._symbols_confidence

    @symbols_confidence.setter
    def symbols_confidence(self, symbols_confidence):
        """Sets the symbols_confidence of this AIForgedViewModelsVerificationSummary.


        :param symbols_confidence: The symbols_confidence of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: str
        """

        self._symbols_confidence = symbols_confidence

    @property
    def type(self):
        """Gets the type of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The type of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: AIForgedDALVerificationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AIForgedViewModelsVerificationSummary.


        :param type: The type of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: AIForgedDALVerificationType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The status of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: AIForgedDALVerificationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AIForgedViewModelsVerificationSummary.


        :param status: The status of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: AIForgedDALVerificationStatus
        """

        self._status = status

    @property
    def result(self):
        """Gets the result of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The result of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AIForgedViewModelsVerificationSummary.


        :param result: The result of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def box(self):
        """Gets the box of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The box of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: str
        """
        return self._box

    @box.setter
    def box(self, box):
        """Sets the box of this AIForgedViewModelsVerificationSummary.


        :param box: The box of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: str
        """

        self._box = box

    @property
    def info(self):
        """Gets the info of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The info of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AIForgedViewModelsVerificationSummary.


        :param info: The info of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def data(self):
        """Gets the data of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The data of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AIForgedViewModelsVerificationSummary.


        :param data: The data of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def user_name(self):
        """Gets the user_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The user_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AIForgedViewModelsVerificationSummary.


        :param user_name: The user_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def service_id(self):
        """Gets the service_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The service_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AIForgedViewModelsVerificationSummary.


        :param service_id: The service_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def service_doc_id(self):
        """Gets the service_doc_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The service_doc_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._service_doc_id

    @service_doc_id.setter
    def service_doc_id(self, service_doc_id):
        """Sets the service_doc_id of this AIForgedViewModelsVerificationSummary.


        :param service_doc_id: The service_doc_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._service_doc_id = service_doc_id

    @property
    def provider(self):
        """Gets the provider of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The provider of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this AIForgedViewModelsVerificationSummary.


        :param provider: The provider of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def setting_id(self):
        """Gets the setting_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The setting_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._setting_id

    @setting_id.setter
    def setting_id(self, setting_id):
        """Sets the setting_id of this AIForgedViewModelsVerificationSummary.


        :param setting_id: The setting_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._setting_id = setting_id

    @property
    def work_item(self):
        """Gets the work_item of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The work_item of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._work_item

    @work_item.setter
    def work_item(self, work_item):
        """Sets the work_item of this AIForgedViewModelsVerificationSummary.


        :param work_item: The work_item of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._work_item = work_item

    @property
    def transaction_id(self):
        """Gets the transaction_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The transaction_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this AIForgedViewModelsVerificationSummary.


        :param transaction_id: The transaction_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._transaction_id = transaction_id

    @property
    def reference_doc_id(self):
        """Gets the reference_doc_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The reference_doc_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._reference_doc_id

    @reference_doc_id.setter
    def reference_doc_id(self, reference_doc_id):
        """Sets the reference_doc_id of this AIForgedViewModelsVerificationSummary.


        :param reference_doc_id: The reference_doc_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._reference_doc_id = reference_doc_id

    @property
    def reference_param_id(self):
        """Gets the reference_param_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The reference_param_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._reference_param_id

    @reference_param_id.setter
    def reference_param_id(self, reference_param_id):
        """Sets the reference_param_id of this AIForgedViewModelsVerificationSummary.


        :param reference_param_id: The reference_param_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._reference_param_id = reference_param_id

    @property
    def reference_def_id(self):
        """Gets the reference_def_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The reference_def_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._reference_def_id

    @reference_def_id.setter
    def reference_def_id(self, reference_def_id):
        """Sets the reference_def_id of this AIForgedViewModelsVerificationSummary.


        :param reference_def_id: The reference_def_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._reference_def_id = reference_def_id

    @property
    def charge(self):
        """Gets the charge of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The charge of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: float
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """Sets the charge of this AIForgedViewModelsVerificationSummary.


        :param charge: The charge of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: float
        """

        self._charge = charge

    @property
    def param_def_id(self):
        """Gets the param_def_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The param_def_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._param_def_id

    @param_def_id.setter
    def param_def_id(self, param_def_id):
        """Sets the param_def_id of this AIForgedViewModelsVerificationSummary.


        :param param_def_id: The param_def_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._param_def_id = param_def_id

    @property
    def param_def_name(self):
        """Gets the param_def_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The param_def_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: str
        """
        return self._param_def_name

    @param_def_name.setter
    def param_def_name(self, param_def_name):
        """Sets the param_def_name of this AIForgedViewModelsVerificationSummary.


        :param param_def_name: The param_def_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: str
        """

        self._param_def_name = param_def_name

    @property
    def project_id(self):
        """Gets the project_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The project_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AIForgedViewModelsVerificationSummary.


        :param project_id: The project_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The project_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this AIForgedViewModelsVerificationSummary.


        :param project_name: The project_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def doc_id(self):
        """Gets the doc_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The doc_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id):
        """Sets the doc_id of this AIForgedViewModelsVerificationSummary.


        :param doc_id: The doc_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._doc_id = doc_id

    @property
    def doc_file_name(self):
        """Gets the doc_file_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The doc_file_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: str
        """
        return self._doc_file_name

    @doc_file_name.setter
    def doc_file_name(self, doc_file_name):
        """Sets the doc_file_name of this AIForgedViewModelsVerificationSummary.


        :param doc_file_name: The doc_file_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: str
        """

        self._doc_file_name = doc_file_name

    @property
    def doc_content_type(self):
        """Gets the doc_content_type of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The doc_content_type of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: str
        """
        return self._doc_content_type

    @doc_content_type.setter
    def doc_content_type(self, doc_content_type):
        """Sets the doc_content_type of this AIForgedViewModelsVerificationSummary.


        :param doc_content_type: The doc_content_type of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: str
        """

        self._doc_content_type = doc_content_type

    @property
    def doc_usage(self):
        """Gets the doc_usage of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The doc_usage of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsVerificationSummaryDocUsage
        """
        return self._doc_usage

    @doc_usage.setter
    def doc_usage(self, doc_usage):
        """Sets the doc_usage of this AIForgedViewModelsVerificationSummary.


        :param doc_usage: The doc_usage of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: OneOfAIForgedViewModelsVerificationSummaryDocUsage
        """

        self._doc_usage = doc_usage

    @property
    def doc_status(self):
        """Gets the doc_status of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The doc_status of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: OneOfAIForgedViewModelsVerificationSummaryDocStatus
        """
        return self._doc_status

    @doc_status.setter
    def doc_status(self, doc_status):
        """Sets the doc_status of this AIForgedViewModelsVerificationSummary.


        :param doc_status: The doc_status of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: OneOfAIForgedViewModelsVerificationSummaryDocStatus
        """

        self._doc_status = doc_status

    @property
    def class_id(self):
        """Gets the class_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The class_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this AIForgedViewModelsVerificationSummary.


        :param class_id: The class_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._class_id = class_id

    @property
    def class_name(self):
        """Gets the class_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The class_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this AIForgedViewModelsVerificationSummary.


        :param class_name: The class_name of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: str
        """

        self._class_name = class_name

    @property
    def year(self):
        """Gets the year of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The year of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this AIForgedViewModelsVerificationSummary.


        :param year: The year of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def month(self):
        """Gets the month of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The month of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this AIForgedViewModelsVerificationSummary.


        :param month: The month of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def day(self):
        """Gets the day of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The day of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this AIForgedViewModelsVerificationSummary.


        :param day: The day of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._day = day

    @property
    def day_of_week(self):
        """Gets the day_of_week of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The day_of_week of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: SystemDayOfWeek
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this AIForgedViewModelsVerificationSummary.


        :param day_of_week: The day_of_week of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: SystemDayOfWeek
        """

        self._day_of_week = day_of_week

    @property
    def count(self):
        """Gets the count of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The count of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AIForgedViewModelsVerificationSummary.


        :param count: The count of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def average(self):
        """Gets the average of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The average of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this AIForgedViewModelsVerificationSummary.


        :param average: The average of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: float
        """

        self._average = average

    @property
    def min(self):
        """Gets the min of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The min of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this AIForgedViewModelsVerificationSummary.


        :param min: The min of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: float
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The max of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this AIForgedViewModelsVerificationSummary.


        :param max: The max of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: float
        """

        self._max = max

    @property
    def parent_parameter_id(self):
        """Gets the parent_parameter_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501


        :return: The parent_parameter_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :rtype: int
        """
        return self._parent_parameter_id

    @parent_parameter_id.setter
    def parent_parameter_id(self, parent_parameter_id):
        """Sets the parent_parameter_id of this AIForgedViewModelsVerificationSummary.


        :param parent_parameter_id: The parent_parameter_id of this AIForgedViewModelsVerificationSummary.  # noqa: E501
        :type: int
        """

        self._parent_parameter_id = parent_parameter_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedViewModelsVerificationSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedViewModelsVerificationSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
