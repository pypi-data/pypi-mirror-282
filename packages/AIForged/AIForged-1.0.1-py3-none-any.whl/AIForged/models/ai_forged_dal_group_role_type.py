# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AIForgedDALGroupRoleType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    _1 = "1"
    _2 = "2"
    _4 = "4"
    _8 = "8"
    _16 = "16"
    _256 = "256"
    _512 = "512"
    _1024 = "1024"
    _1536 = "1536"
    _2048 = "2048"
    _4096 = "4096"
    _32768 = "32768"
    _65536 = "65536"
    _66048 = "66048"
    _67584 = "67584"
    _131072 = "131072"
    _196608 = "196608"
    _196864 = "196864"
    _262144 = "262144"
    _262656 = "262656"
    _294912 = "294912"
    _524288 = "524288"
    _525312 = "525312"
    _557056 = "557056"
    _1048576 = "1048576"
    _1049600 = "1049600"
    _1081344 = "1081344"
    _2097152 = "2097152"
    _2098176 = "2098176"
    _2129920 = "2129920"
    _4194304 = "4194304"
    _4195328 = "4195328"
    _4227072 = "4227072"
    _8326912 = "8326912"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """AIForgedDALGroupRoleType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AIForgedDALGroupRoleType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AIForgedDALGroupRoleType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
