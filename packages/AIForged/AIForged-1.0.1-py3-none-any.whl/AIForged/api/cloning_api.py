# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CloningApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cloning_configure(self, body, **kwargs):  # noqa: E501
        """Clone a service to new project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_configure(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedCloneOptions body: (required)
        :param str x_api_version:
        :param str user_id: The user id
        :param int src_project_id: The project id
        :param int src_service_id: Service id
        :param int dst_project_id:
        :param int dst_service_id:
        :param str clone_interval:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cloning_configure_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cloning_configure_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cloning_configure_with_http_info(self, body, **kwargs):  # noqa: E501
        """Clone a service to new project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_configure_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedCloneOptions body: (required)
        :param str x_api_version:
        :param str user_id: The user id
        :param int src_project_id: The project id
        :param int src_service_id: Service id
        :param int dst_project_id:
        :param int dst_service_id:
        :param str clone_interval:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'user_id', 'src_project_id', 'src_service_id', 'dst_project_id', 'dst_service_id', 'clone_interval']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloning_configure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cloning_configure`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'src_project_id' in params:
            query_params.append(('srcProjectId', params['src_project_id']))  # noqa: E501
        if 'src_service_id' in params:
            query_params.append(('srcServiceId', params['src_service_id']))  # noqa: E501
        if 'dst_project_id' in params:
            query_params.append(('dstProjectId', params['dst_project_id']))  # noqa: E501
        if 'dst_service_id' in params:
            query_params.append(('dstServiceId', params['dst_service_id']))  # noqa: E501
        if 'clone_interval' in params:
            query_params.append(('cloneInterval', params['clone_interval']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Cloning/Configure', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsParameterDefViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloning_get_data_set_options(self, **kwargs):  # noqa: E501
        """Get clone default options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_get_data_set_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: AIForgedCloneOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cloning_get_data_set_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cloning_get_data_set_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def cloning_get_data_set_options_with_http_info(self, **kwargs):  # noqa: E501
        """Get clone default options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_get_data_set_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: AIForgedCloneOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloning_get_data_set_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Cloning/GetDataSetOptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedCloneOptions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloning_get_default_options(self, **kwargs):  # noqa: E501
        """Get clone default options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_get_default_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: AIForgedCloneOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cloning_get_default_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cloning_get_default_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def cloning_get_default_options_with_http_info(self, **kwargs):  # noqa: E501
        """Get clone default options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_get_default_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_version:
        :return: AIForgedCloneOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloning_get_default_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Cloning/GetDefaultOptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedCloneOptions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloning_get_destination_project(self, **kwargs):  # noqa: E501
        """Get Destination Project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_get_destination_project(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param int project_id:
        :param int service_id:
        :param str x_api_version:
        :return: AIForgedViewModelsProjectViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cloning_get_destination_project_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cloning_get_destination_project_with_http_info(**kwargs)  # noqa: E501
            return data

    def cloning_get_destination_project_with_http_info(self, **kwargs):  # noqa: E501
        """Get Destination Project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_get_destination_project_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param int project_id:
        :param int service_id:
        :param str x_api_version:
        :return: AIForgedViewModelsProjectViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'service_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloning_get_destination_project" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'service_id' in params:
            query_params.append(('serviceId', params['service_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Cloning/GetDestinationProject', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsProjectViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloning_get_destination_service(self, **kwargs):  # noqa: E501
        """Get Destination Service  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_get_destination_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param int project_id:
        :param int service_id:
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cloning_get_destination_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cloning_get_destination_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def cloning_get_destination_service_with_http_info(self, **kwargs):  # noqa: E501
        """Get Destination Service  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_get_destination_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param int project_id:
        :param int service_id:
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'service_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloning_get_destination_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'service_id' in params:
            query_params.append(('serviceId', params['service_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Cloning/GetDestinationService', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsParameterDefViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloning_get_interval(self, **kwargs):  # noqa: E501
        """Get Cloning interval  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_get_interval(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param int project_id:
        :param int service_id:
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cloning_get_interval_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cloning_get_interval_with_http_info(**kwargs)  # noqa: E501
            return data

    def cloning_get_interval_with_http_info(self, **kwargs):  # noqa: E501
        """Get Cloning interval  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_get_interval_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param int project_id:
        :param int service_id:
        :param str x_api_version:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'service_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloning_get_interval" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'service_id' in params:
            query_params.append(('serviceId', params['service_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Cloning/GetInterval', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloning_get_options(self, **kwargs):  # noqa: E501
        """Get current cloning options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_get_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param int project_id:
        :param int service_id:
        :param str x_api_version:
        :return: AIForgedCloneOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cloning_get_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cloning_get_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def cloning_get_options_with_http_info(self, **kwargs):  # noqa: E501
        """Get current cloning options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_get_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id:
        :param int project_id:
        :param int service_id:
        :param str x_api_version:
        :return: AIForgedCloneOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'service_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloning_get_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'service_id' in params:
            query_params.append(('serviceId', params['service_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Cloning/GetOptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedCloneOptions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloning_get_training_options(self, **kwargs):  # noqa: E501
        """Get clone default options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_get_training_options(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id_from:
        :param int doc_id_to:
        :param list[int] src_categories:
        :param list[int] dst_categories:
        :param str x_api_version:
        :return: AIForgedCloneOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cloning_get_training_options_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cloning_get_training_options_with_http_info(**kwargs)  # noqa: E501
            return data

    def cloning_get_training_options_with_http_info(self, **kwargs):  # noqa: E501
        """Get clone default options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_get_training_options_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id_from:
        :param int doc_id_to:
        :param list[int] src_categories:
        :param list[int] dst_categories:
        :param str x_api_version:
        :return: AIForgedCloneOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_id_from', 'doc_id_to', 'src_categories', 'dst_categories', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloning_get_training_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id_from' in params:
            query_params.append(('docIdFrom', params['doc_id_from']))  # noqa: E501
        if 'doc_id_to' in params:
            query_params.append(('docIdTo', params['doc_id_to']))  # noqa: E501
        if 'src_categories' in params:
            query_params.append(('srcCategories', params['src_categories']))  # noqa: E501
            collection_formats['srcCategories'] = 'multi'  # noqa: E501
        if 'dst_categories' in params:
            query_params.append(('dstCategories', params['dst_categories']))  # noqa: E501
            collection_formats['dstCategories'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Cloning/GetTrainingOptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedCloneOptions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloning_set_options(self, body, **kwargs):  # noqa: E501
        """Set Options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_set_options(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedCloneOptions body: (required)
        :param str x_api_version:
        :param str user_id:
        :param int src_project_id:
        :param int src_service_id:
        :param int dst_project_id:
        :param int dst_service_id:
        :param str clone_interval:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cloning_set_options_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cloning_set_options_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cloning_set_options_with_http_info(self, body, **kwargs):  # noqa: E501
        """Set Options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cloning_set_options_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedCloneOptions body: (required)
        :param str x_api_version:
        :param str user_id:
        :param int src_project_id:
        :param int src_service_id:
        :param int dst_project_id:
        :param int dst_service_id:
        :param str clone_interval:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'user_id', 'src_project_id', 'src_service_id', 'dst_project_id', 'dst_service_id', 'clone_interval']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloning_set_options" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cloning_set_options`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'src_project_id' in params:
            query_params.append(('srcProjectId', params['src_project_id']))  # noqa: E501
        if 'src_service_id' in params:
            query_params.append(('srcServiceId', params['src_service_id']))  # noqa: E501
        if 'dst_project_id' in params:
            query_params.append(('dstProjectId', params['dst_project_id']))  # noqa: E501
        if 'dst_service_id' in params:
            query_params.append(('dstServiceId', params['dst_service_id']))  # noqa: E501
        if 'clone_interval' in params:
            query_params.append(('cloneInterval', params['clone_interval']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Cloning/SetOptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsParameterDefViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
