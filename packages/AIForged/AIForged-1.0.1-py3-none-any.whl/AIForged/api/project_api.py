# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProjectApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def project_cancel_credit(self, **kwargs):  # noqa: E501
        """Cancel a credit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_cancel_credit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int transaction_id: transaction id
        :param str comment:
        :param str x_api_version:
        :return: AIForgedDALModelsTransactionsAuditViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_cancel_credit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_cancel_credit_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_cancel_credit_with_http_info(self, **kwargs):  # noqa: E501
        """Cancel a credit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_cancel_credit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int transaction_id: transaction id
        :param str comment:
        :param str x_api_version:
        :return: AIForgedDALModelsTransactionsAuditViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'transaction_id', 'comment', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_cancel_credit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transactionId', params['transaction_id']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/CancelCredit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedDALModelsTransactionsAuditViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_change_owner(self, **kwargs):  # noqa: E501
        """Change the owner of a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_change_owner(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id: The project id
        :param str to_user_id:
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_change_owner_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_change_owner_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_change_owner_with_http_info(self, **kwargs):  # noqa: E501
        """Change the owner of a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_change_owner_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id: The project id
        :param str to_user_id:
        :param str x_api_version:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'to_user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_change_owner" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'to_user_id' in params:
            query_params.append(('toUserId', params['to_user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/ChangeOwner', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_create(self, body, **kwargs):  # noqa: E501
        """Create a new project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsProjectViewModel body: (required)
        :param str x_api_version:
        :return: AIForgedViewModelsProjectViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.project_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def project_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsProjectViewModel body: (required)
        :param str x_api_version:
        :return: AIForgedViewModelsProjectViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `project_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/Create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsProjectViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_create_credit(self, **kwargs):  # noqa: E501
        """Create a manual credit and link it to a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_create_credit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id: The project id
        :param int bundle_id:
        :param float custom_amount:
        :param str comment:
        :param str x_api_version:
        :return: AIForgedDALModelsTransactionsAuditViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_create_credit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_create_credit_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_create_credit_with_http_info(self, **kwargs):  # noqa: E501
        """Create a manual credit and link it to a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_create_credit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id: The project id
        :param int bundle_id:
        :param float custom_amount:
        :param str comment:
        :param str x_api_version:
        :return: AIForgedDALModelsTransactionsAuditViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'bundle_id', 'custom_amount', 'comment', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_create_credit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'bundle_id' in params:
            query_params.append(('bundleId', params['bundle_id']))  # noqa: E501
        if 'custom_amount' in params:
            query_params.append(('customAmount', params['custom_amount']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/CreateCredit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedDALModelsTransactionsAuditViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_delete(self, **kwargs):  # noqa: E501
        """Delete a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id: The project id
        :param str x_api_version:
        :return: AIForgedViewModelsProjectViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Delete a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id: The project id
        :param str x_api_version:
        :return: AIForgedViewModelsProjectViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/Delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsProjectViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_expire_credits(self, **kwargs):  # noqa: E501
        """Expire credits before a date  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_expire_credits(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id: Project id
        :param datetime from_date:
        :param datetime to_date:
        :param str comment:
        :param str x_api_version:
        :return: AIForgedDALModelsTransactionsAuditViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_expire_credits_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_expire_credits_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_expire_credits_with_http_info(self, **kwargs):  # noqa: E501
        """Expire credits before a date  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_expire_credits_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id: Project id
        :param datetime from_date:
        :param datetime to_date:
        :param str comment:
        :param str x_api_version:
        :return: AIForgedDALModelsTransactionsAuditViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'from_date', 'to_date', 'comment', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_expire_credits" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/ExpireCredits', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedDALModelsTransactionsAuditViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_get_audit(self, **kwargs):  # noqa: E501
        """Get audit transaction for service usage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_audit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project id
        :param int stpd_id: Service id
        :param datetime from_date:
        :param datetime to_date:
        :param str interval:
        :param str x_api_version:
        :return: list[AIForgedDALModelsTransactionsAuditViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_get_audit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_get_audit_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_get_audit_with_http_info(self, **kwargs):  # noqa: E501
        """Get audit transaction for service usage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_audit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project id
        :param int stpd_id: Service id
        :param datetime from_date:
        :param datetime to_date:
        :param str interval:
        :param str x_api_version:
        :return: list[AIForgedDALModelsTransactionsAuditViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'stpd_id', 'from_date', 'to_date', 'interval', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_get_audit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/GetAudit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedDALModelsTransactionsAuditViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_get_available_credits(self, **kwargs):  # noqa: E501
        """Get audit transaction for service usage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_available_credits(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id:
        :param datetime from_date:
        :param datetime to_date:
        :param float amount:
        :param str x_api_version:
        :return: list[AIForgedDALModelsTransactionsAuditViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_get_available_credits_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_get_available_credits_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_get_available_credits_with_http_info(self, **kwargs):  # noqa: E501
        """Get audit transaction for service usage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_available_credits_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id:
        :param datetime from_date:
        :param datetime to_date:
        :param float amount:
        :param str x_api_version:
        :return: list[AIForgedDALModelsTransactionsAuditViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'from_date', 'to_date', 'amount', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_get_available_credits" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/GetAvailableCredits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedDALModelsTransactionsAuditViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_get_balance(self, **kwargs):  # noqa: E501
        """Get the balance for a specific project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_balance(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID
        :param int project_id: The project ID
        :param int stpd_id: The service ID. Optional
        :param datetime effective_date: The effective date of the balance. Optional
        :param str x_api_version:
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_get_balance_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_get_balance_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_get_balance_with_http_info(self, **kwargs):  # noqa: E501
        """Get the balance for a specific project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_balance_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID
        :param int project_id: The project ID
        :param int stpd_id: The service ID. Optional
        :param datetime effective_date: The effective date of the balance. Optional
        :param str x_api_version:
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'stpd_id', 'effective_date', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_get_balance" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'effective_date' in params:
            query_params.append(('effectiveDate', params['effective_date']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/GetBalance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='float',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_get_balances(self, **kwargs):  # noqa: E501
        """Get balances for multiple projects linked to a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_balances(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id: The project id
        :param int stpd_id: Service id
        :param int group_id: The group id
        :param bool all_related:
        :param datetime from_date:
        :param datetime to_date:
        :param str x_api_version:
        :return: list[AIForgedViewModelsAccountBalanceItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_get_balances_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_get_balances_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_get_balances_with_http_info(self, **kwargs):  # noqa: E501
        """Get balances for multiple projects linked to a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_balances_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id: The project id
        :param int stpd_id: Service id
        :param int group_id: The group id
        :param bool all_related:
        :param datetime from_date:
        :param datetime to_date:
        :param str x_api_version:
        :return: list[AIForgedViewModelsAccountBalanceItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'stpd_id', 'group_id', 'all_related', 'from_date', 'to_date', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_get_balances" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'all_related' in params:
            query_params.append(('allRelated', params['all_related']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/GetBalances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsAccountBalanceItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_get_by_name(self, **kwargs):  # noqa: E501
        """Find a project by name for user  # noqa: E501

        This operation finds a project by name for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_by_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param str project_name: Project name
        :param str x_api_version:
        :return: AIForgedViewModelsProjectViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_get_by_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_get_by_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_get_by_name_with_http_info(self, **kwargs):  # noqa: E501
        """Find a project by name for user  # noqa: E501

        This operation finds a project by name for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_by_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param str project_name: Project name
        :param str x_api_version:
        :return: AIForgedViewModelsProjectViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_name', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_get_by_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_name' in params:
            query_params.append(('projectName', params['project_name']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/GetByName', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsProjectViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_get_by_user(self, **kwargs):  # noqa: E501
        """Get projects and services for user  # noqa: E501

        This operation gets a list of all projects and services linked to a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_by_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID
        :param str x_api_version:
        :return: list[AIForgedViewModelsProjectViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_get_by_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_get_by_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_get_by_user_with_http_info(self, **kwargs):  # noqa: E501
        """Get projects and services for user  # noqa: E501

        This operation gets a list of all projects and services linked to a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_by_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID
        :param str x_api_version:
        :return: list[AIForgedViewModelsProjectViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_get_by_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/GetByUser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsProjectViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_get_hierachies(self, **kwargs):  # noqa: E501
        """Get hierarchy of fields for all services in a project  # noqa: E501

        This operation get the hierarchy of all the created fields of all services in a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_hierachies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID
        :param int project_id: The project ID
        :param int stpd_id: The service ID. Optional
        :param int group_id: The group ID. Optional
        :param bool include_count: Include counter stats. Optional
        :param bool only_services: Only include services. Optional
        :param bool include_settings: Include settings. Optional
        :param bool include_children: Include children. Optional
        :param str x_api_version:
        :return: list[AIForgedViewModelsParameterDefViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_get_hierachies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_get_hierachies_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_get_hierachies_with_http_info(self, **kwargs):  # noqa: E501
        """Get hierarchy of fields for all services in a project  # noqa: E501

        This operation get the hierarchy of all the created fields of all services in a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_hierachies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID
        :param int project_id: The project ID
        :param int stpd_id: The service ID. Optional
        :param int group_id: The group ID. Optional
        :param bool include_count: Include counter stats. Optional
        :param bool only_services: Only include services. Optional
        :param bool include_settings: Include settings. Optional
        :param bool include_children: Include children. Optional
        :param str x_api_version:
        :return: list[AIForgedViewModelsParameterDefViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'stpd_id', 'group_id', 'include_count', 'only_services', 'include_settings', 'include_children', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_get_hierachies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'include_count' in params:
            query_params.append(('includeCount', params['include_count']))  # noqa: E501
        if 'only_services' in params:
            query_params.append(('onlyServices', params['only_services']))  # noqa: E501
        if 'include_settings' in params:
            query_params.append(('includeSettings', params['include_settings']))  # noqa: E501
        if 'include_children' in params:
            query_params.append(('includeChildren', params['include_children']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/GetHierachies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsParameterDefViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_get_services(self, **kwargs):  # noqa: E501
        """Get services related to a project  # noqa: E501

        This operation gets all services linked to a project for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_services(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID
        :param int project_id: The project ID
        :param int stlfilter: Service type filter. Optional
        :param str enginefilter: Filter by engine. Optional
        :param str x_api_version:
        :return: list[AIForgedViewModelsParameterDefViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_get_services_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_get_services_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_get_services_with_http_info(self, **kwargs):  # noqa: E501
        """Get services related to a project  # noqa: E501

        This operation gets all services linked to a project for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_services_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID
        :param int project_id: The project ID
        :param int stlfilter: Service type filter. Optional
        :param str enginefilter: Filter by engine. Optional
        :param str x_api_version:
        :return: list[AIForgedViewModelsParameterDefViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'stlfilter', 'enginefilter', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_get_services" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stlfilter' in params:
            query_params.append(('stlfilter', params['stlfilter']))  # noqa: E501
        if 'enginefilter' in params:
            query_params.append(('enginefilter', params['enginefilter']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/GetServices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsParameterDefViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_get_statement(self, **kwargs):  # noqa: E501
        """Get statement for user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_statement(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id: The project id
        :param int stpd_id: Service id
        :param int group_id: The group id
        :param datetime from_date:
        :param datetime to_date:
        :param bool all_related:
        :param str interval:
        :param str x_api_version:
        :return: list[AIForgedViewModelsAccountBalanceItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_get_statement_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_get_statement_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_get_statement_with_http_info(self, **kwargs):  # noqa: E501
        """Get statement for user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_statement_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int project_id: The project id
        :param int stpd_id: Service id
        :param int group_id: The group id
        :param datetime from_date:
        :param datetime to_date:
        :param bool all_related:
        :param str interval:
        :param str x_api_version:
        :return: list[AIForgedViewModelsAccountBalanceItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'stpd_id', 'group_id', 'from_date', 'to_date', 'all_related', 'interval', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_get_statement" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'all_related' in params:
            query_params.append(('allRelated', params['all_related']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/GetStatement', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsAccountBalanceItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_get_transaction_audit(self, **kwargs):  # noqa: E501
        """Get audit transaction for service usage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_transaction_audit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project id
        :param int stpd_id: Service id
        :param datetime from_date:
        :param datetime to_date:
        :param str interval:
        :param int related_tx_id:
        :param bool include_related:
        :param str x_api_version:
        :return: list[AIForgedDALModelsTransactionsAuditViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_get_transaction_audit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_get_transaction_audit_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_get_transaction_audit_with_http_info(self, **kwargs):  # noqa: E501
        """Get audit transaction for service usage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_transaction_audit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project id
        :param int stpd_id: Service id
        :param datetime from_date:
        :param datetime to_date:
        :param str interval:
        :param int related_tx_id:
        :param bool include_related:
        :param str x_api_version:
        :return: list[AIForgedDALModelsTransactionsAuditViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'stpd_id', 'from_date', 'to_date', 'interval', 'related_tx_id', 'include_related', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_get_transaction_audit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'related_tx_id' in params:
            query_params.append(('relatedTxId', params['related_tx_id']))  # noqa: E501
        if 'include_related' in params:
            query_params.append(('includeRelated', params['include_related']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/GetTransactionAudit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedDALModelsTransactionsAuditViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_get_user_project(self, **kwargs):  # noqa: E501
        """Get a specific project for user  # noqa: E501

        This operation gets a specific project linked to a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_user_project(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID
        :param int project_id: The project ID
        :param str x_api_version:
        :return: AIForgedViewModelsProjectViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_get_user_project_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_get_user_project_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_get_user_project_with_http_info(self, **kwargs):  # noqa: E501
        """Get a specific project for user  # noqa: E501

        This operation gets a specific project linked to a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_user_project_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user ID
        :param int project_id: The project ID
        :param str x_api_version:
        :return: AIForgedViewModelsProjectViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'project_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_get_user_project" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/GetUserProject', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsProjectViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_transfer_credit_amount(self, **kwargs):  # noqa: E501
        """Transfer credits by amount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_transfer_credit_amount(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int from_project_id: The from project id
        :param int debit_service_id: Optional debit service, otherwise billing service is detected
        :param int to_project_id: The from project id
        :param float amount:
        :param str comment:
        :param str x_api_version:
        :return: AIForgedDALModelsTransactionsAuditViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_transfer_credit_amount_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_transfer_credit_amount_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_transfer_credit_amount_with_http_info(self, **kwargs):  # noqa: E501
        """Transfer credits by amount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_transfer_credit_amount_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int from_project_id: The from project id
        :param int debit_service_id: Optional debit service, otherwise billing service is detected
        :param int to_project_id: The from project id
        :param float amount:
        :param str comment:
        :param str x_api_version:
        :return: AIForgedDALModelsTransactionsAuditViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_project_id', 'debit_service_id', 'to_project_id', 'amount', 'comment', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_transfer_credit_amount" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_project_id' in params:
            query_params.append(('fromProjectId', params['from_project_id']))  # noqa: E501
        if 'debit_service_id' in params:
            query_params.append(('debitServiceId', params['debit_service_id']))  # noqa: E501
        if 'to_project_id' in params:
            query_params.append(('toProjectId', params['to_project_id']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/TransferCreditAmount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedDALModelsTransactionsAuditViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_transfer_credits(self, **kwargs):  # noqa: E501
        """Transfer credits and link it to a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_transfer_credits(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int transaction_id: credit transaction id
        :param int project_id: The project id
        :param int bundle_id:
        :param float custom_amount:
        :param str comment:
        :param str x_api_version:
        :return: AIForgedDALModelsTransactionsAuditViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_transfer_credits_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.project_transfer_credits_with_http_info(**kwargs)  # noqa: E501
            return data

    def project_transfer_credits_with_http_info(self, **kwargs):  # noqa: E501
        """Transfer credits and link it to a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_transfer_credits_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: The user id
        :param int transaction_id: credit transaction id
        :param int project_id: The project id
        :param int bundle_id:
        :param float custom_amount:
        :param str comment:
        :param str x_api_version:
        :return: AIForgedDALModelsTransactionsAuditViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'transaction_id', 'project_id', 'bundle_id', 'custom_amount', 'comment', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_transfer_credits" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transactionId', params['transaction_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'bundle_id' in params:
            query_params.append(('bundleId', params['bundle_id']))  # noqa: E501
        if 'custom_amount' in params:
            query_params.append(('customAmount', params['custom_amount']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/TransferCredits', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedDALModelsTransactionsAuditViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_update(self, body, **kwargs):  # noqa: E501
        """Update a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsProjectViewModel body: (required)
        :param str x_api_version:
        :param str user_id: The user id
        :return: AIForgedViewModelsProjectViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.project_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def project_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsProjectViewModel body: (required)
        :param str x_api_version:
        :param str user_id: The user id
        :return: AIForgedViewModelsProjectViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `project_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Project/Update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsProjectViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
