# coding: utf-8

"""
    AIForged API

    Integration with AI Forged system  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@aiforged.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ParamDefApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def param_def_create(self, body, **kwargs):  # noqa: E501
        """Create a new parameter definition  # noqa: E501

        This operation creates a new parameter definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsParameterDefViewModel body: The definition model to create (required)
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.param_def_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.param_def_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def param_def_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new parameter definition  # noqa: E501

        This operation creates a new parameter definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsParameterDefViewModel body: The definition model to create (required)
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method param_def_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `param_def_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ParamDef/Create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsParameterDefViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def param_def_create_setting(self, body, **kwargs):  # noqa: E501
        """Create a new setting for a definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_create_setting(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedDALModelsParameterDefSettingViewModel body: (required)
        :param str x_api_version:
        :param str user_id: The user id
        :return: AIForgedDALModelsParameterDefSettingViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.param_def_create_setting_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.param_def_create_setting_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def param_def_create_setting_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new setting for a definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_create_setting_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedDALModelsParameterDefSettingViewModel body: (required)
        :param str x_api_version:
        :param str user_id: The user id
        :return: AIForgedDALModelsParameterDefSettingViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method param_def_create_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `param_def_create_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ParamDef/CreateSetting', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedDALModelsParameterDefSettingViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def param_def_delete(self, **kwargs):  # noqa: E501
        """Delete a parameter definition  # noqa: E501

        This operation soft deletes a parameter definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int paramdefid: The parameter definition ID
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.param_def_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.param_def_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def param_def_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Delete a parameter definition  # noqa: E501

        This operation soft deletes a parameter definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int paramdefid: The parameter definition ID
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['paramdefid', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method param_def_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'paramdefid' in params:
            query_params.append(('paramdefid', params['paramdefid']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ParamDef/Delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsParameterDefViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def param_def_delete_multi(self, **kwargs):  # noqa: E501
        """Delete multiple definitions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_delete_multi(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] paramdefids:
        :param str x_api_version:
        :return: list[AIForgedViewModelsParameterDefViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.param_def_delete_multi_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.param_def_delete_multi_with_http_info(**kwargs)  # noqa: E501
            return data

    def param_def_delete_multi_with_http_info(self, **kwargs):  # noqa: E501
        """Delete multiple definitions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_delete_multi_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] paramdefids:
        :param str x_api_version:
        :return: list[AIForgedViewModelsParameterDefViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['paramdefids', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method param_def_delete_multi" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'paramdefids' in params:
            query_params.append(('paramdefids', params['paramdefids']))  # noqa: E501
            collection_formats['paramdefids'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ParamDef/DeleteMulti', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedViewModelsParameterDefViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def param_def_elevate(self, **kwargs):  # noqa: E501
        """Elevate to parent level  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_elevate(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.param_def_elevate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.param_def_elevate_with_http_info(**kwargs)  # noqa: E501
            return data

    def param_def_elevate_with_http_info(self, **kwargs):  # noqa: E501
        """Elevate to parent level  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_elevate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method param_def_elevate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ParamDef/Elevate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsParameterDefViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def param_def_get(self, **kwargs):  # noqa: E501
        """Get parameter definition by ID  # noqa: E501

        This operation gets the parameter definition associated with the ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The parameter definition ID
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.param_def_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.param_def_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def param_def_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get parameter definition by ID  # noqa: E501

        This operation gets the parameter definition associated with the ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The parameter definition ID
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method param_def_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ParamDef/Get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsParameterDefViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def param_def_get_hierachy(self, **kwargs):  # noqa: E501
        """Get hierarchy of fields for a service  # noqa: E501

        This operation gets the hierarchy of fields defined in a service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_get_hierachy(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project id
        :param int stpd_id: The service id
        :param bool include_count: Include count stats. Optional
        :param bool include_settings: Include settings. Optional
        :param bool include_children: Include child definiitions. Optional
        :param list[object] categories:
        :param list[object] groupings:
        :param list[object] vts:
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.param_def_get_hierachy_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.param_def_get_hierachy_with_http_info(**kwargs)  # noqa: E501
            return data

    def param_def_get_hierachy_with_http_info(self, **kwargs):  # noqa: E501
        """Get hierarchy of fields for a service  # noqa: E501

        This operation gets the hierarchy of fields defined in a service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_get_hierachy_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project id
        :param int stpd_id: The service id
        :param bool include_count: Include count stats. Optional
        :param bool include_settings: Include settings. Optional
        :param bool include_children: Include child definiitions. Optional
        :param list[object] categories:
        :param list[object] groupings:
        :param list[object] vts:
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'stpd_id', 'include_count', 'include_settings', 'include_children', 'categories', 'groupings', 'vts', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method param_def_get_hierachy" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'stpd_id' in params:
            query_params.append(('stpdId', params['stpd_id']))  # noqa: E501
        if 'include_count' in params:
            query_params.append(('includeCount', params['include_count']))  # noqa: E501
        if 'include_settings' in params:
            query_params.append(('includeSettings', params['include_settings']))  # noqa: E501
        if 'include_children' in params:
            query_params.append(('includeChildren', params['include_children']))  # noqa: E501
        if 'categories' in params:
            query_params.append(('categories', params['categories']))  # noqa: E501
            collection_formats['categories'] = 'multi'  # noqa: E501
        if 'groupings' in params:
            query_params.append(('groupings', params['groupings']))  # noqa: E501
            collection_formats['groupings'] = 'multi'  # noqa: E501
        if 'vts' in params:
            query_params.append(('vts', params['vts']))  # noqa: E501
            collection_formats['vts'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ParamDef/GetHierachy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsParameterDefViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def param_def_get_last_setting(self, **kwargs):  # noqa: E501
        """Get the latest setting for a parameter definition  # noqa: E501

        This operation gets the latest setting for a parameter definition ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_get_last_setting(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pd_id: The parameter definition ID
        :param Type5 type: The setting type. Optional
        :param str x_api_version:
        :return: AIForgedDALModelsParameterDefSettingViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.param_def_get_last_setting_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.param_def_get_last_setting_with_http_info(**kwargs)  # noqa: E501
            return data

    def param_def_get_last_setting_with_http_info(self, **kwargs):  # noqa: E501
        """Get the latest setting for a parameter definition  # noqa: E501

        This operation gets the latest setting for a parameter definition ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_get_last_setting_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pd_id: The parameter definition ID
        :param Type5 type: The setting type. Optional
        :param str x_api_version:
        :return: AIForgedDALModelsParameterDefSettingViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pd_id', 'type', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method param_def_get_last_setting" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pd_id' in params:
            query_params.append(('pdId', params['pd_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ParamDef/GetLastSetting', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedDALModelsParameterDefSettingViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def param_def_get_parent_service(self, **kwargs):  # noqa: E501
        """Get parent service for a parameter definition by Id  # noqa: E501

        This operation gets the parent service of a parameter definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_get_parent_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The parameter definition ID
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.param_def_get_parent_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.param_def_get_parent_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def param_def_get_parent_service_with_http_info(self, **kwargs):  # noqa: E501
        """Get parent service for a parameter definition by Id  # noqa: E501

        This operation gets the parent service of a parameter definition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_get_parent_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The parameter definition ID
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method param_def_get_parent_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ParamDef/GetParentService', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsParameterDefViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def param_def_get_setting(self, **kwargs):  # noqa: E501
        """Get settings for a parameter definition by ID  # noqa: E501

        This operation gets a setting for a parameter definition by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_get_setting(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The parameter definition ID
        :param str x_api_version:
        :return: AIForgedDALModelsParameterDefSettingViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.param_def_get_setting_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.param_def_get_setting_with_http_info(**kwargs)  # noqa: E501
            return data

    def param_def_get_setting_with_http_info(self, **kwargs):  # noqa: E501
        """Get settings for a parameter definition by ID  # noqa: E501

        This operation gets a setting for a parameter definition by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_get_setting_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The parameter definition ID
        :param str x_api_version:
        :return: AIForgedDALModelsParameterDefSettingViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method param_def_get_setting" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ParamDef/GetSetting', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedDALModelsParameterDefSettingViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def param_def_get_settings(self, **kwargs):  # noqa: E501
        """Get all settings for a parameter definition  # noqa: E501

        This operation gets al setting for a parameter definition ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_get_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pd_id: The parameter definition ID
        :param Type6 type: The definition setting type. Optional
        :param str x_api_version:
        :return: list[AIForgedDALModelsParameterDefSettingViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.param_def_get_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.param_def_get_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def param_def_get_settings_with_http_info(self, **kwargs):  # noqa: E501
        """Get all settings for a parameter definition  # noqa: E501

        This operation gets al setting for a parameter definition ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_get_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pd_id: The parameter definition ID
        :param Type6 type: The definition setting type. Optional
        :param str x_api_version:
        :return: list[AIForgedDALModelsParameterDefSettingViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pd_id', 'type', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method param_def_get_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pd_id' in params:
            query_params.append(('pdId', params['pd_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ParamDef/GetSettings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AIForgedDALModelsParameterDefSettingViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def param_def_get_usage_count(self, **kwargs):  # noqa: E501
        """Get hierarchy of fields for a service  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_get_usage_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project id
        :param int pd_id: The def id
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.param_def_get_usage_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.param_def_get_usage_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def param_def_get_usage_count_with_http_info(self, **kwargs):  # noqa: E501
        """Get hierarchy of fields for a service  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_get_usage_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: The project id
        :param int pd_id: The def id
        :param str x_api_version:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'pd_id', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method param_def_get_usage_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'pd_id' in params:
            query_params.append(('pdId', params['pd_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ParamDef/GetUsageCount', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def param_def_save_setting(self, body, **kwargs):  # noqa: E501
        """Save a setting for a parameter definition  # noqa: E501

        This operation saves a setting for a parameter definition ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_save_setting(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedDALModelsParameterDefSettingViewModel body: The definition setting model (required)
        :param str x_api_version:
        :param str user_id: The user id
        :return: AIForgedDALModelsParameterDefSettingViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.param_def_save_setting_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.param_def_save_setting_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def param_def_save_setting_with_http_info(self, body, **kwargs):  # noqa: E501
        """Save a setting for a parameter definition  # noqa: E501

        This operation saves a setting for a parameter definition ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_save_setting_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedDALModelsParameterDefSettingViewModel body: The definition setting model (required)
        :param str x_api_version:
        :param str user_id: The user id
        :return: AIForgedDALModelsParameterDefSettingViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method param_def_save_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `param_def_save_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ParamDef/SaveSetting', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedDALModelsParameterDefSettingViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def param_def_update(self, body, **kwargs):  # noqa: E501
        """Update a parameter definition  # noqa: E501

        This operation gets the hierarchy of fields defined in a service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsParameterDefViewModel body: The definition model to update (required)
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.param_def_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.param_def_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def param_def_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update a parameter definition  # noqa: E501

        This operation gets the hierarchy of fields defined in a service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.param_def_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AIForgedViewModelsParameterDefViewModel body: The definition model to update (required)
        :param str x_api_version:
        :return: AIForgedViewModelsParameterDefViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method param_def_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `param_def_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_version' in params:
            header_params['X-Api-Version'] = params['x_api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ParamDef/Update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AIForgedViewModelsParameterDefViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
