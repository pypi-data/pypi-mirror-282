from typing import Any
from enum import Enum, auto, unique

@unique
class PitchName(Enum):
    C = auto()
    D = auto()
    E = auto()
    F = auto()
    G = auto()
    A = auto()
    B = auto()

class PitchClass:
    def __new__(cls: type, name: PitchName, adjustment: float = 0.0): ...

    @property
    def name(self) -> PitchName: ...
    @name.setter
    def name(self, value: PitchName) -> None: ...

    @property
    def adjustment(self) -> float: ...
    @adjustment.setter
    def adjustment(self, value: float) -> None: ...

class Pitch:
    def __new__(cls: type, pitch_class: PitchClass, octave: int): ...

    @property
    def pitch_class(self) -> PitchClass: ...
    @pitch_class.setter
    def pitch_class(self, value: PitchClass) -> None: ...

    @property
    def octave(self) -> int: ...
    @octave.setter
    def octave(self, value: int) -> None: ...

class PitchStandard:
    def resolve(self, Pitch) -> float: ...
    def __eq__(self, other: Any) -> bool: ...

class A440(PitchStandard): ...
class ScientificPitch(PitchStandard): ...
