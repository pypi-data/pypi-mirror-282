# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation: http://www.sphinx-doc.org/en/master/config

import datetime
import os
import re
import sys

import docutils.nodes
import sphinx

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
sys.path.insert(0, os.path.abspath("@PYTHON_PACKAGE_LOCATION@"))


# -- Project information -----------------------------------------------------

project = "@PROJECT_NAME@"
now = datetime.datetime.now()
_copyright = (
    str(now.year) + ", See license.txt file or the license section."
)
author = "See the README file."

# The short X.Y version
version = "@PROJECT_VERSION@"
# The full version, including alpha/beta/rc tags
release = version


# -- General configuration ---------------------------------------------------

# cmake parser custom module
currentmode = "user"

# on_rtd is whether we are on readthedocs.org, this line of code grabbed from
# docs.readthedocs.org
on_rtd = os.environ.get("READTHEDOCS", None) == "True"

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.napoleon",
    "sphinx.ext.doctest",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.mathjax",  # doxygen math in doc
    "sphinx.ext.ifconfig",
    "sphinx.ext.viewcode",
    "sphinx.ext.githubpages",
    "sphinxcontrib.moderncmakedomain",
    "myst_parser",  # to support Markdown
    "breathe",  # to define the C++ api with breathe-apidoc
]

html_baseurl = ""

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# breath extension management
breathe_projects = {project: "@DOXYGEN_XML_OUTPUT@"}
breathe_default_project = project
breathe_default_members = ("members", "undoc-members")

# cmake parsing
# primary_domain = 'cmake'
# highlight_language = 'cmake'

# The suffix(es) of source filenames.
source_suffix = [".rst", ".md", ".cmake"]

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ["internal/*", "PKG/*"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
if not on_rtd:
    import sphinx_rtd_theme

    html_theme = "sphinx_rtd_theme"
    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    'style_external_links': True,
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# path is relative to html_static_path
html_css_files = [
    "custom.css",
]

html_logo = "@LOGO@"

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

intersphinx_mapping = @INTERSPHINX_MAPPING@

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


object_description_options = [
    ("std:confval", dict(toc_icon_class="data", toc_icon_text="C")),
]


def setup(app):
    def confval_parse_format(env, sig, node):
        # Parse confval values for add_object_type().  Possible signatures are:
        # - foo
        # - foo: type
        # - foo = default_value
        # - foo: type = default_value

        # From Sphinx docs:
        # If you provide parse_node, it must be a function that takes a string and a
        # docutils node, and it must populate the node with children parsed from the
        # string. It must then return the name of the item to be used in
        # crossreferencing and index entries. See the conf.py file in the source for
        # this documentation for an example

        m = re.match(r"([a-zA-Z0-9_.]+)\s*(:([^=]+))?\s*(=(.+))?", sig)
        assert m is not None

        name = m.group(1)
        value_type = m.group(3)
        default_value = m.group(5)

        name_parts = name.rsplit(".", maxsplit=1)
        if len(name_parts) > 1:
            node += sphinx.addnodes.desc_classname(name_parts[0])
        node += sphinx.addnodes.desc_name(name_parts[-1], name_parts[-1])

        if value_type is not None:
            node += sphinx.addnodes.desc_sig_punctuation(" : ", " : ")
            node += sphinx.addnodes.desc_type("", value_type)

        if default_value is not None:
            node += sphinx.addnodes.desc_sig_punctuation(" = ", " = ")

            node += docutils.nodes.literal(
                default_value,
                default_value,
                classes=["code", "highlight"],
            )

        return name

    # Custom `confval` directive for more nicely documenting configuration values.
    #
    # Usage example:
    # ```
    # .. confval:: enable_foo: bool = False
    #
    #    Specifies whether the Foo is enabled or not.  Off by default.
    # ```
    # Both the type annotation and default value are optional.
    #
    # It is then also possible to reference it in other parts of the docs:
    # ```
    # This package supports the Foo, see :confval:`enable_foo`.
    # ```
    app.add_object_type(
        "confval",
        "confval",
        objname="configuration value",
        indextemplate="pair: %s; configuration value",
        parse_node=confval_parse_format,
    )
