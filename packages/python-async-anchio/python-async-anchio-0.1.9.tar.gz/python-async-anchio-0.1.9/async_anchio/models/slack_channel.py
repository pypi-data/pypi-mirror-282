# coding: utf-8

"""
    Anch.io

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.9
    Contact: opensource@anchio.app
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from async_anchio.models.slack_channel_purpose import SlackChannelPurpose
from async_anchio.models.slack_channel_topic import SlackChannelTopic
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SlackChannel(BaseModel):
    """
    SlackChannel
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    is_channel: StrictBool
    is_group: StrictBool
    is_im: StrictBool
    created: StrictInt
    creator: StrictStr
    is_archived: StrictBool
    is_general: StrictBool
    unlinked: StrictInt
    name_normalized: StrictStr
    is_shared: StrictBool
    is_ext_shared: StrictBool
    is_org_shared: StrictBool
    pending_shared: List[StrictStr]
    is_pending_ext_shared: StrictBool
    is_member: StrictBool
    is_private: StrictBool
    is_mpim: StrictBool
    updated: StrictInt
    topic: SlackChannelTopic
    purpose: SlackChannelPurpose
    previous_names: List[StrictStr]
    num_members: StrictInt
    __properties: ClassVar[List[str]] = ["id", "name", "is_channel", "is_group", "is_im", "created", "creator", "is_archived", "is_general", "unlinked", "name_normalized", "is_shared", "is_ext_shared", "is_org_shared", "pending_shared", "is_pending_ext_shared", "is_member", "is_private", "is_mpim", "updated", "topic", "purpose", "previous_names", "num_members"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SlackChannel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of topic
        if self.topic:
            _dict['topic'] = self.topic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purpose
        if self.purpose:
            _dict['purpose'] = self.purpose.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SlackChannel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "is_channel": obj.get("is_channel"),
            "is_group": obj.get("is_group"),
            "is_im": obj.get("is_im"),
            "created": obj.get("created"),
            "creator": obj.get("creator"),
            "is_archived": obj.get("is_archived"),
            "is_general": obj.get("is_general"),
            "unlinked": obj.get("unlinked"),
            "name_normalized": obj.get("name_normalized"),
            "is_shared": obj.get("is_shared"),
            "is_ext_shared": obj.get("is_ext_shared"),
            "is_org_shared": obj.get("is_org_shared"),
            "pending_shared": obj.get("pending_shared"),
            "is_pending_ext_shared": obj.get("is_pending_ext_shared"),
            "is_member": obj.get("is_member"),
            "is_private": obj.get("is_private"),
            "is_mpim": obj.get("is_mpim"),
            "updated": obj.get("updated"),
            "topic": SlackChannelTopic.from_dict(obj.get("topic")) if obj.get("topic") is not None else None,
            "purpose": SlackChannelPurpose.from_dict(obj.get("purpose")) if obj.get("purpose") is not None else None,
            "previous_names": obj.get("previous_names"),
            "num_members": obj.get("num_members")
        })
        return _obj


