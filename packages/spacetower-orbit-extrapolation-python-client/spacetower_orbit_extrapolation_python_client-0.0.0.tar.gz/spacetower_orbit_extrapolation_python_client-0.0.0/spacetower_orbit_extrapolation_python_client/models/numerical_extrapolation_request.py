# coding: utf-8

"""
    Orbit Extrapolation API

    Orbit Extrapolation API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from spacetower_orbit_extrapolation_python_client.models.attitude_ephemeris_request import AttitudeEphemerisRequest
from spacetower_orbit_extrapolation_python_client.models.attitude_sequence import AttitudeSequence
from spacetower_orbit_extrapolation_python_client.models.battery_model import BatteryModel
from spacetower_orbit_extrapolation_python_client.models.battery_power_ephemeris_request import BatteryPowerEphemerisRequest
from spacetower_orbit_extrapolation_python_client.models.covariance_matrix import CovarianceMatrix
from spacetower_orbit_extrapolation_python_client.models.field_of_view_event_request import FieldOfViewEventRequest
from spacetower_orbit_extrapolation_python_client.models.geodetic_ephemeris_request import GeodeticEphemerisRequest
from spacetower_orbit_extrapolation_python_client.models.integrator_configuration import IntegratorConfiguration
from spacetower_orbit_extrapolation_python_client.models.maneuver_schedule import ManeuverSchedule
from spacetower_orbit_extrapolation_python_client.models.mass_ephemeris_request import MassEphemerisRequest
from spacetower_orbit_extrapolation_python_client.models.mean_orbit_ephemeris_request import MeanOrbitEphemerisRequest
from spacetower_orbit_extrapolation_python_client.models.orbit import Orbit
from spacetower_orbit_extrapolation_python_client.models.orbit_covariance_request import OrbitCovarianceRequest
from spacetower_orbit_extrapolation_python_client.models.orbital_event_request import OrbitalEventRequest
from spacetower_orbit_extrapolation_python_client.models.osculating_orbit_ephemeris_request import OsculatingOrbitEphemerisRequest
from spacetower_orbit_extrapolation_python_client.models.perturbations_configuration import PerturbationsConfiguration
from spacetower_orbit_extrapolation_python_client.models.position_velocity_covariance_ephemeris_request import PositionVelocityCovarianceEphemerisRequest
from spacetower_orbit_extrapolation_python_client.models.position_velocity_ephemeris_request import PositionVelocityEphemerisRequest
from spacetower_orbit_extrapolation_python_client.models.reference_frames_configuration import ReferenceFramesConfiguration
from spacetower_orbit_extrapolation_python_client.models.space_object import SpaceObject
from spacetower_orbit_extrapolation_python_client.models.station_event_request import StationEventRequest
from typing import Optional, Set
from typing_extensions import Self

class NumericalExtrapolationRequest(BaseModel):
    """
    Configuration for extrapolation based on special perturbations method
    """ # noqa: E501
    target_date: Optional[datetime] = Field(default=None, description="timescale UTC", alias="targetDate")
    initial_orbit: Optional[Orbit] = Field(default=None, alias="initialOrbit")
    initial_covariance_matrix: Optional[CovarianceMatrix] = Field(default=None, alias="initialCovarianceMatrix")
    attitude_sequence: Optional[AttitudeSequence] = Field(default=None, alias="attitudeSequence")
    spacecraft: Optional[SpaceObject] = None
    battery_model: Optional[BatteryModel] = Field(default=None, alias="batteryModel")
    reference_frames_configuration: Optional[ReferenceFramesConfiguration] = Field(default=None, alias="referenceFramesConfiguration")
    perturbations_configuration: Optional[PerturbationsConfiguration] = Field(default=None, alias="perturbationsConfiguration")
    maneuver_schedule: Optional[ManeuverSchedule] = Field(default=None, alias="maneuverSchedule")
    integrator_configuration: Optional[IntegratorConfiguration] = Field(default=None, alias="integratorConfiguration")
    orbital_events_request: Optional[OrbitalEventRequest] = Field(default=None, alias="orbitalEventsRequest")
    station_event_request: Optional[StationEventRequest] = Field(default=None, alias="stationEventRequest")
    field_of_view_event_request: Optional[FieldOfViewEventRequest] = Field(default=None, alias="fieldOfViewEventRequest")
    attitude_ephemeris_request: Optional[AttitudeEphemerisRequest] = Field(default=None, alias="attitudeEphemerisRequest")
    osculating_orbit_ephemeris_request: Optional[OsculatingOrbitEphemerisRequest] = Field(default=None, alias="osculatingOrbitEphemerisRequest")
    position_velocity_ephemeris_request: Optional[PositionVelocityEphemerisRequest] = Field(default=None, alias="positionVelocityEphemerisRequest")
    geodetic_ephemeris_request: Optional[GeodeticEphemerisRequest] = Field(default=None, alias="geodeticEphemerisRequest")
    mean_orbit_ephemeris_request: Optional[MeanOrbitEphemerisRequest] = Field(default=None, alias="meanOrbitEphemerisRequest")
    orbit_covariance_ephemeris_request: Optional[OrbitCovarianceRequest] = Field(default=None, alias="orbitCovarianceEphemerisRequest")
    position_velocity_covariance_ephemeris_request: Optional[PositionVelocityCovarianceEphemerisRequest] = Field(default=None, alias="positionVelocityCovarianceEphemerisRequest")
    battery_power_ephemeris_request: Optional[BatteryPowerEphemerisRequest] = Field(default=None, alias="batteryPowerEphemerisRequest")
    mass_ephemeris_request: Optional[MassEphemerisRequest] = Field(default=None, alias="massEphemerisRequest")
    __properties: ClassVar[List[str]] = ["targetDate", "initialOrbit", "initialCovarianceMatrix", "attitudeSequence", "spacecraft", "batteryModel", "referenceFramesConfiguration", "perturbationsConfiguration", "maneuverSchedule", "integratorConfiguration", "orbitalEventsRequest", "stationEventRequest", "fieldOfViewEventRequest", "attitudeEphemerisRequest", "osculatingOrbitEphemerisRequest", "positionVelocityEphemerisRequest", "geodeticEphemerisRequest", "meanOrbitEphemerisRequest", "orbitCovarianceEphemerisRequest", "positionVelocityCovarianceEphemerisRequest", "batteryPowerEphemerisRequest", "massEphemerisRequest"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NumericalExtrapolationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of initial_orbit
        if self.initial_orbit:
            _dict['initialOrbit'] = self.initial_orbit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initial_covariance_matrix
        if self.initial_covariance_matrix:
            _dict['initialCovarianceMatrix'] = self.initial_covariance_matrix.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attitude_sequence
        if self.attitude_sequence:
            _dict['attitudeSequence'] = self.attitude_sequence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spacecraft
        if self.spacecraft:
            _dict['spacecraft'] = self.spacecraft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of battery_model
        if self.battery_model:
            _dict['batteryModel'] = self.battery_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reference_frames_configuration
        if self.reference_frames_configuration:
            _dict['referenceFramesConfiguration'] = self.reference_frames_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of perturbations_configuration
        if self.perturbations_configuration:
            _dict['perturbationsConfiguration'] = self.perturbations_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maneuver_schedule
        if self.maneuver_schedule:
            _dict['maneuverSchedule'] = self.maneuver_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integrator_configuration
        if self.integrator_configuration:
            _dict['integratorConfiguration'] = self.integrator_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of orbital_events_request
        if self.orbital_events_request:
            _dict['orbitalEventsRequest'] = self.orbital_events_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of station_event_request
        if self.station_event_request:
            _dict['stationEventRequest'] = self.station_event_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of field_of_view_event_request
        if self.field_of_view_event_request:
            _dict['fieldOfViewEventRequest'] = self.field_of_view_event_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attitude_ephemeris_request
        if self.attitude_ephemeris_request:
            _dict['attitudeEphemerisRequest'] = self.attitude_ephemeris_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of osculating_orbit_ephemeris_request
        if self.osculating_orbit_ephemeris_request:
            _dict['osculatingOrbitEphemerisRequest'] = self.osculating_orbit_ephemeris_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position_velocity_ephemeris_request
        if self.position_velocity_ephemeris_request:
            _dict['positionVelocityEphemerisRequest'] = self.position_velocity_ephemeris_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geodetic_ephemeris_request
        if self.geodetic_ephemeris_request:
            _dict['geodeticEphemerisRequest'] = self.geodetic_ephemeris_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mean_orbit_ephemeris_request
        if self.mean_orbit_ephemeris_request:
            _dict['meanOrbitEphemerisRequest'] = self.mean_orbit_ephemeris_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of orbit_covariance_ephemeris_request
        if self.orbit_covariance_ephemeris_request:
            _dict['orbitCovarianceEphemerisRequest'] = self.orbit_covariance_ephemeris_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position_velocity_covariance_ephemeris_request
        if self.position_velocity_covariance_ephemeris_request:
            _dict['positionVelocityCovarianceEphemerisRequest'] = self.position_velocity_covariance_ephemeris_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of battery_power_ephemeris_request
        if self.battery_power_ephemeris_request:
            _dict['batteryPowerEphemerisRequest'] = self.battery_power_ephemeris_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mass_ephemeris_request
        if self.mass_ephemeris_request:
            _dict['massEphemerisRequest'] = self.mass_ephemeris_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NumericalExtrapolationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "targetDate": obj.get("targetDate"),
            "initialOrbit": Orbit.from_dict(obj["initialOrbit"]) if obj.get("initialOrbit") is not None else None,
            "initialCovarianceMatrix": CovarianceMatrix.from_dict(obj["initialCovarianceMatrix"]) if obj.get("initialCovarianceMatrix") is not None else None,
            "attitudeSequence": AttitudeSequence.from_dict(obj["attitudeSequence"]) if obj.get("attitudeSequence") is not None else None,
            "spacecraft": SpaceObject.from_dict(obj["spacecraft"]) if obj.get("spacecraft") is not None else None,
            "batteryModel": BatteryModel.from_dict(obj["batteryModel"]) if obj.get("batteryModel") is not None else None,
            "referenceFramesConfiguration": ReferenceFramesConfiguration.from_dict(obj["referenceFramesConfiguration"]) if obj.get("referenceFramesConfiguration") is not None else None,
            "perturbationsConfiguration": PerturbationsConfiguration.from_dict(obj["perturbationsConfiguration"]) if obj.get("perturbationsConfiguration") is not None else None,
            "maneuverSchedule": ManeuverSchedule.from_dict(obj["maneuverSchedule"]) if obj.get("maneuverSchedule") is not None else None,
            "integratorConfiguration": IntegratorConfiguration.from_dict(obj["integratorConfiguration"]) if obj.get("integratorConfiguration") is not None else None,
            "orbitalEventsRequest": OrbitalEventRequest.from_dict(obj["orbitalEventsRequest"]) if obj.get("orbitalEventsRequest") is not None else None,
            "stationEventRequest": StationEventRequest.from_dict(obj["stationEventRequest"]) if obj.get("stationEventRequest") is not None else None,
            "fieldOfViewEventRequest": FieldOfViewEventRequest.from_dict(obj["fieldOfViewEventRequest"]) if obj.get("fieldOfViewEventRequest") is not None else None,
            "attitudeEphemerisRequest": AttitudeEphemerisRequest.from_dict(obj["attitudeEphemerisRequest"]) if obj.get("attitudeEphemerisRequest") is not None else None,
            "osculatingOrbitEphemerisRequest": OsculatingOrbitEphemerisRequest.from_dict(obj["osculatingOrbitEphemerisRequest"]) if obj.get("osculatingOrbitEphemerisRequest") is not None else None,
            "positionVelocityEphemerisRequest": PositionVelocityEphemerisRequest.from_dict(obj["positionVelocityEphemerisRequest"]) if obj.get("positionVelocityEphemerisRequest") is not None else None,
            "geodeticEphemerisRequest": GeodeticEphemerisRequest.from_dict(obj["geodeticEphemerisRequest"]) if obj.get("geodeticEphemerisRequest") is not None else None,
            "meanOrbitEphemerisRequest": MeanOrbitEphemerisRequest.from_dict(obj["meanOrbitEphemerisRequest"]) if obj.get("meanOrbitEphemerisRequest") is not None else None,
            "orbitCovarianceEphemerisRequest": OrbitCovarianceRequest.from_dict(obj["orbitCovarianceEphemerisRequest"]) if obj.get("orbitCovarianceEphemerisRequest") is not None else None,
            "positionVelocityCovarianceEphemerisRequest": PositionVelocityCovarianceEphemerisRequest.from_dict(obj["positionVelocityCovarianceEphemerisRequest"]) if obj.get("positionVelocityCovarianceEphemerisRequest") is not None else None,
            "batteryPowerEphemerisRequest": BatteryPowerEphemerisRequest.from_dict(obj["batteryPowerEphemerisRequest"]) if obj.get("batteryPowerEphemerisRequest") is not None else None,
            "massEphemerisRequest": MassEphemerisRequest.from_dict(obj["massEphemerisRequest"]) if obj.get("massEphemerisRequest") is not None else None
        })
        return _obj


