# coding: utf-8

"""
    Orbit Extrapolation API

    Orbit Extrapolation API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbit_extrapolation_python_client.models.numerical_extrapolation_request import NumericalExtrapolationRequest

class TestNumericalExtrapolationRequest(unittest.TestCase):
    """NumericalExtrapolationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NumericalExtrapolationRequest:
        """Test NumericalExtrapolationRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NumericalExtrapolationRequest`
        """
        model = NumericalExtrapolationRequest()
        if include_optional:
            return NumericalExtrapolationRequest(
                target_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                initial_orbit = spacetower_orbit_extrapolation_python_client.models.orbit.Orbit(),
                initial_covariance_matrix = spacetower_orbit_extrapolation_python_client.models.covariance_matrix.CovarianceMatrix(),
                attitude_sequence = spacetower_orbit_extrapolation_python_client.models.attitude_sequence.AttitudeSequence(
                    celestial_body_configuration = spacetower_orbit_extrapolation_python_client.models.celestial_body_configuration.CelestialBodyConfiguration(
                        bodies = [
                            'SUN'
                            ], ), 
                    initial_attitude_law = spacetower_orbit_extrapolation_python_client.models.attitude_law.AttitudeLaw(), ),
                spacecraft = spacetower_orbit_extrapolation_python_client.models.space_object.SpaceObject(
                    mass = 1.337, 
                    solar_array_system = spacetower_orbit_extrapolation_python_client.models.solar_array_system.SolarArraySystem(
                        solar_array_power = 1.337, ), 
                    propulsion_system = spacetower_orbit_extrapolation_python_client.models.propulsion_system.PropulsionSystem(
                        active_propulsion_power_consumption = 1.337, 
                        thruster = spacetower_orbit_extrapolation_python_client.models.thruster.Thruster(
                            thrust = 1.337, 
                            specific_impulse = 1.337, 
                            thruster_axis_x = 1.337, 
                            thruster_axis_y = 1.337, 
                            thruster_axis_z = 1.337, ), ), ),
                battery_model = spacetower_orbit_extrapolation_python_client.models.battery_model.BatteryModel(
                    nominal_capacity = 1.337, 
                    depth_of_discharge = 1.337, 
                    initial_charge = 1.337, 
                    minimum_charge_when_firing = 1.337, ),
                reference_frames_configuration = spacetower_orbit_extrapolation_python_client.models.reference_frames_configuration.ReferenceFramesConfiguration(
                    earth_centered_inertial_frame = 'GCRF', 
                    earth_centered_fixed_frame = 'ITRF2010', 
                    ellipsoid_model = 'WGS84', ),
                perturbations_configuration = spacetower_orbit_extrapolation_python_client.models.perturbations_configuration.PerturbationsConfiguration(
                    celestial_body_configuration = spacetower_orbit_extrapolation_python_client.models.celestial_body_configuration.CelestialBodyConfiguration(
                        bodies = [
                            'SUN'
                            ], ), 
                    perturbations = [
                        spacetower_orbit_extrapolation_python_client.models.perturbation.Perturbation()
                        ], ),
                maneuver_schedule = spacetower_orbit_extrapolation_python_client.models.maneuver_schedule.ManeuverSchedule(),
                integrator_configuration = spacetower_orbit_extrapolation_python_client.models.integrator_configuration.IntegratorConfiguration(),
                orbital_events_request = spacetower_orbit_extrapolation_python_client.models.orbital_event_request.OrbitalEventRequest(
                    celestial_body_configuration = spacetower_orbit_extrapolation_python_client.models.celestial_body_configuration.CelestialBodyConfiguration(
                        bodies = [
                            'SUN'
                            ], ), 
                    event_type = [
                        'ECLIPSE'
                        ], ),
                station_event_request = spacetower_orbit_extrapolation_python_client.models.station_event_request.StationEventRequest(
                    minimum_duration = 1.337, 
                    ground_stations = [
                        spacetower_orbit_extrapolation_python_client.models.ground_station.GroundStation(
                            name = '', 
                            longitude = 1.337, 
                            latitude = 1.337, 
                            altitude = 1.337, 
                            minimum_elevation = 1.337, )
                        ], ),
                field_of_view_event_request = spacetower_orbit_extrapolation_python_client.models.field_of_view_event_request.FieldOfViewEventRequest(
                    minimum_duration = 1.337, 
                    field_of_view = spacetower_orbit_extrapolation_python_client.models.field_of_view.FieldOfView(), 
                    target_body_names = [
                        'SUN'
                        ], ),
                attitude_ephemeris_request = spacetower_orbit_extrapolation_python_client.models.attitude_ephemeris_request.AttitudeEphemerisRequest(
                    attitude_representation_type = 'QUAT_ECI_SAT', ),
                osculating_orbit_ephemeris_request = spacetower_orbit_extrapolation_python_client.models.osculating_orbit_ephemeris_request.OsculatingOrbitEphemerisRequest(
                    position_angle_type = 'MEAN', 
                    orbit_type = 'KEPLERIAN', ),
                position_velocity_ephemeris_request = spacetower_orbit_extrapolation_python_client.models.position_velocity_ephemeris_request.PositionVelocityEphemerisRequest(
                    frame_type = 'EARTH_CENTERED_FIXED', 
                    oem_request = spacetower_orbit_extrapolation_python_client.models.oem_request.OemRequest(
                        file_format = 'KVN', 
                        write_acceleration = True, 
                        write_covariance = True, 
                        object_name = '', 
                        object_id = '', 
                        creator = '', ), ),
                geodetic_ephemeris_request = None,
                mean_orbit_ephemeris_request = spacetower_orbit_extrapolation_python_client.models.mean_orbit_ephemeris_request.MeanOrbitEphemerisRequest(
                    mean_theory = 'DSST_6X0', ),
                orbit_covariance_ephemeris_request = None,
                position_velocity_covariance_ephemeris_request = spacetower_orbit_extrapolation_python_client.models.position_velocity_covariance_ephemeris_request.PositionVelocityCovarianceEphemerisRequest(
                    frame = 'ECI', ),
                battery_power_ephemeris_request = None,
                mass_ephemeris_request = None
            )
        else:
            return NumericalExtrapolationRequest(
        )
        """

    def testNumericalExtrapolationRequest(self):
        """Test NumericalExtrapolationRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
