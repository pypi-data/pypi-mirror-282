# coding: utf-8

"""
    Orbit Extrapolation API

    Orbit Extrapolation API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbit_extrapolation_python_client.models.numerical_extrapolation_result import NumericalExtrapolationResult

class TestNumericalExtrapolationResult(unittest.TestCase):
    """NumericalExtrapolationResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NumericalExtrapolationResult:
        """Test NumericalExtrapolationResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NumericalExtrapolationResult`
        """
        model = NumericalExtrapolationResult()
        if include_optional:
            return NumericalExtrapolationResult(
                attitude_ephemeris = spacetower_orbit_extrapolation_python_client.models.attitude_ephemeris.AttitudeEphemeris(
                    frame = 'GCRF', ),
                battery_power_ephemeris = None,
                mass_ephemeris = None,
                osculating_orbit_ephemeris = spacetower_orbit_extrapolation_python_client.models.osculating_orbit_ephemeris.OsculatingOrbitEphemeris(
                    frame = 'GCRF', 
                    orbit_type = 'KEPLERIAN', 
                    position_angle_type = 'MEAN', ),
                mean_orbit_ephemeris = spacetower_orbit_extrapolation_python_client.models.mean_orbit_ephemeris.MeanOrbitEphemeris(
                    frame = 'GCRF', 
                    mean_elements_theory = 'DSST_6X0', ),
                geodetic_ephemeris = None,
                position_velocity_ephemeris = spacetower_orbit_extrapolation_python_client.models.position_velocity_ephemeris.PositionVelocityEphemeris(
                    frame = 'GCRF', 
                    orbit_ephemeris_message = '', ),
                cartesian_covariance_ephemeris = spacetower_orbit_extrapolation_python_client.models.cartesian_covariance_ephemeris.CartesianCovarianceEphemeris(
                    frame = 'ECI', ),
                orbital_event_logs = [
                    spacetower_orbit_extrapolation_python_client.models.orbital_event_log.OrbitalEventLog(
                        utc_date = '', 
                        event_type = 'ECLIPSE_EXIT', )
                    ],
                station_event_logs = [
                    spacetower_orbit_extrapolation_python_client.models.station_visibility_event_log.StationVisibilityEventLog(
                        utc_date = '', 
                        event_type = 'STATION_ENTER', 
                        ground_station_name = '', )
                    ],
                field_of_view_event_logs = [
                    spacetower_orbit_extrapolation_python_client.models.field_of_view_event_log.FieldOfViewEventLog(
                        utc_date = '', 
                        event_type = 'FOV_ENTER', 
                        body_name = '', )
                    ]
            )
        else:
            return NumericalExtrapolationResult(
        )
        """

    def testNumericalExtrapolationResult(self):
        """Test NumericalExtrapolationResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
