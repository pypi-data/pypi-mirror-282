[
  "data/seq.py::_TestSeq::_test___add__",
  "data/seq.py::_TestSeq::_test_and_then",
  "data/seq.py::_TestSeq::_test_ap",
  "data/seq.py::_TestSeq::_test_as_bool",
  "data/seq.py::_TestSeq::_test_fmap",
  "data/seq.py::_TestSeq::_test_pure",
  "data/tree.py::_TestTree::_test_and_then",
  "data/tree.py::_TestTree::_test_ap",
  "data/tree.py::_TestTree::_test_flatten",
  "data/tree.py::_TestTree::_test_fmap",
  "data/tree.py::_TestTree::_test_fold",
  "data/tree.py::_TestTree::_test_height",
  "data/tree.py::_TestTree::_test_pure",
  "data/tree.py::_TestTree::_test_unfold",
  "data/tree.py::_TestTree::_test_zip",
  "data/tree.py::_TestTree::test_levels",
  "data/tree.py::_test_fold_tree",
  "data/tree.py::_test_merge_trees",
  "data/tree.py::_test_split_tree",
  "data/tree.py::_test_unfold_tree",
  "parsec/char.py::_test_alpha_num",
  "parsec/char.py::_test_any_char",
  "parsec/char.py::_test_char",
  "parsec/char.py::_test_crlf",
  "parsec/char.py::_test_digit",
  "parsec/char.py::_test_end_of_line",
  "parsec/char.py::_test_hex_digit",
  "parsec/char.py::_test_letter",
  "parsec/char.py::_test_lower",
  "parsec/char.py::_test_new_line",
  "parsec/char.py::_test_none_of",
  "parsec/char.py::_test_oct_digit",
  "parsec/char.py::_test_one_of",
  "parsec/char.py::_test_satisfy",
  "parsec/char.py::_test_space",
  "parsec/char.py::_test_spaces",
  "parsec/char.py::_test_string",
  "parsec/char.py::_test_string_",
  "parsec/char.py::_test_tab",
  "parsec/char.py::_test_upper",
  "parsec/combinator.py::_test_any_token",
  "parsec/combinator.py::_test_between",
  "parsec/combinator.py::_test_chain1",
  "parsec/combinator.py::_test_chainl",
  "parsec/combinator.py::_test_chainr1",
  "parsec/combinator.py::_test_choice",
  "parsec/combinator.py::_test_count",
  "parsec/combinator.py::_test_end_by",
  "parsec/combinator.py::_test_end_by1",
  "parsec/combinator.py::_test_eof",
  "parsec/combinator.py::_test_many",
  "parsec/combinator.py::_test_many_till",
  "parsec/combinator.py::_test_not_followed_by",
  "parsec/combinator.py::_test_option",
  "parsec/combinator.py::_test_option_maybe",
  "parsec/combinator.py::_test_optional",
  "parsec/combinator.py::_test_sep_by",
  "parsec/combinator.py::_test_sep_by1",
  "parsec/combinator.py::_test_sep_end_by",
  "parsec/combinator.py::_test_sep_end_by1",
  "parsec/combinator.py::_test_skip_many1",
  "parsec/combinator.py::_test_some",
  "parsec/prim.py::_TestMessage::_test_equality",
  "prelude.py::_test_append",
  "prelude.py::_test_chunks_of",
  "prelude.py::_test_concat",
  "prelude.py::_test_concat_map",
  "prelude.py::_test_curry",
  "prelude.py::_test_cycle",
  "prelude.py::_test_drop",
  "prelude.py::_test_drop_while",
  "prelude.py::_test_elem",
  "prelude.py::_test_elem_index",
  "prelude.py::_test_filter",
  "prelude.py::_test_filter_map",
  "prelude.py::_test_find",
  "prelude.py::_test_find_index",
  "prelude.py::_test_foldl",
  "prelude.py::_test_foldr",
  "prelude.py::_test_fst",
  "prelude.py::_test_group",
  "prelude.py::_test_group_by",
  "prelude.py::_test_head",
  "prelude.py::_test_init",
  "prelude.py::_test_intercalate",
  "prelude.py::_test_intersperse",
  "prelude.py::_test_is_prefix_of",
  "prelude.py::_test_is_suffix_of",
  "prelude.py::_test_iterate",
  "prelude.py::_test_last",
  "prelude.py::_test_length",
  "prelude.py::_test_lines",
  "prelude.py::_test_lookup",
  "prelude.py::_test_map",
  "prelude.py::_test_not_elem",
  "prelude.py::_test_nth",
  "prelude.py::_test_null",
  "prelude.py::_test_partition",
  "prelude.py::_test_repeat",
  "prelude.py::_test_replicate",
  "prelude.py::_test_reverse",
  "prelude.py::_test_scanl",
  "prelude.py::_test_scanl1",
  "prelude.py::_test_scanr",
  "prelude.py::_test_snd",
  "prelude.py::_test_sort",
  "prelude.py::_test_sort_on",
  "prelude.py::_test_span",
  "prelude.py::_test_split_at",
  "prelude.py::_test_tail",
  "prelude.py::_test_take",
  "prelude.py::_test_take_while",
  "prelude.py::_test_transpose",
  "prelude.py::_test_uncons",
  "prelude.py::_test_uncurry",
  "prelude.py::_test_unique",
  "prelude.py::_test_unlines",
  "prelude.py::_test_unwords",
  "prelude.py::_test_unzip",
  "prelude.py::_test_words",
  "prelude.py::_test_zip",
  "prelude.py::_test_zip_with"
]