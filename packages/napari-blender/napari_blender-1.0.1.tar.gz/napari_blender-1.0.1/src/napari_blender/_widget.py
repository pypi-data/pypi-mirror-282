"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""
from typing import TYPE_CHECKING

from magicgui import magic_factory
from magicgui.widgets import CheckBox, Container, create_widget, Label
from skimage.util import img_as_float
import napari
from scripts.enums import MODES, ROTATION, SAMPLES, METRIC
from scripts.interface import set_values
from napari_video.napari_video import VideoReaderNP
from napari import Viewer
from napari.layers import Image
from pathlib import Path
from tkinter import messagebox

if TYPE_CHECKING:
    import napari

# Function for creating a widget that generates a transparent visualization
@magic_factory(
    call_button="Create Visualization",
    start_frame={"min": 0},
    end_frame={"min": 0},
)
def transparant_widget(
    viewer: Viewer,  # Add the viewer as a parameter
    gt_layer: Image,
    prediction_layer: Image,
    start_frame: int = 0,
    end_frame: int = 0,
    rotation=ROTATION.Very_Quick,
    video_quality=SAMPLES.Low,
    output_location=Path.home(),
    filename='transparant.mp4',
    display_text=True,
    scene_name='transparant.blend',
    save_scene=False,
) -> None:
    
    label = Label(value="Gradient Visualization Parameters")
    
    # Normally, here you'd integrate the label with your GUI layout.
    # For example, if you are manually building a container for the widgets:
    # container = transparant_widget.native.layout()  # Assuming `widget` is the container widget
    # container.insertWidget(0, label.native)  # Insert the label at the top of the layout
    
    if not validate_input([gt_layer, prediction_layer], start_frame, end_frame, filename, save_scene, scene_name):
        return
    
    ground_truth = gt_layer.data
    prediction = prediction_layer.data

    if(min(ground_truth.ndim, prediction.ndim) < 4):
        max_frame_index = 0
    else:
        max_frame_index = ground_truth.shape[0] - 1

    start_frame = min(start_frame, max_frame_index)
    end_frame = min(end_frame, max_frame_index)

    dict = {'DATA1': ground_truth, 'DATA2': prediction, 'GT_NAME': gt_layer.name, 'PRED_NAME': prediction_layer.name, 'START': start_frame, 'SAVE_SCENE': save_scene, 'SCENE_NAME': scene_name, 'END': end_frame, 'LENGTH': rotation.value, 'SAMPLES': video_quality.value, 'SRC_VID': output_location, 'FILENAME': filename, 'SHOW_TEXT': display_text}

    set_values(dict, viewer, mode=MODES.Transparant)

# Function for creating a widget that generates a transparent visualization
@magic_factory(
    call_button="Create Visualization",
    start_frame={"min": 0},
    end_frame={"min": 0},
)
def microscopy_widget(
    viewer: Viewer,  # Add the viewer as a parameter
    gt_layer: Image,
    prediction_layer: Image,
    start_frame: int = 0,
    end_frame: int = 0,
    rotation=ROTATION.Very_Quick,
    video_quality=SAMPLES.Low,
    output_location=Path.home(),
    filename='microscopy.mp4',
    scene_name='microscopy.blend',
    save_scene=False,
) -> None:
    
    label = Label(value="Gradient Visualization Parameters")
    
    # Normally, here you'd integrate the label with your GUI layout.
    # For example, if you are manually building a container for the widgets:
    # container = microscopy_widget.native.layout()  # Assuming `widget` is the container widget
    # container.insertWidget(0, label.native)  # Insert the label at the top of the layout
    
    if not validate_input([gt_layer, prediction_layer], start_frame, end_frame, filename, save_scene, scene_name):
        return
    
    ground_truth = gt_layer.data
    prediction = prediction_layer.data

    if(min(ground_truth.ndim, prediction.ndim) < 4):
        max_frame_index = 0
    else:
        max_frame_index = ground_truth.shape[0] - 1

    start_frame = min(start_frame, max_frame_index)
    end_frame = min(end_frame, max_frame_index)

    dict = {'DATA1': ground_truth, 'DATA2': prediction, 'GT_NAME': gt_layer.name, 'PRED_NAME': prediction_layer.name, 'START': start_frame, 'CREATE_GROUND_TRUTH': True, 'SAVE_SCENE': save_scene, 'SCENE_NAME': scene_name, 'END': end_frame, 'LENGTH': rotation.value, 'SAMPLES': video_quality.value, 'SRC_VID': output_location, 'FILENAME': filename}

    set_values(dict, viewer, mode=MODES.Microscopy)

# Function for creating a widget that generates a gradient visualization
@magic_factory(
    call_button="Create Visualization",
    start_frame={"min": 0},
    end_frame={"min": 0},
)
def gradient_widget(
    viewer: Viewer,  # Add the viewer as a parameter
    gt_layer: Image,
    prediction_layer: Image,
    start_frame: int = 0,
    end_frame: int = 0,
    rotation=ROTATION.Very_Quick,
    video_quality=SAMPLES.Low,
    main_metric=METRIC.JI_Index,
    output_location=Path.home(),
    filename='gradient.mp4',
    display_text=True,
    scene_name='gradient.blend',
    save_scene=False,
) -> None:
    
    if not validate_input([gt_layer, prediction_layer], start_frame, end_frame, filename, save_scene, scene_name):
        return
    
    ground_truth = gt_layer.data
    prediction = prediction_layer.data
    
    if(min(ground_truth.ndim, prediction.ndim) < 4):
        max_frame_index = 0
    else:
        max_frame_index = ground_truth.shape[0] - 1

    start_frame = min(start_frame, max_frame_index)
    end_frame = min(end_frame, max_frame_index)

    dict = {'DATA1': ground_truth, 'DATA2': prediction, 'GT_NAME': gt_layer.name, 'PRED_NAME': prediction_layer.name, 'START': start_frame, 'END': end_frame, 'SAVE_SCENE': save_scene, 'SCENE_NAME': scene_name, 'HUE_METRIC': main_metric, 'LENGTH': rotation.value, 'SAMPLES': video_quality.value, 'SRC_VID': output_location, 'FILENAME': filename, 'SHOW_TEXT': display_text}

    set_values(dict, viewer, mode=MODES.Gradient)

# Function for creating a widget that generates a tracked visualization
@magic_factory(
    call_button="Run",
    start_frame={"min": 0},
    end_frame={"min": 0},
)
def tracked_widget(
    viewer: Viewer,
    gt_layer: Image,
    prediction_layer: Image,
    start_frame: "int" = 0,
    end_frame: int = 0,
    rotation=ROTATION.Very_Quick,
    video_quality=SAMPLES.Low,
    tracking_file=Path.home(),
    output_location=Path.home(),
    filename='tracked.mp4',
    display_text=True,
    scene_name='tracked.blend',
    save_scene=False,
) -> None:
    
    if not validate_input([gt_layer, prediction_layer], start_frame, end_frame, filename, save_scene, scene_name):
        return
        
    ground_truth = gt_layer.data
    prediction = prediction_layer.data

    if(min(ground_truth.ndim, prediction.ndim) < 4):
        max_frame_index = 0
    else:
        max_frame_index = ground_truth.shape[0] - 1

    start_frame = min(start_frame, max_frame_index)
    end_frame = min(end_frame, max_frame_index)
    dict = {'DATA1': ground_truth, 'DATA2':prediction, 'GT_NAME': gt_layer.name, 'PRED_NAME': prediction_layer.name,'TRACK': tracking_file, 'START': start_frame, 'END': end_frame, 'SAVE_SCENE': save_scene, 'SCENE_NAME': scene_name, 'LENGTH': rotation.value, 'SAMPLES': video_quality.value, 'SRC_VID': output_location, 'FILENAME': filename, 'SHOW_TEXT': display_text}

    set_values(dict, viewer, mode=MODES.Tracked)

# Function for creating a widget that generates a timelapse visualization
@magic_factory(
    call_button="Run",
    start_frame={"min": 0},
    end_frame={"min": 0},
)
def timelapse_widget(
    viewer: Viewer,
    stack_layer: Image,
    start_frame: "int" = 0,
    end_frame: int = 0,
    video_quality=SAMPLES.Low,
    tracking_file=Path.home(),
    output_location=Path.home(),
    filename='timelapse.mp4',
    display_text=True,
    scene_name='timelapse.blend',
    save_scene=False,
) -> None:
    
    if not validate_input([stack_layer], start_frame, end_frame, filename, save_scene, scene_name, tracking_file):
        return
    
    stack = stack_layer.data

    if(stack_layer.ndim < 4):
        max_frame_index = 0
    else:
        max_frame_index = stack.shape[0] - 1

    start_frame = min(start_frame, max_frame_index)
    end_frame = min(end_frame, max_frame_index)

    dict = {'DATA1': stack, 'TRACK': tracking_file, 'GT_NAME': stack_layer.name, 'START': start_frame, 'END': end_frame, 'LENGTH': 50, 'SAMPLES': video_quality.value, 'SRC_VID': output_location, 'FILENAME': filename, 'SAVE_SCENE': save_scene, 'SCENE_NAME': scene_name, 'SHOW_TEXT': display_text}

    set_values(dict, viewer, mode=MODES.Timelapse)

@magic_factory(
    call_button="Run",
)
def video_loader_widget(
    viewer: Viewer,
    video_file=Path.home(),
) -> None:
    
    # if video_file
    reader = VideoReaderNP(str(Path(video_file)))
    viewer.add_image(reader, name=video_file.name)

def validate_input(layers, start, end, filename, save_scene, scene_name, tracking=None):
    for layer in layers:
        if not isinstance(layer, Image):
            messagebox.showerror("Error", "Image data required")
            return False
    if start > end:
        messagebox.showerror("Error", "End frame must be greater than or equal to start frame")
        return False
    if tracking is not None:
        if not (str(tracking).endswith(".tmxml") or str(tracking).endswith(".xml")):
            messagebox.showerror("Error", "Tracking file must be in .xml or .tmxml format")
            return False
    if not filename.endswith(".mp4"):
        messagebox.showerror("Error", "Output file must be in .mp4 format")
        return False
    if save_scene and not scene_name.endswith(".blend"):
        messagebox.showerror("Error", "Scene file must be in .blend format")
        return False
    return True

