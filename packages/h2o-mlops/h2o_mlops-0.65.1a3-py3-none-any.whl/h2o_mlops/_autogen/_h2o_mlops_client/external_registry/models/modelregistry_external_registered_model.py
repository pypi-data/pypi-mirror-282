# coding: utf-8

"""
    v1/proto/external_registered_model.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.external_registry.configuration import Configuration


class ModelregistryExternalRegisteredModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'source_key': 'str',
        'source_created_by': 'str',
        'created_by': 'str',
        'project': 'ModelregistryProject',
        'created_time': 'datetime',
        'updated_time': 'datetime',
        'tags': 'list[ModelregistryTag]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'source_key': 'sourceKey',
        'source_created_by': 'sourceCreatedBy',
        'created_by': 'createdBy',
        'project': 'project',
        'created_time': 'createdTime',
        'updated_time': 'updatedTime',
        'tags': 'tags'
    }

    def __init__(self, id=None, name=None, description=None, source_key=None, source_created_by=None, created_by=None, project=None, created_time=None, updated_time=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """ModelregistryExternalRegisteredModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._source_key = None
        self._source_created_by = None
        self._created_by = None
        self._project = None
        self._created_time = None
        self._updated_time = None
        self._tags = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if source_key is not None:
            self.source_key = source_key
        if source_created_by is not None:
            self.source_created_by = source_created_by
        if created_by is not None:
            self.created_by = created_by
        if project is not None:
            self.project = project
        if created_time is not None:
            self.created_time = created_time
        if updated_time is not None:
            self.updated_time = updated_time
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this ModelregistryExternalRegisteredModel.  # noqa: E501


        :return: The id of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelregistryExternalRegisteredModel.


        :param id: The id of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModelregistryExternalRegisteredModel.  # noqa: E501


        :return: The name of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelregistryExternalRegisteredModel.


        :param name: The name of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ModelregistryExternalRegisteredModel.  # noqa: E501


        :return: The description of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelregistryExternalRegisteredModel.


        :param description: The description of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def source_key(self):
        """Gets the source_key of this ModelregistryExternalRegisteredModel.  # noqa: E501

        The key in the external model registry.  # noqa: E501

        :return: The source_key of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :rtype: str
        """
        return self._source_key

    @source_key.setter
    def source_key(self, source_key):
        """Sets the source_key of this ModelregistryExternalRegisteredModel.

        The key in the external model registry.  # noqa: E501

        :param source_key: The source_key of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :type source_key: str
        """

        self._source_key = source_key

    @property
    def source_created_by(self):
        """Gets the source_created_by of this ModelregistryExternalRegisteredModel.  # noqa: E501

        User id of the user owning this model -  as we get from External Model Registry API.  # noqa: E501

        :return: The source_created_by of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :rtype: str
        """
        return self._source_created_by

    @source_created_by.setter
    def source_created_by(self, source_created_by):
        """Sets the source_created_by of this ModelregistryExternalRegisteredModel.

        User id of the user owning this model -  as we get from External Model Registry API.  # noqa: E501

        :param source_created_by: The source_created_by of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :type source_created_by: str
        """

        self._source_created_by = source_created_by

    @property
    def created_by(self):
        """Gets the created_by of this ModelregistryExternalRegisteredModel.  # noqa: E501


        :return: The created_by of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ModelregistryExternalRegisteredModel.


        :param created_by: The created_by of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def project(self):
        """Gets the project of this ModelregistryExternalRegisteredModel.  # noqa: E501


        :return: The project of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :rtype: ModelregistryProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ModelregistryExternalRegisteredModel.


        :param project: The project of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :type project: ModelregistryProject
        """

        self._project = project

    @property
    def created_time(self):
        """Gets the created_time of this ModelregistryExternalRegisteredModel.  # noqa: E501


        :return: The created_time of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this ModelregistryExternalRegisteredModel.


        :param created_time: The created_time of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def updated_time(self):
        """Gets the updated_time of this ModelregistryExternalRegisteredModel.  # noqa: E501


        :return: The updated_time of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this ModelregistryExternalRegisteredModel.


        :param updated_time: The updated_time of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def tags(self):
        """Gets the tags of this ModelregistryExternalRegisteredModel.  # noqa: E501


        :return: The tags of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :rtype: list[ModelregistryTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ModelregistryExternalRegisteredModel.


        :param tags: The tags of this ModelregistryExternalRegisteredModel.  # noqa: E501
        :type tags: list[ModelregistryTag]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelregistryExternalRegisteredModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelregistryExternalRegisteredModel):
            return True

        return self.to_dict() != other.to_dict()
