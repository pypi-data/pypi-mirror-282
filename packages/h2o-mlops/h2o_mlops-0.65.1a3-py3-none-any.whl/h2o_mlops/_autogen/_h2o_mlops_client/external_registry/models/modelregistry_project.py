# coding: utf-8

"""
    v1/proto/external_registered_model.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.external_registry.configuration import Configuration


class ModelregistryProject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'owner_id': 'str',
        'display_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'owner_id': 'ownerId',
        'display_name': 'displayName'
    }

    def __init__(self, id=None, owner_id=None, display_name=None, local_vars_configuration=None):  # noqa: E501
        """ModelregistryProject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._owner_id = None
        self._display_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if owner_id is not None:
            self.owner_id = owner_id
        if display_name is not None:
            self.display_name = display_name

    @property
    def id(self):
        """Gets the id of this ModelregistryProject.  # noqa: E501


        :return: The id of this ModelregistryProject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelregistryProject.


        :param id: The id of this ModelregistryProject.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def owner_id(self):
        """Gets the owner_id of this ModelregistryProject.  # noqa: E501

        Owner of the MLOps project.  # noqa: E501

        :return: The owner_id of this ModelregistryProject.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this ModelregistryProject.

        Owner of the MLOps project.  # noqa: E501

        :param owner_id: The owner_id of this ModelregistryProject.  # noqa: E501
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def display_name(self):
        """Gets the display_name of this ModelregistryProject.  # noqa: E501


        :return: The display_name of this ModelregistryProject.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ModelregistryProject.


        :param display_name: The display_name of this ModelregistryProject.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelregistryProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelregistryProject):
            return True

        return self.to_dict() != other.to_dict()
