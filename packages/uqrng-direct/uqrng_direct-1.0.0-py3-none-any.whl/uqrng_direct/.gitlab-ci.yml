---
image: ubuntu:focal

.before_script_template: &build_module
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get update && apt-get upgrade -y
    - apt-get install -y --no-install-recommends --reinstall ca-certificates
    - apt-get install -y --no-install-recommends git
    - git clone https://github.com/pyenv/pyenv.git ~/.pyenv
    # Install pyenv dependencies, esp. for building python, and set up pyenv.
    - apt-get install -y --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
    - export PYENV_ROOT="$HOME/.pyenv"
    - command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
    - eval "$(pyenv init -)"
    - pyenv install ${PYTHON_VERSION}
    - pyenv global ${PYTHON_VERSION}
    - python --version
    # Install and activate venv.
    - python -m venv ../venv
    - . ../venv/bin/activate
    # Install/upgrade build tools.
    - python -m pip install --upgrade --progress-bar off pip setuptools wheel
    - python -m pip --version
    # Install package using git credentials.
    - echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@git.qci-dev.com" > ${HOME}/.git-credentials
    - git config --global credential.helper store
    - python -m pip install --progress-bar off .[dev]
    # Remove credentials from build container, even though token should be a one-off.
    - rm -rf ${HOME}/.git-credentials
    - python -m pip list
    - python -m build
    - python -m check_manifest

variables:
  GIT_STRATEGY: clone
  # Default Python version, for build stage(s). Should be included in test matrix.
  PYTHON_VERSION: "3.10.9"

stages:
  - build
  - test

build-branch:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH
  <<: *build_module
  script: echo Finished!
  artifacts:
    name: $CI_PROJECT_NAME-$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
    when: always
    paths:
      - dist
    expire_in: 1 week

build-tag:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/' # Enforce semver in tag.
  <<: *build_module
  script: echo Finished!
  artifacts:
    name: $CI_PROJECT_NAME-$CI_COMMIT_TAG
    when: always
    paths:
      - dist
    expire_in: never

code-check-semgrep:
  stage: test
  image: returntocorp/semgrep-agent:v1
  variables:
    SEMGREP_RULES: >-
      p/security-audit
      p/secrets
  script: semgrep-agent

code-check-trivy:
  stage: test
  <<: *build_module
  script:
    - export TRIVY_VER=$(curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - curl -L -o trivy.tgz https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VER}/trivy_${TRIVY_VER}_Linux-64bit.tar.gz
    - tar xzf trivy.tgz
    - mv trivy /usr/local/bin/
    - trivy fs --exit-code 1 .

tests:
  stage: test
  <<: *build_module
  script:
    # Do not run full set of tests yet due to remote setup issues (100% NOT yet required in pyproject.toml).
    - python -m coverage run --source=qrng_rpc -m pytest -v
    - python -m coverage report -m
    # Python linters/autoformatters.
    - python -m black .
  parallel:
    matrix:
      # Include Python 3.11 in matrix once supported, tested, and CI build works.
      # See QCIEN-2174 and QCIEN-2147.
      - PYTHON_VERSION: ['3.8.16', '3.9.16', '3.10.9']
