"use strict";(self.webpackChunkjupyterlab_gallery=self.webpackChunkjupyterlab_gallery||[]).push([[274],{274:(e,t,s)=>{s.r(t),s.d(t,{default:()=>_});var a=s(320),r=s(80),i=s(811),n=s(949),o=s(345),l=s(110),c=s(858),d=s(602),h=s(635),p=s(252);async function u(e="",t={}){const s=p.ServerConnection.makeSettings(),a=h.URLExt.join(s.baseUrl,"jupyterlab-gallery",e);let r;try{r=await p.ServerConnection.makeRequest(a,t,s)}catch(e){throw new p.ServerConnection.NetworkError(e)}let i=await r.text();if(i.length>0)try{i=JSON.parse(i)}catch(e){console.log("Not a JSON response body.",r)}if(!r.ok)throw new p.ServerConnection.ResponseError(r,i.message||i);return i}class m extends l.ReactWidget{constructor(e){super(),this.options=e,this._reloadOnFinish=async(e,t)=>{"finished"===t.phase&&(await this._load(),await this.options.refreshFileBrowser())},this._update=new d.Signal(this),this._exhibits=null,this._stream=new d.Stream(this);const{trans:t,fileChanged:s}=e;this._trans=t,this._status=t.__("Gallery loading..."),this._actions={open:async t=>{e.openPath(t.localPath)},download:async e=>{const t=new Promise(((t,s)=>{const a=(r,i)=>{i.exhibit_id===e.id&&("finished"===i.phase?(t(),this._stream.disconnect(a)):"error"===i.phase&&(s(),this._stream.disconnect(a)))};this._stream.connect(a)})),s=document.cookie.match("\\b_xsrf=([^;]*)\\b"),a={exhibit_id:e.id};s&&(a._xsrf=s[1]),await u("pull",{method:"POST",body:JSON.stringify(a)}),await t}},s.connect(((e,t)=>{"delete"===t.type&&this._load()})),this._eventSource=function(e="",t,s){const a=p.ServerConnection.makeSettings();let r=h.URLExt.join(a.baseUrl,"jupyterlab-gallery",e);const i=document.cookie.match("\\b_xsrf=([^;]*)\\b");if(i){const e=new URL(r);e.searchParams.append("_xsrf",i[1]),r=e.toString()}const n=new EventSource(r);return n.addEventListener("message",(e=>{const s=JSON.parse(e.data);t(s)})),n.addEventListener("error",(e=>{s(e)})),window.addEventListener("beforeunload",(()=>{n.close()})),n}("pull",(e=>{this._stream.emit(e)}),(e=>{console.error(e)})),this._stream.connect(this._reloadOnFinish),this._load()}dispose(){super.dispose(),this._eventSource.close(),this._stream.disconnect(this._reloadOnFinish)}async _load(){try{const e=await u("exhibits");this.exhibits=e.exhibits,this.exhibits.every((e=>!e.isCloned||"boolean"==typeof e.updatesAvailable))||setTimeout((()=>this._load()),1e3)}catch(e){this._status=`jupyterlab_gallery server failed:\n${e}`}this.update()}get exhibits(){return this._exhibits}set exhibits(e){this._exhibits=e}update(){super.update(),this._update.emit()}render(){return o.createElement(c.UseSignal,{signal:this._update},(()=>this.exhibits?o.createElement(g,{exhibits:this.exhibits,actions:this._actions,progressStream:this._stream,trans:this._trans}):o.createElement("div",{className:"jp-Gallery jp-mod-loading"},this._status)))}}function g(e){return o.createElement("div",{className:"jp-Gallery"},e.exhibits.map((t=>o.createElement(b,{trans:e.trans,key:t.repository,exhibit:t,actions:e.actions,progressStream:e.progressStream}))))}function b(e){const{exhibit:t,actions:s}=e,[a,r]=o.useState(null),[i,n]=o.useState("");o.useEffect((()=>{const s=(e,s)=>{var a;if(s.exhibit_id===t.id)switch(s.phase){case"error":(0,l.showErrorMessage)("Could not download",null!==(a=s.output)&&void 0!==a?a:"Unknown error");break;case"progress":r(s.output),n(s.output.message);break;case"finished":r(null);break;default:console.warn("Unhandled message",s)}};return e.progressStream.connect(s),()=>{e.progressStream.disconnect(s)}}));const d="boolean"==typeof t.updatesAvailable;return o.createElement("div",{className:"jp-Exhibit"},o.createElement("h4",{className:"jp-Exhibit-title"},t.title),o.createElement("div",{className:"jp-Exhibit-middle"},o.createElement("div",{className:"jp-Exhibit-icon"},o.createElement("img",{src:t.icon,alt:t.title})),o.createElement("div",{className:"jp-Exhibit-buttons"},t.isCloned?o.createElement(o.Fragment,null,o.createElement(c.Button,{minimal:!0,title:e.trans.__("Open"),onClick:()=>{s.open(t)}},o.createElement(c.folderIcon.react,null)),o.createElement(c.Button,{disabled:!t.updatesAvailable,minimal:!0,title:d?e.trans.__("Fetch latest changes"):e.trans.__("Checking upstream status"),onClick:async()=>{n("Refreshing"),r({progress:.25,message:"Refreshing"});try{await s.download(t),r(null)}catch(e){r({...a,state:"error"}),n("")}}},d?o.createElement(c.downloadIcon.react,null):o.createElement(c.refreshIcon.react,{className:"jp-spinningIcon"}))):o.createElement(c.Button,{minimal:!0,title:e.trans.__("Set up"),onClick:async()=>{n("Downloading"),r({progress:0,message:"Initializing"});try{await s.download(t)}catch(e){r({...a,state:"error"}),n("")}}},o.createElement(c.downloadIcon.react,null)))),o.createElement("div",{className:"jp-Exhibit-bottom"},a?o.createElement("div",{className:"jp-Exhibit-progressbar"+("error"===a.state?" jp-Exhibit-progressbar-error":"")},o.createElement("div",{className:"jp-Exhibit-progressbar-filler",style:{width:100*a.progress+"%"}}),o.createElement("div",{className:"jp-Exhibit-progressMessage"},i)):null,o.createElement("div",{className:"jp-Exhibit-description"},t.description)))}const y=new c.LabIcon({name:"jupyterlab-gallery:gallery",svgstr:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="jp-icon3" fill="rgb(97,97,97)" d="M1 3V21H23V3H1M21 5V14H3V5H21M11 16V19H8V16H11M3 16H6V19H3V16M13 19V16H16V19H13M18 19V16H21V19H18Z" /></svg>'}),w={id:"jupyterlab-gallery:plugin",description:"A JupyterLab gallery extension for presenting and downloading examples from remote repositories",autoStart:!0,requires:[r.ISettingRegistry],optional:[i.IFileBrowserCommands,a.ITranslator,n.ILauncher],activate:async(e,t,s,r,i)=>{console.log("JupyterLab extension jupyterlab-gallery is activated!");const n=(r=null!=r?r:a.nullTranslator).load("jupyterlab-gallery"),o=new m({trans:n,openPath:t=>{if(!s)throw Error("filebrowser not available");e.commands.execute(s.openPath,{path:t})},fileChanged:e.serviceManager.contents.fileChanged,refreshFileBrowser:()=>e.commands.execute("filebrowser:refresh")}),l=await u("gallery");"1.0"!==l.apiVersion&&console.warn(`jupyter-gallery API version out of sync, expected 1.0, got ${l.apiVersion}`);const c="Gallery"===l.title?n.__("Gallery"):l.title;if(!l.hideGalleryWithoutExhibits||l.exhibitsConfigured){i&&function(e){return"addSection"in e}(i)?i.addSection({title:c,className:"jp-Launcher-openExample",icon:y,id:"gallery",rank:2.5,render:()=>o.render()}):(o.id="jupyterlab-gallery:sidebar",o.title.icon=y,o.title.caption=c,o.show(),e.shell.add(o,"left",{rank:850}));try{const e=await t.load(w.id);console.log("jupyterlab-gallery settings loaded:",e.composite)}catch(e){return void console.error("Failed to load settings for jupyterlab-gallery.",e)}}else console.log("Gallery extension will not add any UI elements because no exhibits are configured")}},_=w}}]);