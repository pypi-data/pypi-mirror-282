# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.scheme_message_entry_item import SchemeMessageEntryItem


class SchemeMessageAttributes(object):

    """Implementation of the 'SchemeMessageAttributes' model.

    TODO: type model description here.

    Attributes:
        date (datetime): TODO: type description here.
        entries (List[SchemeMessageEntryItem]): TODO: type description here.
        payment_scheme (PaymentSchemeEnum): TODO: type description here.
        scheme_message_type (str): TODO: type description here.
        unique_scheme_id (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "date": 'date',
        "entries": 'entries',
        "payment_scheme": 'payment_scheme',
        "scheme_message_type": 'scheme_message_type',
        "unique_scheme_id": 'unique_scheme_id'
    }

    _optionals = [
        'unique_scheme_id',
    ]

    def __init__(self,
                 date=None,
                 entries=None,
                 payment_scheme=None,
                 scheme_message_type=None,
                 unique_scheme_id=APIHelper.SKIP):
        """Constructor for the SchemeMessageAttributes class"""

        # Initialize members of the class
        self.date = APIHelper.apply_datetime_converter(date, APIHelper.RFC3339DateTime) if date else None 
        self.entries = entries 
        self.payment_scheme = payment_scheme 
        self.scheme_message_type = scheme_message_type 
        if unique_scheme_id is not APIHelper.SKIP:
            self.unique_scheme_id = unique_scheme_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        date = APIHelper.RFC3339DateTime.from_value(dictionary.get("date")).datetime if dictionary.get("date") else None
        entries = None
        if dictionary.get('entries') is not None:
            entries = [SchemeMessageEntryItem.from_dictionary(x) for x in dictionary.get('entries')]
        payment_scheme = dictionary.get("payment_scheme") if dictionary.get("payment_scheme") else None
        scheme_message_type = dictionary.get("scheme_message_type") if dictionary.get("scheme_message_type") else None
        unique_scheme_id = dictionary.get("unique_scheme_id") if dictionary.get("unique_scheme_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(date,
                   entries,
                   payment_scheme,
                   scheme_message_type,
                   unique_scheme_id)
