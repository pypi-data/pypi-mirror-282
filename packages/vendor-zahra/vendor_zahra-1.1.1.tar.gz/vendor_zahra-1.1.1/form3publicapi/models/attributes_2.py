# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper


class Attributes2(object):

    """Implementation of the 'Attributes2' model.

    TODO: type model description here.

    Attributes:
        action (str): Action that this ACE controls
        filter (str): TODO: type description here.
        record_type (str): Type of record that this ACE gives access to
        role_id (uuid|str): Role ID of the role that this ACE belongs to

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "action": 'action',
        "filter": 'filter',
        "record_type": 'record_type',
        "role_id": 'role_id'
    }

    _optionals = [
        'action',
        'filter',
        'record_type',
        'role_id',
    ]

    def __init__(self,
                 action=APIHelper.SKIP,
                 filter=APIHelper.SKIP,
                 record_type=APIHelper.SKIP,
                 role_id=APIHelper.SKIP):
        """Constructor for the Attributes2 class"""

        # Initialize members of the class
        if action is not APIHelper.SKIP:
            self.action = action 
        if filter is not APIHelper.SKIP:
            self.filter = filter 
        if record_type is not APIHelper.SKIP:
            self.record_type = record_type 
        if role_id is not APIHelper.SKIP:
            self.role_id = role_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        action = dictionary.get("action") if dictionary.get("action") else APIHelper.SKIP
        filter = dictionary.get("filter") if dictionary.get("filter") else APIHelper.SKIP
        record_type = dictionary.get("record_type") if dictionary.get("record_type") else APIHelper.SKIP
        role_id = dictionary.get("role_id") if dictionary.get("role_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(action,
                   filter,
                   record_type,
                   role_id)
