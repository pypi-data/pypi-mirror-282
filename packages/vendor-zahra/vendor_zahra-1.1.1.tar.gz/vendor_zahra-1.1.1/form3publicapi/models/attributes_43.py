# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper


class Attributes43(object):

    """Implementation of the 'Attributes43' model.

    TODO: type model description here.

    Attributes:
        admission_datetime (datetime): Time when the Form3 system begins
            processing of the admission
        status (TransactionFileAdmissionStatusEnum): Status of the transaction
            file admission
        status_reason (str): Plain-text description of the status attribute
        transaction_start_datetime (datetime): Time the admission request was
            received by Form3. Used to compute the total transaction time

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "admission_datetime": 'admission_datetime',
        "status": 'status',
        "status_reason": 'status_reason',
        "transaction_start_datetime": 'transaction_start_datetime'
    }

    _optionals = [
        'admission_datetime',
        'status',
        'status_reason',
        'transaction_start_datetime',
    ]

    def __init__(self,
                 admission_datetime=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 status_reason=APIHelper.SKIP,
                 transaction_start_datetime=APIHelper.SKIP):
        """Constructor for the Attributes43 class"""

        # Initialize members of the class
        if admission_datetime is not APIHelper.SKIP:
            self.admission_datetime = APIHelper.apply_datetime_converter(admission_datetime, APIHelper.RFC3339DateTime) if admission_datetime else None 
        if status is not APIHelper.SKIP:
            self.status = status 
        if status_reason is not APIHelper.SKIP:
            self.status_reason = status_reason 
        if transaction_start_datetime is not APIHelper.SKIP:
            self.transaction_start_datetime = APIHelper.apply_datetime_converter(transaction_start_datetime, APIHelper.RFC3339DateTime) if transaction_start_datetime else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        admission_datetime = APIHelper.RFC3339DateTime.from_value(dictionary.get("admission_datetime")).datetime if dictionary.get("admission_datetime") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        status_reason = dictionary.get("status_reason") if dictionary.get("status_reason") else APIHelper.SKIP
        transaction_start_datetime = APIHelper.RFC3339DateTime.from_value(dictionary.get("transaction_start_datetime")).datetime if dictionary.get("transaction_start_datetime") else APIHelper.SKIP
        # Return an object of this model
        return cls(admission_datetime,
                   status,
                   status_reason,
                   transaction_start_datetime)
