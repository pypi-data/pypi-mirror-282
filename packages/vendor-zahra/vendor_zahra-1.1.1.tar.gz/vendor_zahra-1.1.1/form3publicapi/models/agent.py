# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.identification import Identification


class Agent(object):

    """Implementation of the 'Agent' model.

    TODO: type model description here.

    Attributes:
        account_number (str): Account number of the financial institution. Can
            be BBAN or IBAN.
        account_number_code (AccountNumberCodeEnum): The type of
            identification given at `account_number` attribute
        address (List[str]): TODO: type description here.
        identification (Identification): TODO: type description here.
        name (str): Name by which the financial institution is known
        role (AgentRoleEnum): Role of the agent in the payment chain. Enum of
            pre-defined values, new values can be added when needed

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_number": 'account_number',
        "account_number_code": 'account_number_code',
        "address": 'address',
        "identification": 'identification',
        "name": 'name',
        "role": 'role'
    }

    _optionals = [
        'account_number',
        'account_number_code',
        'address',
        'identification',
        'name',
        'role',
    ]

    def __init__(self,
                 account_number=APIHelper.SKIP,
                 account_number_code=APIHelper.SKIP,
                 address=APIHelper.SKIP,
                 identification=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 role=APIHelper.SKIP):
        """Constructor for the Agent class"""

        # Initialize members of the class
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if account_number_code is not APIHelper.SKIP:
            self.account_number_code = account_number_code 
        if address is not APIHelper.SKIP:
            self.address = address 
        if identification is not APIHelper.SKIP:
            self.identification = identification 
        if name is not APIHelper.SKIP:
            self.name = name 
        if role is not APIHelper.SKIP:
            self.role = role 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        account_number = dictionary.get("account_number") if dictionary.get("account_number") else APIHelper.SKIP
        account_number_code = dictionary.get("account_number_code") if dictionary.get("account_number_code") else APIHelper.SKIP
        address = dictionary.get("address") if dictionary.get("address") else APIHelper.SKIP
        identification = Identification.from_dictionary(dictionary.get('identification')) if 'identification' in dictionary.keys() else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        role = dictionary.get("role") if dictionary.get("role") else APIHelper.SKIP
        # Return an object of this model
        return cls(account_number,
                   account_number_code,
                   address,
                   identification,
                   name,
                   role)
