# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from form3publicapi.api_helper import APIHelper
from form3publicapi.models.request_for_information_agent import RequestForInformationAgent
from form3publicapi.models.request_for_information_creator_party import RequestForInformationCreatorParty
from form3publicapi.models.request_for_information_reference import RequestForInformationReference
from form3publicapi.models.request_for_information_requested_information import RequestForInformationRequestedInformation


class QueryAttributes(object):

    """Implementation of the 'QueryAttributes' model.

    TODO: type model description here.

    Attributes:
        agents (List[RequestForInformationAgent]): TODO: type description
            here.
        auto_handled (bool): TODO: type description here.
        creator_party (RequestForInformationCreatorParty): TODO: type
            description here.
        message_id (str): TODO: type description here.
        processing_date (date): TODO: type description here.
        query_sub_types (List[str]): TODO: type description here.
        query_type (QueryTypeEnum): TODO: type description here.
        references (List[RequestForInformationReference]): TODO: type
            description here.
        requested_information
            (List[RequestForInformationRequestedInformation]): TODO: type
            description here.
        scheme_transaction_id (str): TODO: type description here.
        status (ReportRequestStatusEnum): TODO: type description here.
        unstructured_message (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "query_type": 'query_type',
        "agents": 'agents',
        "auto_handled": 'auto_handled',
        "creator_party": 'creator_party',
        "message_id": 'message_id',
        "processing_date": 'processing_date',
        "query_sub_types": 'query_sub_types',
        "references": 'references',
        "requested_information": 'requested_information',
        "scheme_transaction_id": 'scheme_transaction_id',
        "status": 'status',
        "unstructured_message": 'unstructured_message'
    }

    _optionals = [
        'agents',
        'auto_handled',
        'creator_party',
        'message_id',
        'processing_date',
        'query_sub_types',
        'references',
        'requested_information',
        'scheme_transaction_id',
        'status',
        'unstructured_message',
    ]

    def __init__(self,
                 query_type=None,
                 agents=APIHelper.SKIP,
                 auto_handled=APIHelper.SKIP,
                 creator_party=APIHelper.SKIP,
                 message_id=APIHelper.SKIP,
                 processing_date=APIHelper.SKIP,
                 query_sub_types=APIHelper.SKIP,
                 references=APIHelper.SKIP,
                 requested_information=APIHelper.SKIP,
                 scheme_transaction_id=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 unstructured_message=APIHelper.SKIP):
        """Constructor for the QueryAttributes class"""

        # Initialize members of the class
        if agents is not APIHelper.SKIP:
            self.agents = agents 
        if auto_handled is not APIHelper.SKIP:
            self.auto_handled = auto_handled 
        if creator_party is not APIHelper.SKIP:
            self.creator_party = creator_party 
        if message_id is not APIHelper.SKIP:
            self.message_id = message_id 
        if processing_date is not APIHelper.SKIP:
            self.processing_date = processing_date 
        if query_sub_types is not APIHelper.SKIP:
            self.query_sub_types = query_sub_types 
        self.query_type = query_type 
        if references is not APIHelper.SKIP:
            self.references = references 
        if requested_information is not APIHelper.SKIP:
            self.requested_information = requested_information 
        if scheme_transaction_id is not APIHelper.SKIP:
            self.scheme_transaction_id = scheme_transaction_id 
        if status is not APIHelper.SKIP:
            self.status = status 
        if unstructured_message is not APIHelper.SKIP:
            self.unstructured_message = unstructured_message 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        query_type = dictionary.get("query_type") if dictionary.get("query_type") else None
        agents = None
        if dictionary.get('agents') is not None:
            agents = [RequestForInformationAgent.from_dictionary(x) for x in dictionary.get('agents')]
        else:
            agents = APIHelper.SKIP
        auto_handled = dictionary.get("auto_handled") if "auto_handled" in dictionary.keys() else APIHelper.SKIP
        creator_party = RequestForInformationCreatorParty.from_dictionary(dictionary.get('creator_party')) if 'creator_party' in dictionary.keys() else APIHelper.SKIP
        message_id = dictionary.get("message_id") if dictionary.get("message_id") else APIHelper.SKIP
        processing_date = dateutil.parser.parse(dictionary.get('processing_date')).date() if dictionary.get('processing_date') else APIHelper.SKIP
        query_sub_types = dictionary.get("query_sub_types") if dictionary.get("query_sub_types") else APIHelper.SKIP
        references = None
        if dictionary.get('references') is not None:
            references = [RequestForInformationReference.from_dictionary(x) for x in dictionary.get('references')]
        else:
            references = APIHelper.SKIP
        requested_information = None
        if dictionary.get('requested_information') is not None:
            requested_information = [RequestForInformationRequestedInformation.from_dictionary(x) for x in dictionary.get('requested_information')]
        else:
            requested_information = APIHelper.SKIP
        scheme_transaction_id = dictionary.get("scheme_transaction_id") if dictionary.get("scheme_transaction_id") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        unstructured_message = dictionary.get("unstructured_message") if dictionary.get("unstructured_message") else APIHelper.SKIP
        # Return an object of this model
        return cls(query_type,
                   agents,
                   auto_handled,
                   creator_party,
                   message_id,
                   processing_date,
                   query_sub_types,
                   references,
                   requested_information,
                   scheme_transaction_id,
                   status,
                   unstructured_message)
