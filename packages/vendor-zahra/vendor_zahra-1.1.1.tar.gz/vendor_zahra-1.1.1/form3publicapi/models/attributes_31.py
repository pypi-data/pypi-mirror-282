# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from form3publicapi.api_helper import APIHelper
from form3publicapi.models.currency_and_amount import CurrencyAndAmount
from form3publicapi.models.settlement import Settlement


class Attributes31(object):

    """Implementation of the 'Attributes31' model.

    TODO: type model description here.

    Attributes:
        charges_amount (CurrencyAndAmount): TODO: type description here.
        clearing_id (str): Unique identifier for organisations collecting
            payments
        compensation_amount (CurrencyAndAmount): TODO: type description here.
        processing_date (date): Date on which the operation is to be debited
            from the debtor account. Formatted according to ISO 8601 format:
            YYYY-MM-DD.
        return_amount (CurrencyAndAmount): TODO: type description here.
        return_code (str): TODO: type description here.
        return_initiator (ReturnInitiatorEnum): TODO: type description here.
        scheme_processing_date (date): Date on which the operation is
            processed by the scheme. Formatted according to ISO 8601 format:
            YYYY-MM-DD. Only used if different from `processing_date`.
        scheme_transaction_id (str): TODO: type description here.
        settlement (Settlement): Specifies the details on how the settlement
            of the transaction between the instructing agent and the
            instructed agent is completed

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "charges_amount": 'charges_amount',
        "clearing_id": 'clearing_id',
        "compensation_amount": 'compensation_amount',
        "processing_date": 'processing_date',
        "return_amount": 'return_amount',
        "return_code": 'return_code',
        "return_initiator": 'return_initiator',
        "scheme_processing_date": 'scheme_processing_date',
        "scheme_transaction_id": 'scheme_transaction_id',
        "settlement": 'settlement'
    }

    _optionals = [
        'charges_amount',
        'clearing_id',
        'compensation_amount',
        'processing_date',
        'return_amount',
        'return_code',
        'return_initiator',
        'scheme_processing_date',
        'scheme_transaction_id',
        'settlement',
    ]

    def __init__(self,
                 charges_amount=APIHelper.SKIP,
                 clearing_id=APIHelper.SKIP,
                 compensation_amount=APIHelper.SKIP,
                 processing_date=APIHelper.SKIP,
                 return_amount=APIHelper.SKIP,
                 return_code=APIHelper.SKIP,
                 return_initiator=APIHelper.SKIP,
                 scheme_processing_date=APIHelper.SKIP,
                 scheme_transaction_id=APIHelper.SKIP,
                 settlement=APIHelper.SKIP):
        """Constructor for the Attributes31 class"""

        # Initialize members of the class
        if charges_amount is not APIHelper.SKIP:
            self.charges_amount = charges_amount 
        if clearing_id is not APIHelper.SKIP:
            self.clearing_id = clearing_id 
        if compensation_amount is not APIHelper.SKIP:
            self.compensation_amount = compensation_amount 
        if processing_date is not APIHelper.SKIP:
            self.processing_date = processing_date 
        if return_amount is not APIHelper.SKIP:
            self.return_amount = return_amount 
        if return_code is not APIHelper.SKIP:
            self.return_code = return_code 
        if return_initiator is not APIHelper.SKIP:
            self.return_initiator = return_initiator 
        if scheme_processing_date is not APIHelper.SKIP:
            self.scheme_processing_date = scheme_processing_date 
        if scheme_transaction_id is not APIHelper.SKIP:
            self.scheme_transaction_id = scheme_transaction_id 
        if settlement is not APIHelper.SKIP:
            self.settlement = settlement 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        charges_amount = CurrencyAndAmount.from_dictionary(dictionary.get('charges_amount')) if 'charges_amount' in dictionary.keys() else APIHelper.SKIP
        clearing_id = dictionary.get("clearing_id") if dictionary.get("clearing_id") else APIHelper.SKIP
        compensation_amount = CurrencyAndAmount.from_dictionary(dictionary.get('compensation_amount')) if 'compensation_amount' in dictionary.keys() else APIHelper.SKIP
        processing_date = dateutil.parser.parse(dictionary.get('processing_date')).date() if dictionary.get('processing_date') else APIHelper.SKIP
        return_amount = CurrencyAndAmount.from_dictionary(dictionary.get('return_amount')) if 'return_amount' in dictionary.keys() else APIHelper.SKIP
        return_code = dictionary.get("return_code") if dictionary.get("return_code") else APIHelper.SKIP
        return_initiator = dictionary.get("return_initiator") if dictionary.get("return_initiator") else APIHelper.SKIP
        scheme_processing_date = dateutil.parser.parse(dictionary.get('scheme_processing_date')).date() if dictionary.get('scheme_processing_date') else APIHelper.SKIP
        scheme_transaction_id = dictionary.get("scheme_transaction_id") if dictionary.get("scheme_transaction_id") else APIHelper.SKIP
        settlement = Settlement.from_dictionary(dictionary.get('settlement')) if 'settlement' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(charges_amount,
                   clearing_id,
                   compensation_amount,
                   processing_date,
                   return_amount,
                   return_code,
                   return_initiator,
                   scheme_processing_date,
                   scheme_transaction_id,
                   settlement)
