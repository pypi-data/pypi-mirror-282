# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.supported_schemes import SupportedSchemes


class Attributes1(object):

    """Implementation of the 'Attributes1' model.

    TODO: type model description here.

    Attributes:
        bank_code (str): TODO: type description here.
        bank_name (str): TODO: type description here.
        bank_office_title (str): TODO: type description here.
        supported_schemes (SupportedSchemes): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bank_code": 'bank_code',
        "bank_name": 'bank_name',
        "bank_office_title": 'bank_office_title',
        "supported_schemes": 'supported_schemes'
    }

    _optionals = [
        'bank_code',
        'bank_name',
        'bank_office_title',
        'supported_schemes',
    ]

    def __init__(self,
                 bank_code=APIHelper.SKIP,
                 bank_name=APIHelper.SKIP,
                 bank_office_title=APIHelper.SKIP,
                 supported_schemes=APIHelper.SKIP):
        """Constructor for the Attributes1 class"""

        # Initialize members of the class
        if bank_code is not APIHelper.SKIP:
            self.bank_code = bank_code 
        if bank_name is not APIHelper.SKIP:
            self.bank_name = bank_name 
        if bank_office_title is not APIHelper.SKIP:
            self.bank_office_title = bank_office_title 
        if supported_schemes is not APIHelper.SKIP:
            self.supported_schemes = supported_schemes 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        bank_code = dictionary.get("bank_code") if dictionary.get("bank_code") else APIHelper.SKIP
        bank_name = dictionary.get("bank_name") if dictionary.get("bank_name") else APIHelper.SKIP
        bank_office_title = dictionary.get("bank_office_title") if dictionary.get("bank_office_title") else APIHelper.SKIP
        supported_schemes = SupportedSchemes.from_dictionary(dictionary.get('supported_schemes')) if 'supported_schemes' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(bank_code,
                   bank_name,
                   bank_office_title,
                   supported_schemes)
