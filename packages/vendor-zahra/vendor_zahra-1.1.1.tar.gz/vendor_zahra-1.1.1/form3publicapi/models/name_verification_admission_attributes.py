# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper


class NameVerificationAdmissionAttributes(object):

    """Implementation of the 'NameVerificationAdmissionAttributes' model.

    TODO: type model description here.

    Attributes:
        actual_name (str): TODO: type description here.
        answer (NameVerificationAdmissionAnswerEnum): TODO: type description
            here.
        reason (str): TODO: type description here.
        reason_code (NameVerificationAdmissionReasonCodeEnum): TODO: type
            description here.
        status (NameVerificationAdmissionStatusEnum): TODO: type description
            here.
        status_reason (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "status": 'status',
        "actual_name": 'actual_name',
        "answer": 'answer',
        "reason": 'reason',
        "reason_code": 'reason_code',
        "status_reason": 'status_reason'
    }

    _optionals = [
        'actual_name',
        'answer',
        'reason',
        'reason_code',
        'status_reason',
    ]

    def __init__(self,
                 status=None,
                 actual_name=APIHelper.SKIP,
                 answer=APIHelper.SKIP,
                 reason=APIHelper.SKIP,
                 reason_code=APIHelper.SKIP,
                 status_reason=APIHelper.SKIP):
        """Constructor for the NameVerificationAdmissionAttributes class"""

        # Initialize members of the class
        if actual_name is not APIHelper.SKIP:
            self.actual_name = actual_name 
        if answer is not APIHelper.SKIP:
            self.answer = answer 
        if reason is not APIHelper.SKIP:
            self.reason = reason 
        if reason_code is not APIHelper.SKIP:
            self.reason_code = reason_code 
        self.status = status 
        if status_reason is not APIHelper.SKIP:
            self.status_reason = status_reason 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        status = dictionary.get("status") if dictionary.get("status") else None
        actual_name = dictionary.get("actual_name") if dictionary.get("actual_name") else APIHelper.SKIP
        answer = dictionary.get("answer") if dictionary.get("answer") else APIHelper.SKIP
        reason = dictionary.get("reason") if dictionary.get("reason") else APIHelper.SKIP
        reason_code = dictionary.get("reason_code") if dictionary.get("reason_code") else APIHelper.SKIP
        status_reason = dictionary.get("status_reason") if dictionary.get("status_reason") else APIHelper.SKIP
        # Return an object of this model
        return cls(status,
                   actual_name,
                   answer,
                   reason,
                   reason_code,
                   status_reason)
