# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper


class Notification(object):

    """Implementation of the 'Notification' model.

    TODO: type model description here.

    Attributes:
        action_time (str): Timestamp when the event that triggered the
            notification occurred.
        actioned_by (uuid|str): The ID of the user that made the change that
            triggered this notification. This can be the user ID of a customer
            or a Form3 system user.
        data (object): The full resource itself (as you would see from a GET
            request)
        data_record_type (str): Internal representation of the record type.
            Field values are subject to frequent change, evaluation of this
            field is discouraged.
        event_type (str): The type of event
        id (uuid|str): Unique resource ID
        organisation_id (uuid|str): Unique ID of the organisation this
            resource is created by
        record_type (str): The type of resource contained in `data`
        version (int): Version number

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "action_time": 'action_time',
        "actioned_by": 'actioned_by',
        "data": 'data',
        "data_record_type": 'data_record_type',
        "event_type": 'event_type',
        "id": 'id',
        "organisation_id": 'organisation_id',
        "record_type": 'record_type',
        "version": 'version'
    }

    _optionals = [
        'action_time',
        'actioned_by',
        'data',
        'data_record_type',
        'event_type',
        'id',
        'organisation_id',
        'record_type',
        'version',
    ]

    def __init__(self,
                 action_time=APIHelper.SKIP,
                 actioned_by=APIHelper.SKIP,
                 data=APIHelper.SKIP,
                 data_record_type=APIHelper.SKIP,
                 event_type=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 organisation_id=APIHelper.SKIP,
                 record_type=APIHelper.SKIP,
                 version=APIHelper.SKIP):
        """Constructor for the Notification class"""

        # Initialize members of the class
        if action_time is not APIHelper.SKIP:
            self.action_time = action_time 
        if actioned_by is not APIHelper.SKIP:
            self.actioned_by = actioned_by 
        if data is not APIHelper.SKIP:
            self.data = data 
        if data_record_type is not APIHelper.SKIP:
            self.data_record_type = data_record_type 
        if event_type is not APIHelper.SKIP:
            self.event_type = event_type 
        if id is not APIHelper.SKIP:
            self.id = id 
        if organisation_id is not APIHelper.SKIP:
            self.organisation_id = organisation_id 
        if record_type is not APIHelper.SKIP:
            self.record_type = record_type 
        if version is not APIHelper.SKIP:
            self.version = version 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        action_time = dictionary.get("action_time") if dictionary.get("action_time") else APIHelper.SKIP
        actioned_by = dictionary.get("actioned_by") if dictionary.get("actioned_by") else APIHelper.SKIP
        data = dictionary.get("data") if dictionary.get("data") else APIHelper.SKIP
        data_record_type = dictionary.get("data_record_type") if dictionary.get("data_record_type") else APIHelper.SKIP
        event_type = dictionary.get("event_type") if dictionary.get("event_type") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        organisation_id = dictionary.get("organisation_id") if dictionary.get("organisation_id") else APIHelper.SKIP
        record_type = dictionary.get("record_type") if dictionary.get("record_type") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        # Return an object of this model
        return cls(action_time,
                   actioned_by,
                   data,
                   data_record_type,
                   event_type,
                   id,
                   organisation_id,
                   record_type,
                   version)
