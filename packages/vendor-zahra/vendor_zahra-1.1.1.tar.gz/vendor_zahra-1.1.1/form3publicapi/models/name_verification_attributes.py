# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper


class NameVerificationAttributes(object):

    """Implementation of the 'NameVerificationAttributes' model.

    TODO: type model description here.

    Attributes:
        account_classification (AccountClassificationEnum): TODO: type
            description here.
        account_number (str): TODO: type description here.
        account_number_code (AccountNumberCodeEnum): The type of
            identification given at `account_number` attribute
        bank_id (str): TODO: type description here.
        bank_id_code (str): TODO: type description here.
        name (List[str]): Account holder names (for example title, first name,
            last name). Used for Confirmation of Payee matching.
        secondary_identification (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_classification": 'account_classification',
        "account_number": 'account_number',
        "account_number_code": 'account_number_code',
        "bank_id": 'bank_id',
        "bank_id_code": 'bank_id_code',
        "name": 'name',
        "secondary_identification": 'secondary_identification'
    }

    _optionals = [
        'secondary_identification',
    ]

    def __init__(self,
                 account_classification=None,
                 account_number=None,
                 account_number_code=None,
                 bank_id=None,
                 name=None,
                 secondary_identification=APIHelper.SKIP):
        """Constructor for the NameVerificationAttributes class"""

        # Initialize members of the class
        self.account_classification = account_classification 
        self.account_number = account_number 
        self.account_number_code = account_number_code 
        self.bank_id = bank_id 
        self.bank_id_code = 'GBDSC' 
        self.name = name 
        if secondary_identification is not APIHelper.SKIP:
            self.secondary_identification = secondary_identification 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        account_classification = dictionary.get("account_classification") if dictionary.get("account_classification") else None
        account_number = dictionary.get("account_number") if dictionary.get("account_number") else None
        account_number_code = dictionary.get("account_number_code") if dictionary.get("account_number_code") else None
        bank_id = dictionary.get("bank_id") if dictionary.get("bank_id") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        secondary_identification = dictionary.get("secondary_identification") if dictionary.get("secondary_identification") else APIHelper.SKIP
        # Return an object of this model
        return cls(account_classification,
                   account_number,
                   account_number_code,
                   bank_id,
                   name,
                   secondary_identification)
