# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper


class Attributes42(object):

    """Implementation of the 'Attributes42' model.

    TODO: type model description here.

    Attributes:
        file_format (FileFormatEnum): The format of the file that will be
            submitted/admitted to Form3
        file_hash (str): Hashed content of the file
        file_size (int): The size of the file to be uploaded - number of
            bytes. Max size is 1.4 Gigabyte
        hashing_algorithm (str): The algorithm used to generate the signature
        number_of_parts (int): The count of chunks to be uploaded to the
            resource
        payment_scheme (str): Scheme/gateway that the file is to be processed
            by
        transaction_count (int): The count of transactions that will be
            submitted in the file
        transaction_data (object): All purpose key-value fields containing
            file specific data (read only).
        transaction_sum (str): The sum value of the transactions will be
            submitted in the file

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "file_format": 'file_format',
        "file_hash": 'file_hash',
        "file_size": 'file_size',
        "hashing_algorithm": 'hashing_algorithm',
        "number_of_parts": 'number_of_parts',
        "payment_scheme": 'payment_scheme',
        "transaction_count": 'transaction_count',
        "transaction_data": 'transaction_data',
        "transaction_sum": 'transaction_sum'
    }

    _optionals = [
        'transaction_data',
        'transaction_sum',
    ]

    def __init__(self,
                 file_format='ndjson',
                 file_hash=None,
                 file_size=None,
                 number_of_parts=None,
                 transaction_count=None,
                 transaction_data=APIHelper.SKIP,
                 transaction_sum=APIHelper.SKIP):
        """Constructor for the Attributes42 class"""

        # Initialize members of the class
        self.file_format = file_format 
        self.file_hash = file_hash 
        self.file_size = file_size 
        self.hashing_algorithm = 'SHA256' 
        self.number_of_parts = number_of_parts 
        self.payment_scheme = 'BACS' 
        self.transaction_count = transaction_count 
        if transaction_data is not APIHelper.SKIP:
            self.transaction_data = transaction_data 
        if transaction_sum is not APIHelper.SKIP:
            self.transaction_sum = transaction_sum 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        file_format = dictionary.get("file_format") if dictionary.get("file_format") else 'ndjson'
        file_hash = dictionary.get("file_hash") if dictionary.get("file_hash") else None
        file_size = dictionary.get("file_size") if dictionary.get("file_size") else None
        number_of_parts = dictionary.get("number_of_parts") if dictionary.get("number_of_parts") else None
        transaction_count = dictionary.get("transaction_count") if dictionary.get("transaction_count") else None
        transaction_data = dictionary.get("transaction_data") if dictionary.get("transaction_data") else APIHelper.SKIP
        transaction_sum = dictionary.get("transaction_sum") if dictionary.get("transaction_sum") else APIHelper.SKIP
        # Return an object of this model
        return cls(file_format,
                   file_hash,
                   file_size,
                   number_of_parts,
                   transaction_count,
                   transaction_data,
                   transaction_sum)
