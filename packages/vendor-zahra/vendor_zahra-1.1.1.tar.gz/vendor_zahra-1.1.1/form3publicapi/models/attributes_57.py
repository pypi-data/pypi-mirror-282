# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.agent import Agent
from form3publicapi.models.currency_and_amount import CurrencyAndAmount
from form3publicapi.models.resolution_related_information import ResolutionRelatedInformation


class Attributes57(object):

    """Implementation of the 'Attributes57' model.

    TODO: type model description here.

    Attributes:
        agents (List[Agent]): Block to represent a Financial Institution/agent
            in the payment chain
        answer (RecallDecisionAnswerEnum): Answer to the recall request. Can
            either be `accepted` or `rejected`.
        charges_amount (CurrencyAndAmount): TODO: type description here.
        reason (str): Optional free text reason in addition to `reason_code`
        reason_code (str): Reason for a rejected decision. Required when
            answer is rejected, ignored otherwise. Has to be a valid [rejected
            recall decision reason
            code](http://api-docs.form3.tech/api.html#enumerations-rejected-rec
            all-decision-reason-codes)
        recall_amount (CurrencyAndAmount): TODO: type description here.
        resolution_related_information (ResolutionRelatedInformation): TODO:
            type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "agents": 'agents',
        "answer": 'answer',
        "charges_amount": 'charges_amount',
        "reason": 'reason',
        "reason_code": 'reason_code',
        "recall_amount": 'recall_amount',
        "resolution_related_information": 'resolution_related_information'
    }

    _optionals = [
        'agents',
        'answer',
        'charges_amount',
        'reason',
        'reason_code',
        'recall_amount',
        'resolution_related_information',
    ]

    def __init__(self,
                 agents=APIHelper.SKIP,
                 answer=APIHelper.SKIP,
                 charges_amount=APIHelper.SKIP,
                 reason=APIHelper.SKIP,
                 reason_code=APIHelper.SKIP,
                 recall_amount=APIHelper.SKIP,
                 resolution_related_information=APIHelper.SKIP):
        """Constructor for the Attributes57 class"""

        # Initialize members of the class
        if agents is not APIHelper.SKIP:
            self.agents = agents 
        if answer is not APIHelper.SKIP:
            self.answer = answer 
        if charges_amount is not APIHelper.SKIP:
            self.charges_amount = charges_amount 
        if reason is not APIHelper.SKIP:
            self.reason = reason 
        if reason_code is not APIHelper.SKIP:
            self.reason_code = reason_code 
        if recall_amount is not APIHelper.SKIP:
            self.recall_amount = recall_amount 
        if resolution_related_information is not APIHelper.SKIP:
            self.resolution_related_information = resolution_related_information 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        agents = None
        if dictionary.get('agents') is not None:
            agents = [Agent.from_dictionary(x) for x in dictionary.get('agents')]
        else:
            agents = APIHelper.SKIP
        answer = dictionary.get("answer") if dictionary.get("answer") else APIHelper.SKIP
        charges_amount = CurrencyAndAmount.from_dictionary(dictionary.get('charges_amount')) if 'charges_amount' in dictionary.keys() else APIHelper.SKIP
        reason = dictionary.get("reason") if dictionary.get("reason") else APIHelper.SKIP
        reason_code = dictionary.get("reason_code") if dictionary.get("reason_code") else APIHelper.SKIP
        recall_amount = CurrencyAndAmount.from_dictionary(dictionary.get('recall_amount')) if 'recall_amount' in dictionary.keys() else APIHelper.SKIP
        resolution_related_information = ResolutionRelatedInformation.from_dictionary(dictionary.get('resolution_related_information')) if 'resolution_related_information' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(agents,
                   answer,
                   charges_amount,
                   reason,
                   reason_code,
                   recall_amount,
                   resolution_related_information)
