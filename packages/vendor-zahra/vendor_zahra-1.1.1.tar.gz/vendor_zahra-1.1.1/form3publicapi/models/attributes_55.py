# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper


class Attributes55(object):

    """Implementation of the 'Attributes55' model.

    TODO: type model description here.

    Attributes:
        limit (str): Current limit
        position (str): Current position
        scheme (str): Scheme associated with the limit

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "limit": 'limit',
        "position": 'position',
        "scheme": 'scheme'
    }

    _optionals = [
        'limit',
        'position',
        'scheme',
    ]

    def __init__(self,
                 limit=APIHelper.SKIP,
                 position=APIHelper.SKIP,
                 scheme=APIHelper.SKIP):
        """Constructor for the Attributes55 class"""

        # Initialize members of the class
        if limit is not APIHelper.SKIP:
            self.limit = limit 
        if position is not APIHelper.SKIP:
            self.position = position 
        if scheme is not APIHelper.SKIP:
            self.scheme = scheme 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        limit = dictionary.get("limit") if dictionary.get("limit") else APIHelper.SKIP
        position = dictionary.get("position") if dictionary.get("position") else APIHelper.SKIP
        scheme = dictionary.get("scheme") if dictionary.get("scheme") else APIHelper.SKIP
        # Return an object of this model
        return cls(limit,
                   position,
                   scheme)
