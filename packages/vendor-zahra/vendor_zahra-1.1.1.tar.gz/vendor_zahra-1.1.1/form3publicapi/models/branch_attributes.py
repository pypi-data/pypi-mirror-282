# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.user_defined_data import UserDefinedData


class BranchAttributes(object):

    """Implementation of the 'BranchAttributes' model.

    TODO: type model description here.

    Attributes:
        acceptance_qualifier (AcceptanceQualifierEnum): All accepted payments
            will receive the matching qualifier code
        bank_id (str): Local country bank identifier. In the UK this is the
            sort code.
        bank_id_code (str): ISO 20022 code used to identify the type of bank
            ID being used
        reference_mask (str): if present â€“ has effect of making secondary
            reference in payment mandatory
        user_defined_data (List[UserDefinedData]): All purpose list of
            key-value pairs to store specific data.
        validation_type (BranchValidationTypeEnum): optional validation to
            apply to the branch

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bank_id": 'bank_id',
        "bank_id_code": 'bank_id_code',
        "acceptance_qualifier": 'acceptance_qualifier',
        "reference_mask": 'reference_mask',
        "user_defined_data": 'user_defined_data',
        "validation_type": 'validation_type'
    }

    _optionals = [
        'acceptance_qualifier',
        'reference_mask',
        'user_defined_data',
        'validation_type',
    ]

    def __init__(self,
                 bank_id=None,
                 bank_id_code=None,
                 acceptance_qualifier=APIHelper.SKIP,
                 reference_mask=APIHelper.SKIP,
                 user_defined_data=APIHelper.SKIP,
                 validation_type=APIHelper.SKIP):
        """Constructor for the BranchAttributes class"""

        # Initialize members of the class
        if acceptance_qualifier is not APIHelper.SKIP:
            self.acceptance_qualifier = acceptance_qualifier 
        self.bank_id = bank_id 
        self.bank_id_code = bank_id_code 
        if reference_mask is not APIHelper.SKIP:
            self.reference_mask = reference_mask 
        if user_defined_data is not APIHelper.SKIP:
            self.user_defined_data = user_defined_data 
        if validation_type is not APIHelper.SKIP:
            self.validation_type = validation_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        bank_id = dictionary.get("bank_id") if dictionary.get("bank_id") else None
        bank_id_code = dictionary.get("bank_id_code") if dictionary.get("bank_id_code") else None
        acceptance_qualifier = dictionary.get("acceptance_qualifier") if dictionary.get("acceptance_qualifier") else APIHelper.SKIP
        reference_mask = dictionary.get("reference_mask") if dictionary.get("reference_mask") else APIHelper.SKIP
        user_defined_data = None
        if dictionary.get('user_defined_data') is not None:
            user_defined_data = [UserDefinedData.from_dictionary(x) for x in dictionary.get('user_defined_data')]
        else:
            user_defined_data = APIHelper.SKIP
        validation_type = dictionary.get("validation_type") if dictionary.get("validation_type") else APIHelper.SKIP
        # Return an object of this model
        return cls(bank_id,
                   bank_id_code,
                   acceptance_qualifier,
                   reference_mask,
                   user_defined_data,
                   validation_type)
