# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from form3publicapi.api_helper import APIHelper
from form3publicapi.models.beneficiary_debtor_account_holding_entity import BeneficiaryDebtorAccountHoldingEntity
from form3publicapi.models.beneficiary_debtor_account_proxy import BeneficiaryDebtorAccountProxy
from form3publicapi.models.beneficiary_debtor_organisation_identification import BeneficiaryDebtorOrganisationIdentification
from form3publicapi.models.private_identification import PrivateIdentification


class BeneficiaryParty1(object):

    """Implementation of the 'BeneficiaryParty1' model.

    TODO: type model description here.

    Attributes:
        account_name (str): Name of beneficiary as given with account
        account_number (str): Beneficiary account number
        account_number_code (AccountNumberCodeEnum): The type of
            identification given at `account_number` attribute
        account_proxy (BeneficiaryDebtorAccountProxy): TODO: type description
            here.
        account_type (int): The type of the account given with
            `beneficiary_party.account_number`. Single digit number. Only
            required if requested by the beneficiary party. Defaults to 0.
        account_with (BeneficiaryDebtorAccountHoldingEntity): TODO: type
            description here.
        additional_address_line (str): Additional address line of the
            beneficiary address
        address (List[str]): Beneficiary address
        birth_city (str): Beneficiary birth city
        birth_country (str): Beneficiary birth country, ISO 3166 format
            country code
        birth_date (date): Beneficiary birth date. Formatted according to ISO
            8601 format: YYYY-MM-DD
        birth_province (str): Beneficiary birth province
        building_number (str): Building number of the beneficiary address
        city (str): City/Town of the Beneficiary address
        country (str): Country of the beneficiary address, ISO 3166 format
            country code
        country_of_residence (str): Country of residence of the beneficiary
            party, ISO 3166 format country code
        name (str): Beneficiary name
        organisation_identification (str): Organisation identification of a
            beneficiary, used in the case that the beneficiary is an
            organisation and not a private person
        organisation_identification_code (str): The code that specifies the
            type of `organisation_identification`
        organisation_identification_issuer (str): Issuer of the
            `organisation_identification`
        organisation_identification_scheme (str): The code that specifies the
            scheme of `organisation_identification`
        organisation_identifications
            (List[BeneficiaryDebtorOrganisationIdentification]): Array for
            additional ID(s) of beneficiary organisation
        post_code (str): Post code of the beneficiary address
        private_identification (PrivateIdentification): TODO: type description
            here.
        province (str): Province of the beneficiary address
        street_name (str): Street name of the beneficiary address
        telephone_number (str): Beneficiary phone number

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'account_name',
        "account_number": 'account_number',
        "account_number_code": 'account_number_code',
        "account_proxy": 'account_proxy',
        "account_type": 'account_type',
        "account_with": 'account_with',
        "additional_address_line": 'additional_address_line',
        "address": 'address',
        "birth_city": 'birth_city',
        "birth_country": 'birth_country',
        "birth_date": 'birth_date',
        "birth_province": 'birth_province',
        "building_number": 'building_number',
        "city": 'city',
        "country": 'country',
        "country_of_residence": 'country_of_residence',
        "name": 'name',
        "organisation_identification": 'organisation_identification',
        "organisation_identification_code": 'organisation_identification_code',
        "organisation_identification_issuer": 'organisation_identification_issuer',
        "organisation_identification_scheme": 'organisation_identification_scheme',
        "organisation_identifications": 'organisation_identifications',
        "post_code": 'post_code',
        "private_identification": 'private_identification',
        "province": 'province',
        "street_name": 'street_name',
        "telephone_number": 'telephone_number'
    }

    _optionals = [
        'account_name',
        'account_number',
        'account_number_code',
        'account_proxy',
        'account_type',
        'account_with',
        'additional_address_line',
        'address',
        'birth_city',
        'birth_country',
        'birth_date',
        'birth_province',
        'building_number',
        'city',
        'country',
        'country_of_residence',
        'name',
        'organisation_identification',
        'organisation_identification_code',
        'organisation_identification_issuer',
        'organisation_identification_scheme',
        'organisation_identifications',
        'post_code',
        'private_identification',
        'province',
        'street_name',
        'telephone_number',
    ]

    def __init__(self,
                 account_name=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 account_number_code=APIHelper.SKIP,
                 account_proxy=APIHelper.SKIP,
                 account_type=APIHelper.SKIP,
                 account_with=APIHelper.SKIP,
                 additional_address_line=APIHelper.SKIP,
                 address=APIHelper.SKIP,
                 birth_city=APIHelper.SKIP,
                 birth_country=APIHelper.SKIP,
                 birth_date=APIHelper.SKIP,
                 birth_province=APIHelper.SKIP,
                 building_number=APIHelper.SKIP,
                 city=APIHelper.SKIP,
                 country=APIHelper.SKIP,
                 country_of_residence=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 organisation_identification=APIHelper.SKIP,
                 organisation_identification_code=APIHelper.SKIP,
                 organisation_identification_issuer=APIHelper.SKIP,
                 organisation_identification_scheme=APIHelper.SKIP,
                 organisation_identifications=APIHelper.SKIP,
                 post_code=APIHelper.SKIP,
                 private_identification=APIHelper.SKIP,
                 province=APIHelper.SKIP,
                 street_name=APIHelper.SKIP,
                 telephone_number=APIHelper.SKIP):
        """Constructor for the BeneficiaryParty1 class"""

        # Initialize members of the class
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if account_number_code is not APIHelper.SKIP:
            self.account_number_code = account_number_code 
        if account_proxy is not APIHelper.SKIP:
            self.account_proxy = account_proxy 
        if account_type is not APIHelper.SKIP:
            self.account_type = account_type 
        if account_with is not APIHelper.SKIP:
            self.account_with = account_with 
        if additional_address_line is not APIHelper.SKIP:
            self.additional_address_line = additional_address_line 
        if address is not APIHelper.SKIP:
            self.address = address 
        if birth_city is not APIHelper.SKIP:
            self.birth_city = birth_city 
        if birth_country is not APIHelper.SKIP:
            self.birth_country = birth_country 
        if birth_date is not APIHelper.SKIP:
            self.birth_date = birth_date 
        if birth_province is not APIHelper.SKIP:
            self.birth_province = birth_province 
        if building_number is not APIHelper.SKIP:
            self.building_number = building_number 
        if city is not APIHelper.SKIP:
            self.city = city 
        if country is not APIHelper.SKIP:
            self.country = country 
        if country_of_residence is not APIHelper.SKIP:
            self.country_of_residence = country_of_residence 
        if name is not APIHelper.SKIP:
            self.name = name 
        if organisation_identification is not APIHelper.SKIP:
            self.organisation_identification = organisation_identification 
        if organisation_identification_code is not APIHelper.SKIP:
            self.organisation_identification_code = organisation_identification_code 
        if organisation_identification_issuer is not APIHelper.SKIP:
            self.organisation_identification_issuer = organisation_identification_issuer 
        if organisation_identification_scheme is not APIHelper.SKIP:
            self.organisation_identification_scheme = organisation_identification_scheme 
        if organisation_identifications is not APIHelper.SKIP:
            self.organisation_identifications = organisation_identifications 
        if post_code is not APIHelper.SKIP:
            self.post_code = post_code 
        if private_identification is not APIHelper.SKIP:
            self.private_identification = private_identification 
        if province is not APIHelper.SKIP:
            self.province = province 
        if street_name is not APIHelper.SKIP:
            self.street_name = street_name 
        if telephone_number is not APIHelper.SKIP:
            self.telephone_number = telephone_number 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        account_name = dictionary.get("account_name") if dictionary.get("account_name") else APIHelper.SKIP
        account_number = dictionary.get("account_number") if dictionary.get("account_number") else APIHelper.SKIP
        account_number_code = dictionary.get("account_number_code") if dictionary.get("account_number_code") else APIHelper.SKIP
        account_proxy = BeneficiaryDebtorAccountProxy.from_dictionary(dictionary.get('account_proxy')) if 'account_proxy' in dictionary.keys() else APIHelper.SKIP
        account_type = dictionary.get("account_type") if dictionary.get("account_type") else APIHelper.SKIP
        account_with = BeneficiaryDebtorAccountHoldingEntity.from_dictionary(dictionary.get('account_with')) if 'account_with' in dictionary.keys() else APIHelper.SKIP
        additional_address_line = dictionary.get("additional_address_line") if dictionary.get("additional_address_line") else APIHelper.SKIP
        address = dictionary.get("address") if dictionary.get("address") else APIHelper.SKIP
        birth_city = dictionary.get("birth_city") if dictionary.get("birth_city") else APIHelper.SKIP
        birth_country = dictionary.get("birth_country") if dictionary.get("birth_country") else APIHelper.SKIP
        birth_date = dateutil.parser.parse(dictionary.get('birth_date')).date() if dictionary.get('birth_date') else APIHelper.SKIP
        birth_province = dictionary.get("birth_province") if dictionary.get("birth_province") else APIHelper.SKIP
        building_number = dictionary.get("building_number") if dictionary.get("building_number") else APIHelper.SKIP
        city = dictionary.get("city") if dictionary.get("city") else APIHelper.SKIP
        country = dictionary.get("country") if dictionary.get("country") else APIHelper.SKIP
        country_of_residence = dictionary.get("country_of_residence") if dictionary.get("country_of_residence") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        organisation_identification = dictionary.get("organisation_identification") if dictionary.get("organisation_identification") else APIHelper.SKIP
        organisation_identification_code = dictionary.get("organisation_identification_code") if dictionary.get("organisation_identification_code") else APIHelper.SKIP
        organisation_identification_issuer = dictionary.get("organisation_identification_issuer") if dictionary.get("organisation_identification_issuer") else APIHelper.SKIP
        organisation_identification_scheme = dictionary.get("organisation_identification_scheme") if dictionary.get("organisation_identification_scheme") else APIHelper.SKIP
        organisation_identifications = None
        if dictionary.get('organisation_identifications') is not None:
            organisation_identifications = [BeneficiaryDebtorOrganisationIdentification.from_dictionary(x) for x in dictionary.get('organisation_identifications')]
        else:
            organisation_identifications = APIHelper.SKIP
        post_code = dictionary.get("post_code") if dictionary.get("post_code") else APIHelper.SKIP
        private_identification = PrivateIdentification.from_dictionary(dictionary.get('private_identification')) if 'private_identification' in dictionary.keys() else APIHelper.SKIP
        province = dictionary.get("province") if dictionary.get("province") else APIHelper.SKIP
        street_name = dictionary.get("street_name") if dictionary.get("street_name") else APIHelper.SKIP
        telephone_number = dictionary.get("telephone_number") if dictionary.get("telephone_number") else APIHelper.SKIP
        # Return an object of this model
        return cls(account_name,
                   account_number,
                   account_number_code,
                   account_proxy,
                   account_type,
                   account_with,
                   additional_address_line,
                   address,
                   birth_city,
                   birth_country,
                   birth_date,
                   birth_province,
                   building_number,
                   city,
                   country,
                   country_of_residence,
                   name,
                   organisation_identification,
                   organisation_identification_code,
                   organisation_identification_issuer,
                   organisation_identification_scheme,
                   organisation_identifications,
                   post_code,
                   private_identification,
                   province,
                   street_name,
                   telephone_number)
