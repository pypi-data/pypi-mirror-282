# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper


class Settlement(object):

    """Implementation of the 'Settlement' model.

    Specifies the details on how the settlement of the transaction between the
    instructing agent and the instructed agent is completed

    Attributes:
        account_number (str): TODO: type description here.
        account_number_code (AccountNumberCodeEnum): The type of
            identification given at `account_number` attribute
        bank_id (str): TODO: type description here.
        bank_id_code (BankIdCodeEnum): TODO: type description here.
        method (MethodEnum): Method used to settle the payment instruction.
            Acceptable Values for SEPA: CLRG. Acceptable Values for SWIFT:
            INDA (settled by Instructed Agent), INGA (Settled by Instructing
            Agent), COVE (Cover Payment)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_number": 'account_number',
        "account_number_code": 'account_number_code',
        "bank_id": 'bank_id',
        "bank_id_code": 'bank_id_code',
        "method": 'method'
    }

    _optionals = [
        'account_number',
        'account_number_code',
        'bank_id',
        'bank_id_code',
        'method',
    ]

    def __init__(self,
                 account_number=APIHelper.SKIP,
                 account_number_code=APIHelper.SKIP,
                 bank_id=APIHelper.SKIP,
                 bank_id_code=APIHelper.SKIP,
                 method=APIHelper.SKIP):
        """Constructor for the Settlement class"""

        # Initialize members of the class
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if account_number_code is not APIHelper.SKIP:
            self.account_number_code = account_number_code 
        if bank_id is not APIHelper.SKIP:
            self.bank_id = bank_id 
        if bank_id_code is not APIHelper.SKIP:
            self.bank_id_code = bank_id_code 
        if method is not APIHelper.SKIP:
            self.method = method 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        account_number = dictionary.get("account_number") if dictionary.get("account_number") else APIHelper.SKIP
        account_number_code = dictionary.get("account_number_code") if dictionary.get("account_number_code") else APIHelper.SKIP
        bank_id = dictionary.get("bank_id") if dictionary.get("bank_id") else APIHelper.SKIP
        bank_id_code = dictionary.get("bank_id_code") if dictionary.get("bank_id_code") else APIHelper.SKIP
        method = dictionary.get("method") if dictionary.get("method") else APIHelper.SKIP
        # Return an object of this model
        return cls(account_number,
                   account_number_code,
                   bank_id,
                   bank_id_code,
                   method)
