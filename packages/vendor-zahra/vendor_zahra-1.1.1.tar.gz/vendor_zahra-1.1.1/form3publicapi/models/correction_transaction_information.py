# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from form3publicapi.api_helper import APIHelper
from form3publicapi.models.query_reference import QueryReference


class CorrectionTransactionInformation(object):

    """Implementation of the 'CorrectionTransactionInformation' model.

    References a transaction initiated to fix the case under investigation.

    Attributes:
        amount (str): Amount of money moved between the instructing agent and
            the instructed agent.
        currency (str): Currency of the transaction amount. Currency code as
            defined in [ISO
            4217](https://www.iso.org/iso/home/standards/currency_codes.htm)
        end_to_end_reference (str): Unique identification, as assigned by the
            initiating party, to unambiguously identify the transaction. This
            identification is passed on, unchanged, throughout the entire
            end-to-end chain.
        instruction_id (str): Unique identification, as assigned by an
            instructing party for an instructed party, to unambiguously
            identify the instruction.
        processing_date (date): Date on which the amount of money ceases to be
            available to the agent that owes it and when the amount of money
            becomes available to the agent to which it is due.
        references (List[QueryReference]): Reference for the corrective
            payment for this query case.
        scheme_transaction_id (str): Unique identification, as assigned by the
            first instructing agent, to unambiguously identify the transaction
            that is passed on, unchanged, throughout the entire interbank
            chain.
        unique_scheme_id (str): The scheme-specific unique transaction ID to
            unambiguously identify the message. Populated by the scheme.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "amount": 'amount',
        "currency": 'currency',
        "end_to_end_reference": 'end_to_end_reference',
        "instruction_id": 'instruction_id',
        "processing_date": 'processing_date',
        "references": 'references',
        "scheme_transaction_id": 'scheme_transaction_id',
        "unique_scheme_id": 'unique_scheme_id'
    }

    _optionals = [
        'amount',
        'currency',
        'end_to_end_reference',
        'instruction_id',
        'processing_date',
        'references',
        'scheme_transaction_id',
        'unique_scheme_id',
    ]

    def __init__(self,
                 amount=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 end_to_end_reference=APIHelper.SKIP,
                 instruction_id=APIHelper.SKIP,
                 processing_date=APIHelper.SKIP,
                 references=APIHelper.SKIP,
                 scheme_transaction_id=APIHelper.SKIP,
                 unique_scheme_id=APIHelper.SKIP):
        """Constructor for the CorrectionTransactionInformation class"""

        # Initialize members of the class
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if end_to_end_reference is not APIHelper.SKIP:
            self.end_to_end_reference = end_to_end_reference 
        if instruction_id is not APIHelper.SKIP:
            self.instruction_id = instruction_id 
        if processing_date is not APIHelper.SKIP:
            self.processing_date = processing_date 
        if references is not APIHelper.SKIP:
            self.references = references 
        if scheme_transaction_id is not APIHelper.SKIP:
            self.scheme_transaction_id = scheme_transaction_id 
        if unique_scheme_id is not APIHelper.SKIP:
            self.unique_scheme_id = unique_scheme_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        amount = dictionary.get("amount") if dictionary.get("amount") else APIHelper.SKIP
        currency = dictionary.get("currency") if dictionary.get("currency") else APIHelper.SKIP
        end_to_end_reference = dictionary.get("end_to_end_reference") if dictionary.get("end_to_end_reference") else APIHelper.SKIP
        instruction_id = dictionary.get("instruction_id") if dictionary.get("instruction_id") else APIHelper.SKIP
        processing_date = dateutil.parser.parse(dictionary.get('processing_date')).date() if dictionary.get('processing_date') else APIHelper.SKIP
        references = None
        if dictionary.get('references') is not None:
            references = [QueryReference.from_dictionary(x) for x in dictionary.get('references')]
        else:
            references = APIHelper.SKIP
        scheme_transaction_id = dictionary.get("scheme_transaction_id") if dictionary.get("scheme_transaction_id") else APIHelper.SKIP
        unique_scheme_id = dictionary.get("unique_scheme_id") if dictionary.get("unique_scheme_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(amount,
                   currency,
                   end_to_end_reference,
                   instruction_id,
                   processing_date,
                   references,
                   scheme_transaction_id,
                   unique_scheme_id)
