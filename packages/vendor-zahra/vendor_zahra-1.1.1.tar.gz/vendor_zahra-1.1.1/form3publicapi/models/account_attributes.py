# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.account_attributes_organisation_identification import AccountAttributesOrganisationIdentification
from form3publicapi.models.account_attributes_private_identification import AccountAttributesPrivateIdentification
from form3publicapi.models.switched_account_details import SwitchedAccountDetails
from form3publicapi.models.user_defined_data import UserDefinedData


class AccountAttributes(object):

    """Implementation of the 'AccountAttributes' model.

    TODO: type model description here.

    Attributes:
        acceptance_qualifier (AcceptanceQualifierEnum): All accepted payments
            will receive the matching qualifier code
        account_classification (AccountClassification1Enum): Is the account
            business or personal?
        account_matching_opt_out (bool): - deprecated - Is the account opted
            out of account matching, e.g. CoP?
        account_number (str): Account number of the account. A unique number
            will automatically be generated if not provided.
        alternative_bank_account_names (List[str]): - deprecated - Alternative
            account names. Used for Confirmation of Payee matching.
        alternative_names (List[str]): Alternative names. Used for
            Confirmation of Payee matching.
        bank_account_name (str): - deprecated - Primary account name. Used for
            Confirmation of Payee matching. Required if
            confirmation_of_payee_enabled is true for the organisation.
        bank_id (str): Local country bank identifier. In the UK this is the
            sort code.
        bank_id_code (str): ISO 20022 code used to identify the type of bank
            ID being used
        base_currency (str): ISO 4217 code used to identify the base currency
            of the account
        bic (str): SWIFT BIC in either 8 or 11 character format
        country (str): ISO 3166-1 code used to identify the domicile of the
            account
        customer_id (str): A free-format reference that can be used to link
            this account to an external system
        first_name (str): - deprecated - Customer first name.
        iban (str): IBAN of the account. Will be calculated from other fields
            if not supplied.
        joint_account (bool): Is the account joint?
        name (List[str]): Account holder names (for example title, first name,
            last name). Used for Confirmation of Payee matching.
        name_matching_status (NameMatchingStatusEnum): Describes the status of
            the account for name matching via CoP. The value determines the
            code with which Form3 responds to matched CoP requests to this
            account.
        organisation_identification
            (AccountAttributesOrganisationIdentification): TODO: type
            description here.
        private_identification (AccountAttributesPrivateIdentification): TODO:
            type description here.
        processing_service (str): - deprecated - Accounting system or service.
            It will be added to each payment received to an account.
        reference_mask (str): When set will apply a validation mask on the
            payment reference to each payment received to an account.
        secondary_identification (str): Secondary identification, e.g.
            building society roll number. Used for Confirmation of Payee.
        status (StatusEnum): Current status of the account
        status_reason (StatusReasonEnum): Used to determine appropriate scheme
            or internal payment reject code. Account status field must be set
            to closed to use this functionality.
        switched (bool): - deprecated - Indicates whether the account has been
            switched using the Current Account Switch Service.
        switched_account_details (SwitchedAccountDetails): Alternate Account
            details to use in case the account has been switched away from
            this organisation.
        title (str): - deprecated - Customer title.
        user_defined_data (List[UserDefinedData]): All purpose list of
            key-value pairs to store specific data for the associated account.
            It will be added to each payment received to an account.
        user_defined_information (str): - deprecated - All purpose field to
            store specific data for the associated account. It will be added
            to each payment received to an account.
        validation_type (ValidationTypeEnum): optional validation to apply to
            the account

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "country": 'country',
        "acceptance_qualifier": 'acceptance_qualifier',
        "account_classification": 'account_classification',
        "account_matching_opt_out": 'account_matching_opt_out',
        "account_number": 'account_number',
        "alternative_bank_account_names": 'alternative_bank_account_names',
        "alternative_names": 'alternative_names',
        "bank_account_name": 'bank_account_name',
        "bank_id": 'bank_id',
        "bank_id_code": 'bank_id_code',
        "base_currency": 'base_currency',
        "bic": 'bic',
        "customer_id": 'customer_id',
        "first_name": 'first_name',
        "iban": 'iban',
        "joint_account": 'joint_account',
        "name": 'name',
        "name_matching_status": 'name_matching_status',
        "organisation_identification": 'organisation_identification',
        "private_identification": 'private_identification',
        "processing_service": 'processing_service',
        "reference_mask": 'reference_mask',
        "secondary_identification": 'secondary_identification',
        "status": 'status',
        "status_reason": 'status_reason',
        "switched": 'switched',
        "switched_account_details": 'switched_account_details',
        "title": 'title',
        "user_defined_data": 'user_defined_data',
        "user_defined_information": 'user_defined_information',
        "validation_type": 'validation_type'
    }

    _optionals = [
        'acceptance_qualifier',
        'account_classification',
        'account_matching_opt_out',
        'account_number',
        'alternative_bank_account_names',
        'alternative_names',
        'bank_account_name',
        'bank_id',
        'bank_id_code',
        'base_currency',
        'bic',
        'customer_id',
        'first_name',
        'iban',
        'joint_account',
        'name',
        'name_matching_status',
        'organisation_identification',
        'private_identification',
        'processing_service',
        'reference_mask',
        'secondary_identification',
        'status',
        'status_reason',
        'switched',
        'switched_account_details',
        'title',
        'user_defined_data',
        'user_defined_information',
        'validation_type',
    ]

    def __init__(self,
                 country=None,
                 acceptance_qualifier=APIHelper.SKIP,
                 account_classification='Personal',
                 account_matching_opt_out=False,
                 account_number=APIHelper.SKIP,
                 alternative_bank_account_names=APIHelper.SKIP,
                 alternative_names=APIHelper.SKIP,
                 bank_account_name=APIHelper.SKIP,
                 bank_id=APIHelper.SKIP,
                 bank_id_code=APIHelper.SKIP,
                 base_currency=APIHelper.SKIP,
                 bic=APIHelper.SKIP,
                 customer_id=APIHelper.SKIP,
                 first_name=APIHelper.SKIP,
                 iban=APIHelper.SKIP,
                 joint_account=False,
                 name=APIHelper.SKIP,
                 name_matching_status='supported',
                 organisation_identification=APIHelper.SKIP,
                 private_identification=APIHelper.SKIP,
                 processing_service=APIHelper.SKIP,
                 reference_mask=APIHelper.SKIP,
                 secondary_identification=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 status_reason=APIHelper.SKIP,
                 switched=False,
                 switched_account_details=APIHelper.SKIP,
                 title=APIHelper.SKIP,
                 user_defined_data=APIHelper.SKIP,
                 user_defined_information=APIHelper.SKIP,
                 validation_type=APIHelper.SKIP):
        """Constructor for the AccountAttributes class"""

        # Initialize members of the class
        if acceptance_qualifier is not APIHelper.SKIP:
            self.acceptance_qualifier = acceptance_qualifier 
        self.account_classification = account_classification 
        self.account_matching_opt_out = account_matching_opt_out 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if alternative_bank_account_names is not APIHelper.SKIP:
            self.alternative_bank_account_names = alternative_bank_account_names 
        if alternative_names is not APIHelper.SKIP:
            self.alternative_names = alternative_names 
        if bank_account_name is not APIHelper.SKIP:
            self.bank_account_name = bank_account_name 
        if bank_id is not APIHelper.SKIP:
            self.bank_id = bank_id 
        if bank_id_code is not APIHelper.SKIP:
            self.bank_id_code = bank_id_code 
        if base_currency is not APIHelper.SKIP:
            self.base_currency = base_currency 
        if bic is not APIHelper.SKIP:
            self.bic = bic 
        self.country = country 
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if first_name is not APIHelper.SKIP:
            self.first_name = first_name 
        if iban is not APIHelper.SKIP:
            self.iban = iban 
        self.joint_account = joint_account 
        if name is not APIHelper.SKIP:
            self.name = name 
        self.name_matching_status = name_matching_status 
        if organisation_identification is not APIHelper.SKIP:
            self.organisation_identification = organisation_identification 
        if private_identification is not APIHelper.SKIP:
            self.private_identification = private_identification 
        if processing_service is not APIHelper.SKIP:
            self.processing_service = processing_service 
        if reference_mask is not APIHelper.SKIP:
            self.reference_mask = reference_mask 
        if secondary_identification is not APIHelper.SKIP:
            self.secondary_identification = secondary_identification 
        if status is not APIHelper.SKIP:
            self.status = status 
        if status_reason is not APIHelper.SKIP:
            self.status_reason = status_reason 
        self.switched = switched 
        if switched_account_details is not APIHelper.SKIP:
            self.switched_account_details = switched_account_details 
        if title is not APIHelper.SKIP:
            self.title = title 
        if user_defined_data is not APIHelper.SKIP:
            self.user_defined_data = user_defined_data 
        if user_defined_information is not APIHelper.SKIP:
            self.user_defined_information = user_defined_information 
        if validation_type is not APIHelper.SKIP:
            self.validation_type = validation_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        country = dictionary.get("country") if dictionary.get("country") else None
        acceptance_qualifier = dictionary.get("acceptance_qualifier") if dictionary.get("acceptance_qualifier") else APIHelper.SKIP
        account_classification = dictionary.get("account_classification") if dictionary.get("account_classification") else 'Personal'
        account_matching_opt_out = dictionary.get("account_matching_opt_out") if dictionary.get("account_matching_opt_out") else False
        account_number = dictionary.get("account_number") if dictionary.get("account_number") else APIHelper.SKIP
        alternative_bank_account_names = dictionary.get("alternative_bank_account_names") if dictionary.get("alternative_bank_account_names") else APIHelper.SKIP
        alternative_names = dictionary.get("alternative_names") if dictionary.get("alternative_names") else APIHelper.SKIP
        bank_account_name = dictionary.get("bank_account_name") if dictionary.get("bank_account_name") else APIHelper.SKIP
        bank_id = dictionary.get("bank_id") if dictionary.get("bank_id") else APIHelper.SKIP
        bank_id_code = dictionary.get("bank_id_code") if dictionary.get("bank_id_code") else APIHelper.SKIP
        base_currency = dictionary.get("base_currency") if dictionary.get("base_currency") else APIHelper.SKIP
        bic = dictionary.get("bic") if dictionary.get("bic") else APIHelper.SKIP
        customer_id = dictionary.get("customer_id") if dictionary.get("customer_id") else APIHelper.SKIP
        first_name = dictionary.get("first_name") if dictionary.get("first_name") else APIHelper.SKIP
        iban = dictionary.get("iban") if dictionary.get("iban") else APIHelper.SKIP
        joint_account = dictionary.get("joint_account") if dictionary.get("joint_account") else False
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        name_matching_status = dictionary.get("name_matching_status") if dictionary.get("name_matching_status") else 'supported'
        organisation_identification = AccountAttributesOrganisationIdentification.from_dictionary(dictionary.get('organisation_identification')) if 'organisation_identification' in dictionary.keys() else APIHelper.SKIP
        private_identification = AccountAttributesPrivateIdentification.from_dictionary(dictionary.get('private_identification')) if 'private_identification' in dictionary.keys() else APIHelper.SKIP
        processing_service = dictionary.get("processing_service") if dictionary.get("processing_service") else APIHelper.SKIP
        reference_mask = dictionary.get("reference_mask") if dictionary.get("reference_mask") else APIHelper.SKIP
        secondary_identification = dictionary.get("secondary_identification") if dictionary.get("secondary_identification") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        status_reason = dictionary.get("status_reason") if dictionary.get("status_reason") else APIHelper.SKIP
        switched = dictionary.get("switched") if dictionary.get("switched") else False
        switched_account_details = SwitchedAccountDetails.from_dictionary(dictionary.get('switched_account_details')) if 'switched_account_details' in dictionary.keys() else APIHelper.SKIP
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        user_defined_data = None
        if dictionary.get('user_defined_data') is not None:
            user_defined_data = [UserDefinedData.from_dictionary(x) for x in dictionary.get('user_defined_data')]
        else:
            user_defined_data = APIHelper.SKIP
        user_defined_information = dictionary.get("user_defined_information") if dictionary.get("user_defined_information") else APIHelper.SKIP
        validation_type = dictionary.get("validation_type") if dictionary.get("validation_type") else APIHelper.SKIP
        # Return an object of this model
        return cls(country,
                   acceptance_qualifier,
                   account_classification,
                   account_matching_opt_out,
                   account_number,
                   alternative_bank_account_names,
                   alternative_names,
                   bank_account_name,
                   bank_id,
                   bank_id_code,
                   base_currency,
                   bic,
                   customer_id,
                   first_name,
                   iban,
                   joint_account,
                   name,
                   name_matching_status,
                   organisation_identification,
                   private_identification,
                   processing_service,
                   reference_mask,
                   secondary_identification,
                   status,
                   status_reason,
                   switched,
                   switched_account_details,
                   title,
                   user_defined_data,
                   user_defined_information,
                   validation_type)
