# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.query_response_charges import QueryResponseCharges
from form3publicapi.models.query_response_compensation import QueryResponseCompensation
from form3publicapi.models.query_response_information import QueryResponseInformation


class QueryResponseAttributes(object):

    """Implementation of the 'QueryResponseAttributes' model.

    TODO: type model description here.

    Attributes:
        answer (QueryResponseAnswerEnum): TODO: type description here.
        charges (QueryResponseCharges): TODO: type description here.
        compensation (QueryResponseCompensation): TODO: type description
            here.
        compensation_amount (str): TODO: type description here.
        currency (str): TODO: type description here.
        information (QueryResponseInformation): TODO: type description here.
        status_code (QueryResponseStatusCodeEnum): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "answer": 'answer',
        "charges": 'charges',
        "compensation": 'compensation',
        "compensation_amount": 'compensation_amount',
        "currency": 'currency',
        "information": 'information',
        "status_code": 'status_code'
    }

    _optionals = [
        'charges',
        'compensation',
        'compensation_amount',
        'currency',
        'information',
        'status_code',
    ]

    def __init__(self,
                 answer=None,
                 charges=APIHelper.SKIP,
                 compensation=APIHelper.SKIP,
                 compensation_amount=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 information=APIHelper.SKIP,
                 status_code=APIHelper.SKIP):
        """Constructor for the QueryResponseAttributes class"""

        # Initialize members of the class
        self.answer = answer 
        if charges is not APIHelper.SKIP:
            self.charges = charges 
        if compensation is not APIHelper.SKIP:
            self.compensation = compensation 
        if compensation_amount is not APIHelper.SKIP:
            self.compensation_amount = compensation_amount 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if information is not APIHelper.SKIP:
            self.information = information 
        if status_code is not APIHelper.SKIP:
            self.status_code = status_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        answer = dictionary.get("answer") if dictionary.get("answer") else None
        charges = QueryResponseCharges.from_dictionary(dictionary.get('charges')) if 'charges' in dictionary.keys() else APIHelper.SKIP
        compensation = QueryResponseCompensation.from_dictionary(dictionary.get('compensation')) if 'compensation' in dictionary.keys() else APIHelper.SKIP
        compensation_amount = dictionary.get("compensation_amount") if dictionary.get("compensation_amount") else APIHelper.SKIP
        currency = dictionary.get("currency") if dictionary.get("currency") else APIHelper.SKIP
        information = QueryResponseInformation.from_dictionary(dictionary.get('information')) if 'information' in dictionary.keys() else APIHelper.SKIP
        status_code = dictionary.get("status_code") if dictionary.get("status_code") else APIHelper.SKIP
        # Return an object of this model
        return cls(answer,
                   charges,
                   compensation,
                   compensation_amount,
                   currency,
                   information,
                   status_code)
