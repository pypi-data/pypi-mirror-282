# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper


class Token(object):

    """Implementation of the 'Token' model.

    TODO: type model description here.

    Attributes:
        access_token (str): The access token to be used for all future API
            calls until `expires_in`
        expires_in (int): The lifetime of this token in seconds
        token_type (TokenTypeEnum): The type of the token. Is always set to
            `Bearer`.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "access_token": 'access_token',
        "expires_in": 'expires_in',
        "token_type": 'token_type'
    }

    _optionals = [
        'access_token',
        'expires_in',
        'token_type',
    ]

    def __init__(self,
                 access_token=APIHelper.SKIP,
                 expires_in=APIHelper.SKIP,
                 token_type=APIHelper.SKIP):
        """Constructor for the Token class"""

        # Initialize members of the class
        if access_token is not APIHelper.SKIP:
            self.access_token = access_token 
        if expires_in is not APIHelper.SKIP:
            self.expires_in = expires_in 
        if token_type is not APIHelper.SKIP:
            self.token_type = token_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        access_token = dictionary.get("access_token") if dictionary.get("access_token") else APIHelper.SKIP
        expires_in = dictionary.get("expires_in") if dictionary.get("expires_in") else APIHelper.SKIP
        token_type = dictionary.get("token_type") if dictionary.get("token_type") else APIHelper.SKIP
        # Return an object of this model
        return cls(access_token,
                   expires_in,
                   token_type)
