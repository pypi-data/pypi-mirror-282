# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from form3publicapi.api_helper import APIHelper
from form3publicapi.models.charges_amount import ChargesAmount
from form3publicapi.models.reversal_amount import ReversalAmount


class Attributes35(object):

    """Implementation of the 'Attributes35' model.

    TODO: type model description here.

    Attributes:
        charges_amount (ChargesAmount): Only present when a
            DirectDebitReversal contains charges. SEPA only
        processing_date (date): Date on which the operation is to be debited
            from the debtor account. Formatted according to ISO 8601 format:
            YYYY-MM-DD.
        reason (str): Further explanation of the reason given in reason_code.
            Only evaluated for certain reason codes.
        reason_code (str): The reason for the direct debit reversal. Has to be
            a valid [reversal reason
            code](http://api-docs.form3.tech/api.html#enumerations-reversal-rea
            son-codes).
        reversal_amount (ReversalAmount): SEPA only
        scheme_processing_date (date): Date on which the operation is
            processed by the scheme. Formatted according to ISO 8601 format:
            YYYY-MM-DD. Only used if different from `processing_date`.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "charges_amount": 'charges_amount',
        "processing_date": 'processing_date',
        "reason": 'reason',
        "reason_code": 'reason_code',
        "reversal_amount": 'reversal_amount',
        "scheme_processing_date": 'scheme_processing_date'
    }

    _optionals = [
        'charges_amount',
        'processing_date',
        'reason',
        'reason_code',
        'reversal_amount',
        'scheme_processing_date',
    ]

    def __init__(self,
                 charges_amount=APIHelper.SKIP,
                 processing_date=APIHelper.SKIP,
                 reason=APIHelper.SKIP,
                 reason_code=APIHelper.SKIP,
                 reversal_amount=APIHelper.SKIP,
                 scheme_processing_date=APIHelper.SKIP):
        """Constructor for the Attributes35 class"""

        # Initialize members of the class
        if charges_amount is not APIHelper.SKIP:
            self.charges_amount = charges_amount 
        if processing_date is not APIHelper.SKIP:
            self.processing_date = processing_date 
        if reason is not APIHelper.SKIP:
            self.reason = reason 
        if reason_code is not APIHelper.SKIP:
            self.reason_code = reason_code 
        if reversal_amount is not APIHelper.SKIP:
            self.reversal_amount = reversal_amount 
        if scheme_processing_date is not APIHelper.SKIP:
            self.scheme_processing_date = scheme_processing_date 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        charges_amount = ChargesAmount.from_dictionary(dictionary.get('charges_amount')) if 'charges_amount' in dictionary.keys() else APIHelper.SKIP
        processing_date = dateutil.parser.parse(dictionary.get('processing_date')).date() if dictionary.get('processing_date') else APIHelper.SKIP
        reason = dictionary.get("reason") if dictionary.get("reason") else APIHelper.SKIP
        reason_code = dictionary.get("reason_code") if dictionary.get("reason_code") else APIHelper.SKIP
        reversal_amount = ReversalAmount.from_dictionary(dictionary.get('reversal_amount')) if 'reversal_amount' in dictionary.keys() else APIHelper.SKIP
        scheme_processing_date = dateutil.parser.parse(dictionary.get('scheme_processing_date')).date() if dictionary.get('scheme_processing_date') else APIHelper.SKIP
        # Return an object of this model
        return cls(charges_amount,
                   processing_date,
                   reason,
                   reason_code,
                   reversal_amount,
                   scheme_processing_date)
