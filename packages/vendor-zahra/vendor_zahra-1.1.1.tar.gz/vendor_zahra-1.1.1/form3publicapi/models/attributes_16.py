# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from form3publicapi.api_helper import APIHelper


class Attributes16(object):

    """Implementation of the 'Attributes16' model.

    TODO: type model description here.

    Attributes:
        clearing_system (str): Clearing infrastructure through which the
            payment instruction was processed
        file_identifier (str): Identification code of the file sent to
            scheme.
        file_number (str): Number of the file sent to scheme.
        limit_breach_end_datetime (datetime): Time a payment was released from
            being held due to a limit breach
        limit_breach_start_datetime (datetime): Start time a payment was held
            due to a limit breach
        redirected_account_number (str): Details of the account to which funds
            are redirected (if applicable)
        redirected_bank_id (str): Details of the bank to which funds are
            redirected (if applicable)
        route (RouteEnum): Route taken for an outbound payment
        scheme_status_code (str): Scheme-specific status (if submission has
            been submitted to a scheme)
        scheme_status_code_description (str):
            [Description](http://api-docs.form3.tech/api.html#enumerations-sche
            me-status-codes-for-bacs) of `scheme_status_code`
        settlement_cycle (int): Cycle in which the payment will be settled
        settlement_date (date): Date that the payment will be settled
        status (PaymentSubmissionStatusEnum): [Status of the
            submission](https://api-docs.form3.tech/api.html#enumerations-payme
            nt-status-codes-submission-status)
        status_reason (str): Description of the submission status
        submission_datetime (datetime): Date of the submission
        transaction_start_datetime (datetime): Time the request was received
            by Form3. Used to compute the total transaction time of a
            payment.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "clearing_system": 'clearing_system',
        "file_identifier": 'file_identifier',
        "file_number": 'file_number',
        "limit_breach_end_datetime": 'limit_breach_end_datetime',
        "limit_breach_start_datetime": 'limit_breach_start_datetime',
        "redirected_account_number": 'redirected_account_number',
        "redirected_bank_id": 'redirected_bank_id',
        "route": 'route',
        "scheme_status_code": 'scheme_status_code',
        "scheme_status_code_description": 'scheme_status_code_description',
        "settlement_cycle": 'settlement_cycle',
        "settlement_date": 'settlement_date',
        "status": 'status',
        "status_reason": 'status_reason',
        "submission_datetime": 'submission_datetime',
        "transaction_start_datetime": 'transaction_start_datetime'
    }

    _optionals = [
        'clearing_system',
        'file_identifier',
        'file_number',
        'limit_breach_end_datetime',
        'limit_breach_start_datetime',
        'redirected_account_number',
        'redirected_bank_id',
        'route',
        'scheme_status_code',
        'scheme_status_code_description',
        'settlement_cycle',
        'settlement_date',
        'status',
        'status_reason',
        'submission_datetime',
        'transaction_start_datetime',
    ]

    def __init__(self,
                 clearing_system=APIHelper.SKIP,
                 file_identifier=APIHelper.SKIP,
                 file_number=APIHelper.SKIP,
                 limit_breach_end_datetime=APIHelper.SKIP,
                 limit_breach_start_datetime=APIHelper.SKIP,
                 redirected_account_number=APIHelper.SKIP,
                 redirected_bank_id=APIHelper.SKIP,
                 route=APIHelper.SKIP,
                 scheme_status_code=APIHelper.SKIP,
                 scheme_status_code_description=APIHelper.SKIP,
                 settlement_cycle=APIHelper.SKIP,
                 settlement_date=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 status_reason=APIHelper.SKIP,
                 submission_datetime=APIHelper.SKIP,
                 transaction_start_datetime=APIHelper.SKIP):
        """Constructor for the Attributes16 class"""

        # Initialize members of the class
        if clearing_system is not APIHelper.SKIP:
            self.clearing_system = clearing_system 
        if file_identifier is not APIHelper.SKIP:
            self.file_identifier = file_identifier 
        if file_number is not APIHelper.SKIP:
            self.file_number = file_number 
        if limit_breach_end_datetime is not APIHelper.SKIP:
            self.limit_breach_end_datetime = APIHelper.apply_datetime_converter(limit_breach_end_datetime, APIHelper.RFC3339DateTime) if limit_breach_end_datetime else None 
        if limit_breach_start_datetime is not APIHelper.SKIP:
            self.limit_breach_start_datetime = APIHelper.apply_datetime_converter(limit_breach_start_datetime, APIHelper.RFC3339DateTime) if limit_breach_start_datetime else None 
        if redirected_account_number is not APIHelper.SKIP:
            self.redirected_account_number = redirected_account_number 
        if redirected_bank_id is not APIHelper.SKIP:
            self.redirected_bank_id = redirected_bank_id 
        if route is not APIHelper.SKIP:
            self.route = route 
        if scheme_status_code is not APIHelper.SKIP:
            self.scheme_status_code = scheme_status_code 
        if scheme_status_code_description is not APIHelper.SKIP:
            self.scheme_status_code_description = scheme_status_code_description 
        if settlement_cycle is not APIHelper.SKIP:
            self.settlement_cycle = settlement_cycle 
        if settlement_date is not APIHelper.SKIP:
            self.settlement_date = settlement_date 
        if status is not APIHelper.SKIP:
            self.status = status 
        if status_reason is not APIHelper.SKIP:
            self.status_reason = status_reason 
        if submission_datetime is not APIHelper.SKIP:
            self.submission_datetime = APIHelper.apply_datetime_converter(submission_datetime, APIHelper.RFC3339DateTime) if submission_datetime else None 
        if transaction_start_datetime is not APIHelper.SKIP:
            self.transaction_start_datetime = APIHelper.apply_datetime_converter(transaction_start_datetime, APIHelper.RFC3339DateTime) if transaction_start_datetime else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        clearing_system = dictionary.get("clearing_system") if dictionary.get("clearing_system") else APIHelper.SKIP
        file_identifier = dictionary.get("file_identifier") if dictionary.get("file_identifier") else APIHelper.SKIP
        file_number = dictionary.get("file_number") if dictionary.get("file_number") else APIHelper.SKIP
        limit_breach_end_datetime = APIHelper.RFC3339DateTime.from_value(dictionary.get("limit_breach_end_datetime")).datetime if dictionary.get("limit_breach_end_datetime") else APIHelper.SKIP
        limit_breach_start_datetime = APIHelper.RFC3339DateTime.from_value(dictionary.get("limit_breach_start_datetime")).datetime if dictionary.get("limit_breach_start_datetime") else APIHelper.SKIP
        redirected_account_number = dictionary.get("redirected_account_number") if dictionary.get("redirected_account_number") else APIHelper.SKIP
        redirected_bank_id = dictionary.get("redirected_bank_id") if dictionary.get("redirected_bank_id") else APIHelper.SKIP
        route = dictionary.get("route") if dictionary.get("route") else APIHelper.SKIP
        scheme_status_code = dictionary.get("scheme_status_code") if dictionary.get("scheme_status_code") else APIHelper.SKIP
        scheme_status_code_description = dictionary.get("scheme_status_code_description") if dictionary.get("scheme_status_code_description") else APIHelper.SKIP
        settlement_cycle = dictionary.get("settlement_cycle") if dictionary.get("settlement_cycle") else APIHelper.SKIP
        settlement_date = dateutil.parser.parse(dictionary.get('settlement_date')).date() if dictionary.get('settlement_date') else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        status_reason = dictionary.get("status_reason") if dictionary.get("status_reason") else APIHelper.SKIP
        submission_datetime = APIHelper.RFC3339DateTime.from_value(dictionary.get("submission_datetime")).datetime if dictionary.get("submission_datetime") else APIHelper.SKIP
        transaction_start_datetime = APIHelper.RFC3339DateTime.from_value(dictionary.get("transaction_start_datetime")).datetime if dictionary.get("transaction_start_datetime") else APIHelper.SKIP
        # Return an object of this model
        return cls(clearing_system,
                   file_identifier,
                   file_number,
                   limit_breach_end_datetime,
                   limit_breach_start_datetime,
                   redirected_account_number,
                   redirected_bank_id,
                   route,
                   scheme_status_code,
                   scheme_status_code_description,
                   settlement_cycle,
                   settlement_date,
                   status,
                   status_reason,
                   submission_datetime,
                   transaction_start_datetime)
