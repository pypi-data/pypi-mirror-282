# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from form3publicapi.api_helper import APIHelper
from form3publicapi.configuration import Server
from form3publicapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from form3publicapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from form3publicapi.models.report_details_list_response import ReportDetailsListResponse
from form3publicapi.models.report_details_response import ReportDetailsResponse
from form3publicapi.models.report_admission_details_response import ReportAdmissionDetailsResponse
from form3publicapi.exceptions.api_error_exception import ApiErrorException


class ReportsController(BaseController):

    """A Controller to access Endpoints in the form3publicapi API."""
    def __init__(self, config):
        super(ReportsController, self).__init__(config)

    def list_reports(self,
                     page_number=None,
                     page_size=100,
                     filter_organisation_id=None,
                     filter_report_type=None,
                     filter_report_type_description=None,
                     filter_report_source=None,
                     filter_created_on_after=None,
                     filter_created_on_before=None,
                     filter_modified_on_after=None,
                     filter_modified_on_before=None,
                     filter_processing_date_from=None,
                     filter_processing_date_to=None):
        """Does a GET request to /notification/reports.

        List reports

        Args:
            page_number (str, optional): Which page to select
            page_size (int, optional): Number of items to select
            filter_organisation_id (List[uuid|str], optional): Filter by
                organisation Ids
            filter_report_type (str, optional): Filter by ReportType
            filter_report_type_description (str, optional): Filter by Report
                Type Description
            filter_report_source (str, optional): Filter by Report Source
            filter_created_on_after (datetime, optional): Request reports
                created after specific date time
            filter_created_on_before (datetime, optional): Request reports
                created after specific date time
            filter_modified_on_after (datetime, optional): Request reports
                modified after specific date time
            filter_modified_on_before (datetime, optional): Request reports
                modified before specific date time
            filter_processing_date_from (date, optional): Request reports with
                processing date from specific date (inclusive)
            filter_processing_date_to (date, optional): Request reports with
                processing date to specific date (inclusive)

        Returns:
            ReportDetailsListResponse: Response from the API. List of reports

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notification/reports')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page[number]')
                         .value(page_number))
            .query_param(Parameter()
                         .key('page[size]')
                         .value(page_size))
            .query_param(Parameter()
                         .key('filter[organisation_id]')
                         .value(filter_organisation_id))
            .query_param(Parameter()
                         .key('filter[report_type]')
                         .value(filter_report_type))
            .query_param(Parameter()
                         .key('filter[report_type_description]')
                         .value(filter_report_type_description))
            .query_param(Parameter()
                         .key('filter[report_source]')
                         .value(filter_report_source))
            .query_param(Parameter()
                         .key('filter[created_on_after]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_created_on_after)))
            .query_param(Parameter()
                         .key('filter[created_on_before]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_created_on_before)))
            .query_param(Parameter()
                         .key('filter[modified_on_after]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_modified_on_after)))
            .query_param(Parameter()
                         .key('filter[modified_on_before]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_modified_on_before)))
            .query_param(Parameter()
                         .key('filter[processing_date_from]')
                         .value(filter_processing_date_from))
            .query_param(Parameter()
                         .key('filter[processing_date_to]')
                         .value(filter_processing_date_to))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReportDetailsListResponse.from_dictionary)
            .local_error('400', 'Reports bad request', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
        ).execute()

    def get_report(self,
                   id,
                   accept):
        """Does a GET request to /notification/reports/{id}.

        Get report by ID

        Args:
            id (uuid|str): Report ID
            accept (str): Acceptable Format

        Returns:
            ReportDetailsResponse: Response from the API. Report details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notification/reports/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReportDetailsResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('404', 'Report Not Found', ApiErrorException)
            .local_error('406', 'Report not available in acceptable format', ApiErrorException)
        ).execute()

    def get_report_admission_by_id(self,
                                   id,
                                   admission_id):
        """Does a GET request to /notification/reports/{id}/admissions/{admissionId}.

        Get Report Admission by ID

        Args:
            id (uuid|str): Report Id
            admission_id (uuid|str): Report Admission ID

        Returns:
            ReportAdmissionDetailsResponse: Response from the API. Get report
                admission by Id

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notification/reports/{id}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReportAdmissionDetailsResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('404', 'Not Found', ApiErrorException)
        ).execute()
