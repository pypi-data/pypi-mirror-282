# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from form3publicapi.api_helper import APIHelper
from form3publicapi.configuration import Server
from form3publicapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from form3publicapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from form3publicapi.models.direct_debit_details_list_response import DirectDebitDetailsListResponse
from form3publicapi.models.direct_debit_creation_response import DirectDebitCreationResponse
from form3publicapi.models.direct_debit_details_response import DirectDebitDetailsResponse
from form3publicapi.models.direct_debit_admission_details_response import DirectDebitAdmissionDetailsResponse
from form3publicapi.models.direct_debit_decision_creation_response import DirectDebitDecisionCreationResponse
from form3publicapi.models.direct_debit_decision_details_response import DirectDebitDecisionDetailsResponse
from form3publicapi.models.direct_debit_decision_admission_creation_response import DirectDebitDecisionAdmissionCreationResponse
from form3publicapi.models.direct_debit_decision_admission_details_response import DirectDebitDecisionAdmissionDetailsResponse
from form3publicapi.models.direct_debit_decision_submission_creation_response import DirectDebitDecisionSubmissionCreationResponse
from form3publicapi.models.direct_debit_decision_submission_details_response import DirectDebitDecisionSubmissionDetailsResponse
from form3publicapi.models.direct_debit_recall_creation_response import DirectDebitRecallCreationResponse
from form3publicapi.models.direct_debit_recall_details_response import DirectDebitRecallDetailsResponse
from form3publicapi.models.direct_debit_recall_admission_details_response import DirectDebitRecallAdmissionDetailsResponse
from form3publicapi.models.direct_debit_recall_submission_details_response import DirectDebitRecallSubmissionDetailsResponse
from form3publicapi.models.direct_debit_return_creation_response import DirectDebitReturnCreationResponse
from form3publicapi.models.direct_debit_return_details_response import DirectDebitReturnDetailsResponse
from form3publicapi.models.direct_debit_return_admission_details_response import DirectDebitReturnAdmissionDetailsResponse
from form3publicapi.models.direct_debit_return_reversal_details_response import DirectDebitReturnReversalDetailsResponse
from form3publicapi.models.direct_debit_return_reversal_admission_details_response import DirectDebitReturnReversalAdmissionDetailsResponse
from form3publicapi.models.direct_debit_return_submission_creation_response import DirectDebitReturnSubmissionCreationResponse
from form3publicapi.models.direct_debit_return_submission_details_response import DirectDebitReturnSubmissionDetailsResponse
from form3publicapi.models.direct_debit_reversal_creation_response import DirectDebitReversalCreationResponse
from form3publicapi.models.direct_debit_reversal_details_response import DirectDebitReversalDetailsResponse
from form3publicapi.models.direct_debit_reversal_admission_details_response import DirectDebitReversalAdmissionDetailsResponse
from form3publicapi.models.direct_debit_reversal_submission_creation_response import DirectDebitReversalSubmissionCreationResponse
from form3publicapi.models.direct_debit_reversal_submission_details_response import DirectDebitReversalSubmissionDetailsResponse
from form3publicapi.models.direct_debit_submission_creation_response import DirectDebitSubmissionCreationResponse
from form3publicapi.models.direct_debit_submission_details_response import DirectDebitSubmissionDetailsResponse
from form3publicapi.exceptions.api_error_exception import ApiErrorException


class DirectDebitsController(BaseController):

    """A Controller to access Endpoints in the form3publicapi API."""
    def __init__(self, config):
        super(DirectDebitsController, self).__init__(config)

    def get_directdebits(self,
                         page_number=None,
                         page_before=None,
                         page_after=None,
                         page_size=None,
                         filter_organisation_id=None,
                         filter_created_date_from=None,
                         filter_created_date_to=None,
                         filter_modified_date_from=None,
                         filter_modified_date_to=None,
                         filter_debtor_party_account_number=None,
                         filter_debtor_party_bank_id=None,
                         filter_beneficiary_party_account_number=None,
                         filter_beneficiary_party_bank_id=None,
                         filter_currency=None,
                         filter_payment_scheme=None,
                         filter_payment_type=None,
                         filter_processing_date_from=None,
                         filter_processing_date_to=None,
                         filter_clearing_id=None,
                         filter_admission_admission_date_from=None,
                         filter_admission_admission_date_to=None,
                         filter_admission_status=None,
                         filter_admission_scheme_status_code=None,
                         filter_amount=None,
                         filter_reference=None,
                         filter_unique_scheme_id=None,
                         filter_submission_submission_date_from=None,
                         filter_submission_submission_date_to=None,
                         filter_submission_status=None,
                         filter_submission_scheme_status_code=None,
                         filter_relationships=None,
                         filter_not_relationships=None):
        """Does a GET request to /transaction/directdebits.

        List direct debits

        Args:
            page_number (str, optional): Which page to select
            page_before (str, optional): Cursor for previous page (this is a
                base64-encoded UUID continuation token returned from the
                application and should not be manually generated, unless
                requesting the last page, where the value should be set to
                "end").
            page_after (str, optional): Cursor for next page (this is a
                base64-encoded UUID continuation token returned from the
                application and should not be manually generated, unless
                requesting the first page, where the value should be set to
                "start").
            page_size (int, optional): Number of items to select
            filter_organisation_id (List[uuid|str], optional): Filter by
                organisation id
            filter_created_date_from (datetime, optional): TODO: type
                description here.
            filter_created_date_to (datetime, optional): TODO: type
                description here.
            filter_modified_date_from (datetime, optional): TODO: type
                description here.
            filter_modified_date_to (datetime, optional): TODO: type
                description here.
            filter_debtor_party_account_number (str, optional): TODO: type
                description here.
            filter_debtor_party_bank_id (str, optional): TODO: type
                description here.
            filter_beneficiary_party_account_number (str, optional): TODO:
                type description here.
            filter_beneficiary_party_bank_id (str, optional): TODO: type
                description here.
            filter_currency (str, optional): TODO: type description here.
            filter_payment_scheme (str, optional): TODO: type description
                here.
            filter_payment_type (str, optional): TODO: type description here.
            filter_processing_date_from (date, optional): TODO: type
                description here.
            filter_processing_date_to (date, optional): TODO: type description
                here.
            filter_clearing_id (str, optional): TODO: type description here.
            filter_admission_admission_date_from (datetime, optional): TODO:
                type description here.
            filter_admission_admission_date_to (datetime, optional): TODO:
                type description here.
            filter_admission_status (str, optional): Filter by admission
                status
            filter_admission_scheme_status_code (str, optional): Filter by
                admission scheme status code
            filter_amount (str, optional): Filter by amount
            filter_reference (str, optional): Filter by reference
            filter_unique_scheme_id (str, optional): Filter by unique scheme
                id
            filter_submission_submission_date_from (datetime, optional): TODO:
                type description here.
            filter_submission_submission_date_to (datetime, optional): TODO:
                type description here.
            filter_submission_status (str, optional): Filter by submission
                status
            filter_submission_scheme_status_code (str, optional): Filter by
                submission scheme status code
            filter_relationships (List[FilterRelationshipsEnum], optional):
                Filter for direct debits containing all of the requested
                relationships
            filter_not_relationships (List[FilterNotRelationshipsEnum],
                optional): Filter for direct debits containing none of the
                requested relationships

        Returns:
            DirectDebitDetailsListResponse: Response from the API. List of
                direct debit details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page[number]')
                         .value(page_number))
            .query_param(Parameter()
                         .key('page[before]')
                         .value(page_before))
            .query_param(Parameter()
                         .key('page[after]')
                         .value(page_after))
            .query_param(Parameter()
                         .key('page[size]')
                         .value(page_size))
            .query_param(Parameter()
                         .key('filter[organisation_id]')
                         .value(filter_organisation_id))
            .query_param(Parameter()
                         .key('filter[created_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_created_date_from)))
            .query_param(Parameter()
                         .key('filter[created_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_created_date_to)))
            .query_param(Parameter()
                         .key('filter[modified_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_modified_date_from)))
            .query_param(Parameter()
                         .key('filter[modified_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_modified_date_to)))
            .query_param(Parameter()
                         .key('filter[debtor_party.account_number]')
                         .value(filter_debtor_party_account_number))
            .query_param(Parameter()
                         .key('filter[debtor_party.bank_id]')
                         .value(filter_debtor_party_bank_id))
            .query_param(Parameter()
                         .key('filter[beneficiary_party.account_number]')
                         .value(filter_beneficiary_party_account_number))
            .query_param(Parameter()
                         .key('filter[beneficiary_party.bank_id]')
                         .value(filter_beneficiary_party_bank_id))
            .query_param(Parameter()
                         .key('filter[currency]')
                         .value(filter_currency))
            .query_param(Parameter()
                         .key('filter[payment_scheme]')
                         .value(filter_payment_scheme))
            .query_param(Parameter()
                         .key('filter[payment_type]')
                         .value(filter_payment_type))
            .query_param(Parameter()
                         .key('filter[processing_date_from]')
                         .value(filter_processing_date_from))
            .query_param(Parameter()
                         .key('filter[processing_date_to]')
                         .value(filter_processing_date_to))
            .query_param(Parameter()
                         .key('filter[clearing_id]')
                         .value(filter_clearing_id))
            .query_param(Parameter()
                         .key('filter[admission.admission_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_admission_admission_date_from)))
            .query_param(Parameter()
                         .key('filter[admission.admission_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_admission_admission_date_to)))
            .query_param(Parameter()
                         .key('filter[admission.status]')
                         .value(filter_admission_status))
            .query_param(Parameter()
                         .key('filter[admission.scheme_status_code]')
                         .value(filter_admission_scheme_status_code))
            .query_param(Parameter()
                         .key('filter[amount]')
                         .value(filter_amount))
            .query_param(Parameter()
                         .key('filter[reference]')
                         .value(filter_reference))
            .query_param(Parameter()
                         .key('filter[unique_scheme_id]')
                         .value(filter_unique_scheme_id))
            .query_param(Parameter()
                         .key('filter[submission.submission_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_submission_submission_date_from)))
            .query_param(Parameter()
                         .key('filter[submission.submission_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_submission_submission_date_to)))
            .query_param(Parameter()
                         .key('filter[submission.status]')
                         .value(filter_submission_status))
            .query_param(Parameter()
                         .key('filter[submission.scheme_status_code]')
                         .value(filter_submission_scheme_status_code))
            .query_param(Parameter()
                         .key('filter[relationships]')
                         .value(filter_relationships))
            .query_param(Parameter()
                         .key('filter[not_relationships]')
                         .value(filter_not_relationships))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitDetailsListResponse.from_dictionary)
        ).execute()

    def post_directdebits(self,
                          direct_debit_creation_request=None):
        """Does a POST request to /transaction/directdebits.

        Create Direct debit

        Args:
            direct_debit_creation_request (DirectDebitCreation, optional):
                TODO: type description here.

        Returns:
            DirectDebitCreationResponse: Response from the API. Direct Debit
                creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(direct_debit_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitCreationResponse.from_dictionary)
            .local_error('400', 'Direct Debit creation error', ApiErrorException)
        ).execute()

    def get_directdebits_id(self,
                            id):
        """Does a GET request to /transaction/directdebits/{id}.

        Fetch direct debit

        Args:
            id (uuid|str): Direct Debit Id

        Returns:
            DirectDebitDetailsResponse: Response from the API. Direct Debit
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitDetailsResponse.from_dictionary)
        ).execute()

    def get_directdebits_id_admissions_admission_id(self,
                                                    id,
                                                    admission_id):
        """Does a GET request to /transaction/directdebits/{id}/admissions/{admissionId}.

        Fetch Direct Debit Admission

        Args:
            id (uuid|str): Direct Debit Id
            admission_id (uuid|str): Direct Debit Admission Id

        Returns:
            DirectDebitAdmissionDetailsResponse: Response from the API. Direct
                Debit Admission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitAdmissionDetailsResponse.from_dictionary)
        ).execute()

    def post_directdebits_id_decisions(self,
                                       id,
                                       direct_debit_decision_creation_request=None):
        """Does a POST request to /transaction/directdebits/{id}/decisions.

        Create direct debit decision

        Args:
            id (uuid|str): Direct Debit Id
            direct_debit_decision_creation_request
                (DirectDebitDecisionCreation, optional): TODO: type
                description here.

        Returns:
            DirectDebitDecisionCreationResponse: Response from the API. Direct
                Debit decision creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/decisions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(direct_debit_decision_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitDecisionCreationResponse.from_dictionary)
            .local_error('400', 'Direct Debit decision creation error', ApiErrorException)
            .local_error('409', 'Direct Debit decision creation conflict error', ApiErrorException)
        ).execute()

    def get_directdebits_id_decisions_decision_id(self,
                                                  id,
                                                  decision_id):
        """Does a GET request to /transaction/directdebits/{id}/decisions/{decisionId}.

        Get direct debit decision

        Args:
            id (uuid|str): Direct Debit Id
            decision_id (uuid|str): Direct Debit decision id

        Returns:
            DirectDebitDecisionDetailsResponse: Response from the API. Direct
                debit decision details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/decisions/{decisionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('decisionId')
                            .value(decision_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitDecisionDetailsResponse.from_dictionary)
        ).execute()

    def post_directdebits_id_decisions_decision_id_admissions(self,
                                                              id,
                                                              decision_id,
                                                              direct_debit_admission_submission_creation_request=None):
        """Does a POST request to /transaction/directdebits/{id}/decisions/{decisionId}/admissions.

        Create direct debit decision admissions

        Args:
            id (uuid|str): Direct Debit Id
            decision_id (uuid|str): Direct Debit decision id
            direct_debit_admission_submission_creation_request
                (DirectDebitDecisionAdmissionCreation, optional): TODO: type
                description here.

        Returns:
            DirectDebitDecisionAdmissionCreationResponse: Response from the
                API. Direct Debit decision admission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/decisions/{decisionId}/admissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('decisionId')
                            .value(decision_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(direct_debit_admission_submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitDecisionAdmissionCreationResponse.from_dictionary)
            .local_error('400', 'Direct Debit decision admission creation error', ApiErrorException)
            .local_error('409', 'Direct Debit decision submission creation conflict error', ApiErrorException)
        ).execute()

    def get_directdebits_id_decisions_decision_id_admissions_admission_id(self,
                                                                          id,
                                                                          decision_id,
                                                                          admission_id):
        """Does a GET request to /transaction/directdebits/{id}/decisions/{decisionId}/admissions/{admissionId}.

        Fetch decision admission

        Args:
            id (uuid|str): Direct Debit Id
            decision_id (uuid|str): Direct Debit decision id
            admission_id (uuid|str): Direct Debit Admission Id

        Returns:
            DirectDebitDecisionAdmissionDetailsResponse: Response from the
                API. Decision admission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/decisions/{decisionId}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('decisionId')
                            .value(decision_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitDecisionAdmissionDetailsResponse.from_dictionary)
        ).execute()

    def post_directdebits_id_decisions_decision_id_submissions(self,
                                                               id,
                                                               decision_id,
                                                               direct_debit_decision_submission_creation_request=None):
        """Does a POST request to /transaction/directdebits/{id}/decisions/{decisionId}/submissions.

        Create direct debit decision submission

        Args:
            id (uuid|str): Direct Debit Id
            decision_id (uuid|str): Direct Debit decision id
            direct_debit_decision_submission_creation_request
                (DirectDebitDecisionSubmissionCreation, optional): TODO: type
                description here.

        Returns:
            DirectDebitDecisionSubmissionCreationResponse: Response from the
                API. Direct Debit decision submission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/decisions/{decisionId}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('decisionId')
                            .value(decision_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(direct_debit_decision_submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitDecisionSubmissionCreationResponse.from_dictionary)
            .local_error('400', 'Direct Debit decision submission creation error', ApiErrorException)
            .local_error('409', 'Direct Debit decision submission creation conflict error', ApiErrorException)
        ).execute()

    def get_directdebits_id_decisions_decision_id_submissions_submission_id(self,
                                                                            id,
                                                                            decision_id,
                                                                            submission_id):
        """Does a GET request to /transaction/directdebits/{id}/decisions/{decisionId}/submissions/{submissionId}.

        Get direct debit decision submission

        Args:
            id (uuid|str): Direct Debit Id
            decision_id (uuid|str): Direct Debit decision id
            submission_id (uuid|str): Direct Debit decision submission id

        Returns:
            DirectDebitDecisionSubmissionDetailsResponse: Response from the
                API. Direct debit decision details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/decisions/{decisionId}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('decisionId')
                            .value(decision_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitDecisionSubmissionDetailsResponse.from_dictionary)
        ).execute()

    def post_directdebits_id_recalls(self,
                                     id,
                                     recall_creation_request=None):
        """Does a POST request to /transaction/directdebits/{id}/recalls.

        Create recall

        Args:
            id (uuid|str): Direct Debit Id
            recall_creation_request (DirectDebitRecallCreation, optional):
                TODO: type description here.

        Returns:
            DirectDebitRecallCreationResponse: Response from the API. Recall
                creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/recalls')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(recall_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitRecallCreationResponse.from_dictionary)
            .local_error('400', 'Recall creation error', ApiErrorException)
        ).execute()

    def get_directdebits_id_recalls_recall_id(self,
                                              id,
                                              recall_id):
        """Does a GET request to /transaction/directdebits/{id}/recalls/{recallId}.

        Fetch recall

        Args:
            id (uuid|str): Direct Debit Id
            recall_id (uuid|str): Recall Id

        Returns:
            DirectDebitRecallDetailsResponse: Response from the API. Recall
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/recalls/{recallId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('recallId')
                            .value(recall_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitRecallDetailsResponse.from_dictionary)
        ).execute()

    def get_directdebits_id_recalls_recall_id_admissions_admission_id(self,
                                                                      id,
                                                                      recall_id,
                                                                      admission_id):
        """Does a GET request to /transaction/directdebits/{id}/recalls/{recallId}/admissions/{admissionId}.

        Fetch recall admission

        Args:
            id (uuid|str): Direct Debit Id
            recall_id (uuid|str): Recall Id
            admission_id (uuid|str): Direct Debit Admission Id

        Returns:
            DirectDebitRecallAdmissionDetailsResponse: Response from the API.
                Recall admission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/recalls/{recallId}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('recallId')
                            .value(recall_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitRecallAdmissionDetailsResponse.from_dictionary)
        ).execute()

    def get_directdebits_id_recalls_recall_id_submissions_submission_id(self,
                                                                        id,
                                                                        recall_id,
                                                                        submission_id):
        """Does a GET request to /transaction/directdebits/{id}/recalls/{recallId}/submissions/{submissionId}.

        Fetch recall submission

        Args:
            id (uuid|str): Direct Debit Id
            recall_id (uuid|str): Recall Id
            submission_id (uuid|str): Direct Debit decision submission id

        Returns:
            DirectDebitRecallSubmissionDetailsResponse: Response from the API.
                Recall submission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/recalls/{recallId}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('recallId')
                            .value(recall_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitRecallSubmissionDetailsResponse.from_dictionary)
        ).execute()

    def post_directdebits_id_returns(self,
                                     id,
                                     return_creation_request=None):
        """Does a POST request to /transaction/directdebits/{id}/returns.

        Create direct debit return

        Args:
            id (uuid|str): Direct Debit Id
            return_creation_request (DirectDebitReturnCreation, optional):
                TODO: type description here.

        Returns:
            DirectDebitReturnCreationResponse: Response from the API. Return
                creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/returns')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(return_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitReturnCreationResponse.from_dictionary)
            .local_error('400', 'Return creation error', ApiErrorException)
        ).execute()

    def get_directdebits_id_returns_return_id(self,
                                              id,
                                              return_id):
        """Does a GET request to /transaction/directdebits/{id}/returns/{returnId}.

        Fetch direct debit return

        Args:
            id (uuid|str): Direct Debit Id
            return_id (uuid|str): Return Id

        Returns:
            DirectDebitReturnDetailsResponse: Response from the API. Return
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/returns/{returnId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitReturnDetailsResponse.from_dictionary)
        ).execute()

    def get_directdebits_id_returns_return_id_admissions_admission_id(self,
                                                                      id,
                                                                      return_id,
                                                                      admission_id):
        """Does a GET request to /transaction/directdebits/{id}/returns/{returnId}/admissions/{admissionId}.

        Fetch return admission

        Args:
            id (uuid|str): Direct Debit Id
            return_id (uuid|str): Return Id
            admission_id (uuid|str): Direct Debit Admission Id

        Returns:
            DirectDebitReturnAdmissionDetailsResponse: Response from the API.
                Reversal admission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/returns/{returnId}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitReturnAdmissionDetailsResponse.from_dictionary)
        ).execute()

    def get_directdebits_id_returns_return_id_reversals_reversal_id(self,
                                                                    id,
                                                                    return_id,
                                                                    reversal_id):
        """Does a GET request to /transaction/directdebits/{id}/returns/{returnId}/reversals/{reversalId}.

        Fetch return admission

        Args:
            id (uuid|str): Direct Debit Id
            return_id (uuid|str): Return Id
            reversal_id (uuid|str): Reversal Id

        Returns:
            DirectDebitReturnReversalDetailsResponse: Response from the API.
                Reversal reversal details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/returns/{returnId}/reversals/{reversalId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitReturnReversalDetailsResponse.from_dictionary)
        ).execute()

    def get_directdebits_id_returns_return_id_reversals_reversal_id_admissions_admission_id(self,
                                                                                            id,
                                                                                            return_id,
                                                                                            reversal_id,
                                                                                            admission_id):
        """Does a GET request to /transaction/directdebits/{id}/returns/{returnId}/reversals/{reversalId}/admissions/{admissionId}.

        Fetch return admission

        Args:
            id (uuid|str): Direct Debit Id
            return_id (uuid|str): Return Id
            reversal_id (uuid|str): Reversal Id
            admission_id (uuid|str): Direct Debit Admission Id

        Returns:
            DirectDebitReturnReversalAdmissionDetailsResponse: Response from
                the API. Reversal admission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/returns/{returnId}/reversals/{reversalId}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitReturnReversalAdmissionDetailsResponse.from_dictionary)
        ).execute()

    def post_directdebits_id_returns_return_id_submissions(self,
                                                           id,
                                                           return_id,
                                                           return_submission_creation_request=None):
        """Does a POST request to /transaction/directdebits/{id}/returns/{returnId}/submissions.

        create direct debit return submission

        Args:
            id (uuid|str): Direct Debit Id
            return_id (uuid|str): Return Id
            return_submission_creation_request
                (DirectDebitReturnSubmissionCreation, optional): TODO: type
                description here.

        Returns:
            DirectDebitReturnSubmissionCreationResponse: Response from the
                API. Return submission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/returns/{returnId}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(return_submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitReturnSubmissionCreationResponse.from_dictionary)
            .local_error('400', 'Return submission creation error', ApiErrorException)
        ).execute()

    def get_directdebits_id_returns_return_id_submissions_submission_id(self,
                                                                        id,
                                                                        return_id,
                                                                        submission_id):
        """Does a GET request to /transaction/directdebits/{id}/returns/{returnId}/submissions/{submissionId}.

        Fetch return submission

        Args:
            id (uuid|str): Direct Debit Id
            return_id (uuid|str): Return Id
            submission_id (uuid|str): Direct Debit decision submission id

        Returns:
            DirectDebitReturnSubmissionDetailsResponse: Response from the API.
                Return submission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/returns/{returnId}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitReturnSubmissionDetailsResponse.from_dictionary)
        ).execute()

    def post_directdebits_id_reversals(self,
                                       id,
                                       reversal_creation_request=None):
        """Does a POST request to /transaction/directdebits/{id}/reversals.

        Create direct debit reversal

        Args:
            id (uuid|str): Direct Debit Id
            reversal_creation_request (DirectDebitReversalCreation, optional):
                TODO: type description here.

        Returns:
            DirectDebitReversalCreationResponse: Response from the API.
                Reversal creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/reversals')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(reversal_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitReversalCreationResponse.from_dictionary)
            .local_error('400', 'Reversal creation error', ApiErrorException)
        ).execute()

    def get_directdebits_id_reversals_reversal_id(self,
                                                  id,
                                                  reversal_id):
        """Does a GET request to /transaction/directdebits/{id}/reversals/{reversalId}.

        Fetch direct debit reversal

        Args:
            id (uuid|str): Direct Debit Id
            reversal_id (uuid|str): Reversal Id

        Returns:
            DirectDebitReversalDetailsResponse: Response from the API.
                Reversal details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/reversals/{reversalId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitReversalDetailsResponse.from_dictionary)
        ).execute()

    def get_directdebits_id_reversals_reversal_id_admissions_admission_id(self,
                                                                          id,
                                                                          reversal_id,
                                                                          admission_id):
        """Does a GET request to /transaction/directdebits/{id}/reversals/{reversalId}/admissions/{admissionId}.

        Fetch reversal admission

        Args:
            id (uuid|str): Direct Debit Id
            reversal_id (uuid|str): Reversal Id
            admission_id (uuid|str): Direct Debit Admission Id

        Returns:
            DirectDebitReversalAdmissionDetailsResponse: Response from the
                API. Reversal admission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/reversals/{reversalId}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitReversalAdmissionDetailsResponse.from_dictionary)
        ).execute()

    def post_directdebits_id_reversals_reversal_id_submissions(self,
                                                               id,
                                                               reversal_id,
                                                               reversal_submission_creation_request=None):
        """Does a POST request to /transaction/directdebits/{id}/reversals/{reversalId}/submissions.

        create reversal submission

        Args:
            id (uuid|str): Direct Debit Id
            reversal_id (uuid|str): Reversal Id
            reversal_submission_creation_request
                (DirectDebitReversalSubmissionCreation, optional): TODO: type
                description here.

        Returns:
            DirectDebitReversalSubmissionCreationResponse: Response from the
                API. Reversal submission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/reversals/{reversalId}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(reversal_submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitReversalSubmissionCreationResponse.from_dictionary)
            .local_error('400', 'Reversal submission creation error', ApiErrorException)
        ).execute()

    def get_directdebits_id_reversals_reversal_id_submissions_submission_id(self,
                                                                            id,
                                                                            reversal_id,
                                                                            submission_id):
        """Does a GET request to /transaction/directdebits/{id}/reversals/{reversalId}/submissions/{submissionId}.

        Fetch reversal submission

        Args:
            id (uuid|str): Direct Debit Id
            reversal_id (uuid|str): Reversal Id
            submission_id (uuid|str): Direct Debit decision submission id

        Returns:
            DirectDebitReversalSubmissionDetailsResponse: Response from the
                API. Reversal submission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/reversals/{reversalId}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitReversalSubmissionDetailsResponse.from_dictionary)
        ).execute()

    def post_directdebits_id_submissions(self,
                                         id,
                                         direct_debit_submission_creation_request=None):
        """Does a POST request to /transaction/directdebits/{id}/submissions.

        Create direct debit submission

        Args:
            id (uuid|str): Direct Debit Id
            direct_debit_submission_creation_request
                (DirectDebitSubmissionCreation, optional): TODO: type
                description here.

        Returns:
            DirectDebitSubmissionCreationResponse: Response from the API.
                Direct debit submission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(direct_debit_submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitSubmissionCreationResponse.from_dictionary)
            .local_error('400', 'Return submission creation error', ApiErrorException)
        ).execute()

    def get_directdebits_id_submissions_submission_id(self,
                                                      id,
                                                      submission_id):
        """Does a GET request to /transaction/directdebits/{id}/submissions/{submissionId}.

        Get direct debit submission

        Args:
            id (uuid|str): Direct Debit Id
            submission_id (uuid|str): Direct Debit decision submission id

        Returns:
            DirectDebitSubmissionDetailsResponse: Response from the API.
                Direct debit submission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/directdebits/{id}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DirectDebitSubmissionDetailsResponse.from_dictionary)
        ).execute()
