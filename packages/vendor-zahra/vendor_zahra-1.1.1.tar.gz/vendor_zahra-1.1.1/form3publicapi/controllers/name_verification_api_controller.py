# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from form3publicapi.api_helper import APIHelper
from form3publicapi.configuration import Server
from form3publicapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from form3publicapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from form3publicapi.models.name_verification_details_list_response import NameVerificationDetailsListResponse
from form3publicapi.models.name_verification_creation_response import NameVerificationCreationResponse
from form3publicapi.models.name_verification_details_response import NameVerificationDetailsResponse
from form3publicapi.models.name_verification_admission_details_response import NameVerificationAdmissionDetailsResponse
from form3publicapi.exceptions.api_error_exception import ApiErrorException


class NameVerificationAPIController(BaseController):

    """A Controller to access Endpoints in the form3publicapi API."""
    def __init__(self, config):
        super(NameVerificationAPIController, self).__init__(config)

    def list_name_verifications(self,
                                page_number=None,
                                page_size=None,
                                filter_organisation_id=None,
                                filter_account_classification=None,
                                filter_account_number=None,
                                filter_bank_id=None,
                                filter_bank_id_code=None,
                                filter_name=None,
                                filter_secondary_identification=None,
                                filter_created_date_from=None,
                                filter_created_date_to=None,
                                filter_modified_date_from=None,
                                filter_modified_date_to=None,
                                filter_admission_created_date_from=None,
                                filter_admission_created_date_to=None,
                                filter_admission_modified_date_from=None,
                                filter_admission_modified_date_to=None,
                                filter_admission_status=None,
                                filter_admission_answer=None,
                                filter_admission_actual_name=None,
                                filter_admission_reason=None,
                                filter_admission_reason_code=None,
                                filter_submission_created_date_from=None,
                                filter_submission_created_date_to=None,
                                filter_submission_modified_date_from=None,
                                filter_submission_modified_date_to=None,
                                filter_submission_status=None,
                                filter_submission_answer=None,
                                filter_submission_actual_name=None,
                                filter_submission_reason=None,
                                filter_submission_reason_code=None):
        """Does a GET request to /organisation/nameverifications.

        List name verifications

        Args:
            page_number (int, optional): Which page to select
            page_size (int, optional): Number of items to select
            filter_organisation_id (uuid|str, optional): Filter by
                organisation id
            filter_account_classification (str, optional): Filter by account
                classification
            filter_account_number (str, optional): Filter by account number
            filter_bank_id (str, optional): Filter by bank id
            filter_bank_id_code (str, optional): Filter by bank id code
            filter_name (List[str], optional): Filter by name
            filter_secondary_identification (str, optional): Filter by
                secondary identification
            filter_created_date_from (datetime, optional): Filter by created
                date from
            filter_created_date_to (datetime, optional): Filter by created
                date to
            filter_modified_date_from (datetime, optional): Filter by modified
                date from
            filter_modified_date_to (datetime, optional): Filter by modified
                date to
            filter_admission_created_date_from (datetime, optional): Filter by
                admission created date from
            filter_admission_created_date_to (datetime, optional): Filter by
                admission created date to
            filter_admission_modified_date_from (datetime, optional): Filter
                by admission modified date from
            filter_admission_modified_date_to (datetime, optional): Filter by
                admission modified date to
            filter_admission_status (str, optional): Filter by admission
                status
            filter_admission_answer (str, optional): Filter by admission
                answer
            filter_admission_actual_name (str, optional): Filter by admission
                actual name
            filter_admission_reason (str, optional): Filter by admission
                reason
            filter_admission_reason_code (str, optional): Filter by admission
                reason code
            filter_submission_created_date_from (datetime, optional): Filter
                by submission created date from
            filter_submission_created_date_to (datetime, optional): Filter by
                submission created date to
            filter_submission_modified_date_from (datetime, optional): Filter
                by submission modified date from
            filter_submission_modified_date_to (datetime, optional): Filter by
                submission modified date to
            filter_submission_status (str, optional): Filter by submission
                status
            filter_submission_answer (str, optional): Filter by submission
                answer
            filter_submission_actual_name (str, optional): Filter by
                submission actual name
            filter_submission_reason (str, optional): Filter by submission
                reason
            filter_submission_reason_code (str, optional): Filter by
                submission reason code

        Returns:
            NameVerificationDetailsListResponse: Response from the API. List
                of name verification details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/nameverifications')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page[number]')
                         .value(page_number))
            .query_param(Parameter()
                         .key('page[size]')
                         .value(page_size))
            .query_param(Parameter()
                         .key('filter[organisation_id]')
                         .value(filter_organisation_id))
            .query_param(Parameter()
                         .key('filter[account_classification]')
                         .value(filter_account_classification))
            .query_param(Parameter()
                         .key('filter[account_number]')
                         .value(filter_account_number))
            .query_param(Parameter()
                         .key('filter[bank_id]')
                         .value(filter_bank_id))
            .query_param(Parameter()
                         .key('filter[bank_id_code]')
                         .value(filter_bank_id_code))
            .query_param(Parameter()
                         .key('filter[name]')
                         .value(filter_name))
            .query_param(Parameter()
                         .key('filter[secondary_identification]')
                         .value(filter_secondary_identification))
            .query_param(Parameter()
                         .key('filter[created_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_created_date_from)))
            .query_param(Parameter()
                         .key('filter[created_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_created_date_to)))
            .query_param(Parameter()
                         .key('filter[modified_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_modified_date_from)))
            .query_param(Parameter()
                         .key('filter[modified_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_modified_date_to)))
            .query_param(Parameter()
                         .key('filter[admission.created_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_admission_created_date_from)))
            .query_param(Parameter()
                         .key('filter[admission.created_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_admission_created_date_to)))
            .query_param(Parameter()
                         .key('filter[admission.modified_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_admission_modified_date_from)))
            .query_param(Parameter()
                         .key('filter[admission.modified_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_admission_modified_date_to)))
            .query_param(Parameter()
                         .key('filter[admission.status]')
                         .value(filter_admission_status))
            .query_param(Parameter()
                         .key('filter[admission.answer]')
                         .value(filter_admission_answer))
            .query_param(Parameter()
                         .key('filter[admission.actual_name]')
                         .value(filter_admission_actual_name))
            .query_param(Parameter()
                         .key('filter[admission.reason]')
                         .value(filter_admission_reason))
            .query_param(Parameter()
                         .key('filter[admission.reason_code]')
                         .value(filter_admission_reason_code))
            .query_param(Parameter()
                         .key('filter[submission.created_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_submission_created_date_from)))
            .query_param(Parameter()
                         .key('filter[submission.created_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_submission_created_date_to)))
            .query_param(Parameter()
                         .key('filter[submission.modified_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_submission_modified_date_from)))
            .query_param(Parameter()
                         .key('filter[submission.modified_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_submission_modified_date_to)))
            .query_param(Parameter()
                         .key('filter[submission.status]')
                         .value(filter_submission_status))
            .query_param(Parameter()
                         .key('filter[submission.answer]')
                         .value(filter_submission_answer))
            .query_param(Parameter()
                         .key('filter[submission.actual_name]')
                         .value(filter_submission_actual_name))
            .query_param(Parameter()
                         .key('filter[submission.reason]')
                         .value(filter_submission_reason))
            .query_param(Parameter()
                         .key('filter[submission.reason_code]')
                         .value(filter_submission_reason_code))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(NameVerificationDetailsListResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('404', 'Not Found', ApiErrorException)
            .local_error('500', 'Internal Server Error', ApiErrorException)
        ).execute()

    def name_verification_creation_request(self,
                                           name_verification_creation_request=None):
        """Does a POST request to /organisation/nameverifications.

        Name verification creation request

        Args:
            name_verification_creation_request (NameVerificationCreation,
                optional): TODO: type description here.

        Returns:
            NameVerificationCreationResponse: Response from the API. created

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/nameverifications')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(name_verification_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(NameVerificationCreationResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('409', 'Conflict', ApiErrorException)
            .local_error('500', 'Internal Server Error', ApiErrorException)
        ).execute()

    def fetch_name_verification_resource(self,
                                         id):
        """Does a GET request to /organisation/nameverifications/{id}.

        Fetch name verification resource

        Args:
            id (uuid|str): Name Verification ID

        Returns:
            NameVerificationDetailsResponse: Response from the API. Name
                verification details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/nameverifications/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(NameVerificationDetailsResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('404', 'Not Found', ApiErrorException)
            .local_error('500', 'Internal Server Error', ApiErrorException)
        ).execute()

    def name_verification_admission_fetch_request(self,
                                                  name_verification_id,
                                                  id):
        """Does a GET request to /organisation/nameverifications/{name_verification_id}/admissions/{id}.

        Name verification admission fetch request

        Args:
            name_verification_id (uuid|str): TODO: type description here.
            id (uuid|str): TODO: type description here.

        Returns:
            NameVerificationAdmissionDetailsResponse: Response from the API.
                Name verification admission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/nameverifications/{name_verification_id}/admissions/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name_verification_id')
                            .value(name_verification_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(NameVerificationAdmissionDetailsResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('404', 'Not Found', ApiErrorException)
            .local_error('500', 'Internal Server Error', ApiErrorException)
        ).execute()
