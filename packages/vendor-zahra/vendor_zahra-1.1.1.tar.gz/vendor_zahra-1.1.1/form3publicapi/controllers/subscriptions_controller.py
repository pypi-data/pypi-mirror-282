# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from form3publicapi.api_helper import APIHelper
from form3publicapi.configuration import Server
from form3publicapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from form3publicapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from form3publicapi.models.subscription_details_list_response import SubscriptionDetailsListResponse
from form3publicapi.models.subscription_creation_response import SubscriptionCreationResponse
from form3publicapi.models.subscription_details_response import SubscriptionDetailsResponse
from form3publicapi.exceptions.api_error_exception import ApiErrorException


class SubscriptionsController(BaseController):

    """A Controller to access Endpoints in the form3publicapi API."""
    def __init__(self, config):
        super(SubscriptionsController, self).__init__(config)

    def list_subscriptions(self,
                           page_number=None,
                           page_size=None,
                           filter_event_type=None,
                           filter_record_type=None,
                           filter_organisation_id=None,
                           filter_deactivated=None,
                           filter_callback_transport=None,
                           filter_callback_uri_search_term=None,
                           filter_notification_filter=None):
        """Does a GET request to /notification/subscriptions.

        List all subscriptions

        Args:
            page_number (str, optional): Which page to select
            page_size (int, optional): Number of items to select
            filter_event_type (List[str], optional): Filter by event type
            filter_record_type (List[str], optional): Filter by record type
            filter_organisation_id (List[uuid|str], optional): Filter by
                organisation id
            filter_deactivated (bool, optional): Filter by deactivated
            filter_callback_transport (str, optional): Filter by
                callback_transport
            filter_callback_uri_search_term (str, optional): Filter on
                callback_uri containing a search term
            filter_notification_filter (bool, optional): Filter by existence
                of notification filters

        Returns:
            SubscriptionDetailsListResponse: Response from the API. List of
                subscription details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notification/subscriptions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page[number]')
                         .value(page_number))
            .query_param(Parameter()
                         .key('page[size]')
                         .value(page_size))
            .query_param(Parameter()
                         .key('filter[event_type]')
                         .value(filter_event_type))
            .query_param(Parameter()
                         .key('filter[record_type]')
                         .value(filter_record_type))
            .query_param(Parameter()
                         .key('filter[organisation_id]')
                         .value(filter_organisation_id))
            .query_param(Parameter()
                         .key('filter[deactivated]')
                         .value(filter_deactivated))
            .query_param(Parameter()
                         .key('filter[callback_transport]')
                         .value(filter_callback_transport))
            .query_param(Parameter()
                         .key('filter[callback_uri_search_term]')
                         .value(filter_callback_uri_search_term))
            .query_param(Parameter()
                         .key('filter[notification_filter]')
                         .value(filter_notification_filter))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SubscriptionDetailsListResponse.from_dictionary)
        ).execute()

    def create_subscription(self,
                            subscription_creation_request):
        """Does a POST request to /notification/subscriptions.

        Create subscription

        Args:
            subscription_creation_request (SubscriptionCreation): TODO: type
                description here.

        Returns:
            SubscriptionCreationResponse: Response from the API. Subscription
                creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notification/subscriptions')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(subscription_creation_request))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SubscriptionCreationResponse.from_dictionary)
        ).execute()

    def delete_subscription(self,
                            id,
                            version):
        """Does a DELETE request to /notification/subscriptions/{id}.

        Deletes a subscription

        Args:
            id (uuid|str): Subscription Id
            version (int): Version

        Returns:
            void: Response from the API. Subscription deleted OK. No body
                content will be returned

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notification/subscriptions/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('version')
                         .value(version))
            .auth(Single('OAuth2'))
        ).execute()

    def fetch_subscription(self,
                           id):
        """Does a GET request to /notification/subscriptions/{id}.

        Fetch subscription

        Args:
            id (uuid|str): Subscription Id

        Returns:
            SubscriptionDetailsResponse: Response from the API. Subscription
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notification/subscriptions/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SubscriptionDetailsResponse.from_dictionary)
        ).execute()

    def patch_subscription(self,
                           id,
                           subscription_update_request=None):
        """Does a PATCH request to /notification/subscriptions/{id}.

        Update subscription details

        Args:
            id (uuid|str): Subscription Id
            subscription_update_request (SubscriptionAmendment, optional):
                TODO: type description here.

        Returns:
            SubscriptionDetailsResponse: Response from the API. Subscription
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notification/subscriptions/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(subscription_update_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SubscriptionDetailsResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('404', 'Not Found', ApiErrorException)
            .local_error('409', 'Conflict', ApiErrorException)
            .local_error('500', 'Internal Error', ApiErrorException)
        ).execute()
