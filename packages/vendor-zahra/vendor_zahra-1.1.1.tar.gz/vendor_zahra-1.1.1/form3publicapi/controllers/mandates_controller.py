# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from form3publicapi.api_helper import APIHelper
from form3publicapi.configuration import Server
from form3publicapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from form3publicapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from form3publicapi.models.mandate_details_list_response import MandateDetailsListResponse
from form3publicapi.models.mandate_creation_response import MandateCreationResponse
from form3publicapi.models.mandate_details_response import MandateDetailsResponse
from form3publicapi.models.mandate_admission_details_response import MandateAdmissionDetailsResponse
from form3publicapi.models.mandate_return_creation_response import MandateReturnCreationResponse
from form3publicapi.models.mandate_return_details_response import MandateReturnDetailsResponse
from form3publicapi.models.mandate_return_submission_creation_response import MandateReturnSubmissionCreationResponse
from form3publicapi.models.mandate_return_submission_details_response import MandateReturnSubmissionDetailsResponse
from form3publicapi.models.mandate_submission_details_response import MandateSubmissionDetailsResponse
from form3publicapi.exceptions.api_error_exception import ApiErrorException


class MandatesController(BaseController):

    """A Controller to access Endpoints in the form3publicapi API."""
    def __init__(self, config):
        super(MandatesController, self).__init__(config)

    def get_mandates(self,
                     page_number=None,
                     page_size=None,
                     filter_organisation_id=None,
                     filter_debtor_party_account_number=None,
                     filter_debtor_party_bank_id=None,
                     filter_beneficiary_party_account_number=None,
                     filter_beneficiary_party_bank_id=None,
                     filter_currency=None,
                     filter_payment_scheme=None,
                     filter_scheme_payment_type=None,
                     filter_processing_date_from=None,
                     filter_processing_date_to=None,
                     filter_scheme_processing_date_from=None,
                     filter_scheme_processing_date_to=None,
                     filter_clearing_id=None,
                     filter_admission_admission_date_from=None,
                     filter_admission_admission_date_to=None,
                     filter_admission_status=None,
                     filter_admission_scheme_status_code=None,
                     filter_amount=None,
                     filter_reference=None,
                     filter_unique_scheme_id=None,
                     filter_all_versions=None,
                     filter_submission_submission_date_from=None,
                     filter_submission_submission_date_to=None,
                     filter_status=None,
                     filter_status_reason=None):
        """Does a GET request to /transaction/mandates.

        List mandates

        Args:
            page_number (str, optional): Which page to select
            page_size (int, optional): Number of items to select
            filter_organisation_id (List[uuid|str], optional): Filter by
                organisation id
            filter_debtor_party_account_number (str, optional): TODO: type
                description here.
            filter_debtor_party_bank_id (str, optional): TODO: type
                description here.
            filter_beneficiary_party_account_number (str, optional): TODO:
                type description here.
            filter_beneficiary_party_bank_id (str, optional): TODO: type
                description here.
            filter_currency (str, optional): TODO: type description here.
            filter_payment_scheme (str, optional): TODO: type description
                here.
            filter_scheme_payment_type (str, optional): TODO: type description
                here.
            filter_processing_date_from (date, optional): TODO: type
                description here.
            filter_processing_date_to (date, optional): TODO: type description
                here.
            filter_scheme_processing_date_from (date, optional): TODO: type
                description here.
            filter_scheme_processing_date_to (date, optional): TODO: type
                description here.
            filter_clearing_id (str, optional): TODO: type description here.
            filter_admission_admission_date_from (datetime, optional): TODO:
                type description here.
            filter_admission_admission_date_to (datetime, optional): TODO:
                type description here.
            filter_admission_status (str, optional): Filter by admission
                status
            filter_admission_scheme_status_code (str, optional): Filter by
                admission scheme status code
            filter_amount (str, optional): Filter by amount
            filter_reference (str, optional): Filter by reference
            filter_unique_scheme_id (str, optional): Filter by unique scheme
                id
            filter_all_versions (bool, optional): Include old versions of
                mandates
            filter_submission_submission_date_from (datetime, optional): TODO:
                type description here.
            filter_submission_submission_date_to (datetime, optional): TODO:
                type description here.
            filter_status (str, optional): Filter by mandate status
            filter_status_reason (str, optional): Filter by mandate status
                reason

        Returns:
            MandateDetailsListResponse: Response from the API. List of
                mandates details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/mandates')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page[number]')
                         .value(page_number))
            .query_param(Parameter()
                         .key('page[size]')
                         .value(page_size))
            .query_param(Parameter()
                         .key('filter[organisation_id]')
                         .value(filter_organisation_id))
            .query_param(Parameter()
                         .key('filter[debtor_party.account_number]')
                         .value(filter_debtor_party_account_number))
            .query_param(Parameter()
                         .key('filter[debtor_party.bank_id]')
                         .value(filter_debtor_party_bank_id))
            .query_param(Parameter()
                         .key('filter[beneficiary_party.account_number]')
                         .value(filter_beneficiary_party_account_number))
            .query_param(Parameter()
                         .key('filter[beneficiary_party.bank_id]')
                         .value(filter_beneficiary_party_bank_id))
            .query_param(Parameter()
                         .key('filter[currency]')
                         .value(filter_currency))
            .query_param(Parameter()
                         .key('filter[payment_scheme]')
                         .value(filter_payment_scheme))
            .query_param(Parameter()
                         .key('filter[scheme_payment_type]')
                         .value(filter_scheme_payment_type))
            .query_param(Parameter()
                         .key('filter[processing_date_from]')
                         .value(filter_processing_date_from))
            .query_param(Parameter()
                         .key('filter[processing_date_to]')
                         .value(filter_processing_date_to))
            .query_param(Parameter()
                         .key('filter[scheme_processing_date_from]')
                         .value(filter_scheme_processing_date_from))
            .query_param(Parameter()
                         .key('filter[scheme_processing_date_to]')
                         .value(filter_scheme_processing_date_to))
            .query_param(Parameter()
                         .key('filter[clearing_id]')
                         .value(filter_clearing_id))
            .query_param(Parameter()
                         .key('filter[admission.admission_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_admission_admission_date_from)))
            .query_param(Parameter()
                         .key('filter[admission.admission_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_admission_admission_date_to)))
            .query_param(Parameter()
                         .key('filter[admission.status]')
                         .value(filter_admission_status))
            .query_param(Parameter()
                         .key('filter[admission.scheme_status_code]')
                         .value(filter_admission_scheme_status_code))
            .query_param(Parameter()
                         .key('filter[amount]')
                         .value(filter_amount))
            .query_param(Parameter()
                         .key('filter[reference]')
                         .value(filter_reference))
            .query_param(Parameter()
                         .key('filter[unique_scheme_id]')
                         .value(filter_unique_scheme_id))
            .query_param(Parameter()
                         .key('filter[all_versions]')
                         .value(filter_all_versions))
            .query_param(Parameter()
                         .key('filter[submission.submission_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_submission_submission_date_from)))
            .query_param(Parameter()
                         .key('filter[submission.submission_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_submission_submission_date_to)))
            .query_param(Parameter()
                         .key('filter[status]')
                         .value(filter_status))
            .query_param(Parameter()
                         .key('filter[status_reason]')
                         .value(filter_status_reason))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MandateDetailsListResponse.from_dictionary)
        ).execute()

    def post_mandates(self,
                      mandate_creation_request=None):
        """Does a POST request to /transaction/mandates.

        Create Mandate

        Args:
            mandate_creation_request (MandateCreation, optional): TODO: type
                description here.

        Returns:
            MandateCreationResponse: Response from the API. Mandate creation
                response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/mandates')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(mandate_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MandateCreationResponse.from_dictionary)
            .local_error('400', 'Mandate creation error', ApiErrorException)
            .local_error('409', 'Mandate creation conflict Error', ApiErrorException)
        ).execute()

    def get_mandates_id(self,
                        id):
        """Does a GET request to /transaction/mandates/{id}.

        Fetch mandate

        Args:
            id (uuid|str): Mandate Id

        Returns:
            MandateDetailsResponse: Response from the API. Mandate details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/mandates/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MandateDetailsResponse.from_dictionary)
        ).execute()

    def patch_mandates_id(self,
                          id,
                          mandate_amendment=None):
        """Does a PATCH request to /transaction/mandates/{id}.

        Update mandate

        Args:
            id (uuid|str): Mandate Id
            mandate_amendment (MandateAmendment, optional): TODO: type
                description here.

        Returns:
            MandateDetailsResponse: Response from the API. Mandate details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/mandates/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(mandate_amendment))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MandateDetailsResponse.from_dictionary)
            .local_error('400', 'Mandate update error', ApiErrorException)
        ).execute()

    def get_mandates_id_admissions_admission_id(self,
                                                id,
                                                admission_id):
        """Does a GET request to /transaction/mandates/{id}/admissions/{admissionId}.

        Fetch Mandate Admission

        Args:
            id (uuid|str): Mandate Id
            admission_id (uuid|str): Mandate Admission Id

        Returns:
            MandateAdmissionDetailsResponse: Response from the API. Mandate
                Admission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/mandates/{id}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MandateAdmissionDetailsResponse.from_dictionary)
        ).execute()

    def post_mandates_id_returns(self,
                                 id,
                                 return_creation_request=None):
        """Does a POST request to /transaction/mandates/{id}/returns.

        Create mandate return

        Args:
            id (uuid|str): Mandate Id
            return_creation_request (MandateReturnCreation, optional): TODO:
                type description here.

        Returns:
            MandateReturnCreationResponse: Response from the API. Return
                creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/mandates/{id}/returns')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(return_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MandateReturnCreationResponse.from_dictionary)
            .local_error('400', 'Return creation error', ApiErrorException)
        ).execute()

    def get_mandates_id_returns_return_id(self,
                                          id,
                                          return_id):
        """Does a GET request to /transaction/mandates/{id}/returns/{returnId}.

        Fetch mandate return

        Args:
            id (uuid|str): Mandate Id
            return_id (uuid|str): Return Id

        Returns:
            MandateReturnDetailsResponse: Response from the API. Return
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/mandates/{id}/returns/{returnId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MandateReturnDetailsResponse.from_dictionary)
        ).execute()

    def post_mandates_id_returns_return_id_submissions(self,
                                                       id,
                                                       return_id,
                                                       return_submission_creation_request=None):
        """Does a POST request to /transaction/mandates/{id}/returns/{returnId}/submissions.

        Create mandate return submission

        Args:
            id (uuid|str): Mandate Id
            return_id (uuid|str): Return Id
            return_submission_creation_request
                (MandateReturnSubmissionCreation, optional): TODO: type
                description here.

        Returns:
            MandateReturnSubmissionCreationResponse: Response from the API.
                Return submission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/mandates/{id}/returns/{returnId}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(return_submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MandateReturnSubmissionCreationResponse.from_dictionary)
            .local_error('400', 'Return submission creation error', ApiErrorException)
        ).execute()

    def get_mandates_id_returns_return_id_submissions_submission_id(self,
                                                                    id,
                                                                    return_id,
                                                                    submission_id):
        """Does a GET request to /transaction/mandates/{id}/returns/{returnId}/submissions/{submissionId}.

        Fetch return submission

        Args:
            id (uuid|str): Mandate Id
            return_id (uuid|str): Return Id
            submission_id (uuid|str): Submission Id

        Returns:
            MandateReturnSubmissionDetailsResponse: Response from the API.
                Return submission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/mandates/{id}/returns/{returnId}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MandateReturnSubmissionDetailsResponse.from_dictionary)
        ).execute()

    def post_mandates_id_submissions(self,
                                     id,
                                     mandate_submission_creation_request=None):
        """Does a POST request to /transaction/mandates/{id}/submissions.

        Create Mandate Submission

        Args:
            id (uuid|str): Mandate Id
            mandate_submission_creation_request (MandateSubmissionCreation,
                optional): TODO: type description here.

        Returns:
            MandateSubmissionDetailsResponse: Response from the API. Mandate
                Submission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/mandates/{id}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(mandate_submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MandateSubmissionDetailsResponse.from_dictionary)
            .local_error('400', 'Mandate Submission creation error', ApiErrorException)
        ).execute()

    def get_mandates_id_submissions_submission_id(self,
                                                  id,
                                                  submission_id):
        """Does a GET request to /transaction/mandates/{id}/submissions/{submissionId}.

        Fetch Mandate Submission

        Args:
            id (uuid|str): Mandate Id
            submission_id (uuid|str): Mandate Submission Id

        Returns:
            MandateSubmissionDetailsResponse: Response from the API. Mandate
                Submission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/mandates/{id}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MandateSubmissionDetailsResponse.from_dictionary)
            .local_error('400', 'Error', ApiErrorException)
        ).execute()
