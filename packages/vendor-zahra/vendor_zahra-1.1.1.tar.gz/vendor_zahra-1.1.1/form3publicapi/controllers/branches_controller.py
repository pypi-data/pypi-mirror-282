# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from form3publicapi.api_helper import APIHelper
from form3publicapi.configuration import Server
from form3publicapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from form3publicapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from form3publicapi.models.branch_details_list_response import BranchDetailsListResponse
from form3publicapi.models.branch_creation_response import BranchCreationResponse
from form3publicapi.models.branch_details_response import BranchDetailsResponse
from form3publicapi.exceptions.api_error_exception import ApiErrorException


class BranchesController(BaseController):

    """A Controller to access Endpoints in the form3publicapi API."""
    def __init__(self, config):
        super(BranchesController, self).__init__(config)

    def list_branches(self,
                      page_number=None,
                      page_size=None,
                      filter_organisation_id=None,
                      filter_bank_id=None,
                      filter_bank_id_code=None,
                      filter_acceptance_qualifier=None,
                      filter_validation_type=None,
                      filter_reference_mask=None):
        """Does a GET request to /organisation/branches.

        List branches

        Args:
            page_number (str, optional): Which page to select
            page_size (int, optional): Number of items to select
            filter_organisation_id (List[uuid|str], optional): Filter by
                organisation id
            filter_bank_id (List[str], optional): Filter by bank id e.g. sort
                code or bic
            filter_bank_id_code (List[str], optional): Filter by type of bank
                id e.g. "GBDSC"
            filter_acceptance_qualifier (List[str], optional): Filter by
                acceptance qualifier
            filter_validation_type (List[str], optional): Filter by validation
                type e.g. card
            filter_reference_mask (List[str], optional): Filter by reference
                mask

        Returns:
            BranchDetailsListResponse: Response from the API. List of branch
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/branches')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page[number]')
                         .value(page_number))
            .query_param(Parameter()
                         .key('page[size]')
                         .value(page_size))
            .query_param(Parameter()
                         .key('filter[organisation_id]')
                         .value(filter_organisation_id))
            .query_param(Parameter()
                         .key('filter[bank_id]')
                         .value(filter_bank_id))
            .query_param(Parameter()
                         .key('filter[bank_id_code]')
                         .value(filter_bank_id_code))
            .query_param(Parameter()
                         .key('filter[acceptance_qualifier]')
                         .value(filter_acceptance_qualifier))
            .query_param(Parameter()
                         .key('filter[validation_type]')
                         .value(filter_validation_type))
            .query_param(Parameter()
                         .key('filter[reference_mask]')
                         .value(filter_reference_mask))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BranchDetailsListResponse.from_dictionary)
        ).execute()

    def create_a_branch(self,
                        branch_creation_request=None):
        """Does a POST request to /organisation/branches.

        Create a Branch

        Args:
            branch_creation_request (BranchCreation, optional): TODO: type
                description here.

        Returns:
            BranchCreationResponse: Response from the API. Branch creation
                response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/branches')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(branch_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BranchCreationResponse.from_dictionary)
            .local_error('409', 'Branch creation error, constraint violation of organisation id and bank id', ApiErrorException)
        ).execute()

    def delete_branch(self,
                      id,
                      version):
        """Does a DELETE request to /organisation/branches/{id}.

        Delete branch

        Args:
            id (uuid|str): Branch Id
            version (int): Version

        Returns:
            void: Response from the API. Branch deleted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/branches/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('version')
                         .value(version))
            .auth(Single('OAuth2'))
        ).execute()

    def fetch_branch(self,
                     id):
        """Does a GET request to /organisation/branches/{id}.

        Fetch branch

        Args:
            id (uuid|str): Branch Id

        Returns:
            BranchDetailsResponse: Response from the API. Branch details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/branches/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BranchDetailsResponse.from_dictionary)
        ).execute()

    def amend_branch(self,
                     id,
                     branch_amend_request=None):
        """Does a PATCH request to /organisation/branches/{id}.

        Amend branch

        Args:
            id (uuid|str): Branches Id
            branch_amend_request (BranchAmendment, optional): TODO: type
                description here.

        Returns:
            BranchDetailsResponse: Response from the API. Branch updated

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/branches/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(branch_amend_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BranchDetailsResponse.from_dictionary)
        ).execute()
