# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from form3publicapi.api_helper import APIHelper
from form3publicapi.configuration import Server
from form3publicapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from form3publicapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from form3publicapi.models.account_identification_list_response import AccountIdentificationListResponse
from form3publicapi.models.account_identification_response import AccountIdentificationResponse
from form3publicapi.exceptions.api_error_exception import ApiErrorException
from form3publicapi.exceptions.api_exception import APIException


class AccountIdentificationController(BaseController):

    """A Controller to access Endpoints in the form3publicapi API."""
    def __init__(self, config):
        super(AccountIdentificationController, self).__init__(config)

    def list_account_identifications_by_account(self,
                                                account_id,
                                                page_number=None,
                                                page_size=None,
                                                filter_organisation_id=None,
                                                filter_secondary_identification=None):
        """Does a GET request to /organisation/accounts/{account_id}/identifications.

        List Account Identifications by Account

        Args:
            account_id (uuid|str): Account Id to which this identification
                relates to
            page_number (str, optional): Which page to select
            page_size (int, optional): Number of items to select
            filter_organisation_id (List[uuid|str], optional): Filter by
                organisation id
            filter_secondary_identification (List[str], optional): Filter to
                only include account identifications with specified
                secondary_identification

        Returns:
            AccountIdentificationListResponse: Response from the API. List of
                account identification

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/accounts/{account_id}/identifications')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account_id')
                            .value(account_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('page[number]')
                         .value(page_number))
            .query_param(Parameter()
                         .key('page[size]')
                         .value(page_size))
            .query_param(Parameter()
                         .key('filter[organisation_id]')
                         .value(filter_organisation_id))
            .query_param(Parameter()
                         .key('filter[secondary_identification]')
                         .value(filter_secondary_identification))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AccountIdentificationListResponse.from_dictionary)
        ).execute()

    def create_an_identification_for_an_existing_account(self,
                                                         account_id,
                                                         account_identification_creation_request=None):
        """Does a POST request to /organisation/accounts/{account_id}/identifications.

        Create an identification for an existing Account

        Args:
            account_id (uuid|str): Account Id to which this identification
                relates to
            account_identification_creation_request
                (AccountIdentificationRequest, optional): TODO: type
                description here.

        Returns:
            AccountIdentificationResponse: Response from the API. Account
                Identification creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/accounts/{account_id}/identifications')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account_id')
                            .value(account_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(account_identification_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AccountIdentificationResponse.from_dictionary)
            .local_error('409', 'Account Identification creation error, constraint violation of secondary identification', ApiErrorException)
        ).execute()

    def delete_account_identification(self,
                                      account_id,
                                      identification_id,
                                      version):
        """Does a DELETE request to /organisation/accounts/{account_id}/identifications/{identification_id}.

        Delete account identification

        Args:
            account_id (uuid|str): Account Id
            identification_id (uuid|str): Account Identification Id
            version (int): Version

        Returns:
            void: Response from the API. Account Identification deleted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/accounts/{account_id}/identifications/{identification_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('account_id')
                            .value(account_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('identification_id')
                            .value(identification_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('version')
                         .value(version))
            .auth(Single('OAuth2'))
        ).execute()

    def get_an_account_identification_by_id(self,
                                            account_id,
                                            identification_id):
        """Does a GET request to /organisation/accounts/{account_id}/identifications/{identification_id}.

        Get an account identification by id

        Args:
            account_id (uuid|str): Account Id
            identification_id (uuid|str): Account Identification Id

        Returns:
            AccountIdentificationResponse: Response from the API. Account
                Identification response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/accounts/{account_id}/identifications/{identification_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account_id')
                            .value(account_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('identification_id')
                            .value(identification_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AccountIdentificationResponse.from_dictionary)
        ).execute()

    def amend_account_identification(self,
                                     account_id,
                                     identification_id,
                                     account_identification_amend_request=None):
        """Does a PATCH request to /organisation/accounts/{account_id}/identifications/{identification_id}.

        Amend Account Identification

        Args:
            account_id (uuid|str): Account Id
            identification_id (uuid|str): Account Identification Id; Must
                match id in the payload
            account_identification_amend_request
                (AccountIdentificationRequest, optional): TODO: type
                description here.

        Returns:
            AccountIdentificationResponse: Response from the API. Account
                Identification updated

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/accounts/{account_id}/identifications/{identification_id}')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('account_id')
                            .value(account_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('identification_id')
                            .value(identification_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(account_identification_amend_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AccountIdentificationResponse.from_dictionary)
            .local_error('409', 'Account Identification update error, constraint violation of secondary identification', ApiErrorException)
        ).execute()
