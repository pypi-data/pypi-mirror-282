# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from form3publicapi.api_helper import APIHelper
from form3publicapi.configuration import Server
from form3publicapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from form3publicapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from form3publicapi.models.scheme_message_details_list_response import SchemeMessageDetailsListResponse
from form3publicapi.models.scheme_message_details_response import SchemeMessageDetailsResponse
from form3publicapi.models.scheme_message_admission_details_response import SchemeMessageAdmissionDetailsResponse
from form3publicapi.exceptions.api_error_exception import ApiErrorException


class SchemeMessagesController(BaseController):

    """A Controller to access Endpoints in the form3publicapi API."""
    def __init__(self, config):
        super(SchemeMessagesController, self).__init__(config)

    def list_messages(self,
                      page_number=None,
                      page_size=100,
                      filter_unique_scheme_id=None,
                      filter_scheme_message_type=None,
                      filter_payment_scheme=None,
                      filter_admission_admission_date_from=None,
                      filter_admission_admission_date_to=None):
        """Does a GET request to /notification/schememessages.

        List messages

        Args:
            page_number (str, optional): Which page to select
            page_size (int, optional): Number of items to select
            filter_unique_scheme_id (str, optional): Filter by Unique
                SchemeId
            filter_scheme_message_type (str, optional): Filter by Scheme
                Message Type
            filter_payment_scheme (str, optional): Filter by Payment Scheme
            filter_admission_admission_date_from (datetime, optional): Filter
                by Admission DateTime
            filter_admission_admission_date_to (datetime, optional): Filter by
                Admission DateTime

        Returns:
            SchemeMessageDetailsListResponse: Response from the API. List of
                scheme messages

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notification/schememessages')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page[number]')
                         .value(page_number))
            .query_param(Parameter()
                         .key('page[size]')
                         .value(page_size))
            .query_param(Parameter()
                         .key('filter[unique_scheme_id]')
                         .value(filter_unique_scheme_id))
            .query_param(Parameter()
                         .key('filter[scheme_message_type]')
                         .value(filter_scheme_message_type))
            .query_param(Parameter()
                         .key('filter[payment_scheme]')
                         .value(filter_payment_scheme))
            .query_param(Parameter()
                         .key('filter[admission.admission_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_admission_admission_date_from)))
            .query_param(Parameter()
                         .key('filter[admission.admission_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_admission_admission_date_to)))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SchemeMessageDetailsListResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('401', 'Unauthorized', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
        ).execute()

    def fetch_message(self,
                      id):
        """Does a GET request to /notification/schememessages/{id}.

        Fetch message

        Args:
            id (uuid|str): Scheme Message Id

        Returns:
            SchemeMessageDetailsResponse: Response from the API. Scheme
                Message details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notification/schememessages/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SchemeMessageDetailsResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('401', 'Unauthorized', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('404', 'Scheme Message Not found', ApiErrorException)
        ).execute()

    def get_scheme_message_admission_by_admission_id(self,
                                                     id,
                                                     admission_id):
        """Does a GET request to /notification/schememessages/{id}/admissions/{admissionId}.

        Get Scheme Message Admission By AdmissionId

        Args:
            id (uuid|str): Scheme Message Id
            admission_id (uuid|str): Scheme Message Admission Id

        Returns:
            SchemeMessageAdmissionDetailsResponse: Response from the API. Get
                scheme message admission by Id

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/notification/schememessages/{id}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SchemeMessageAdmissionDetailsResponse.from_dictionary)
            .local_error('400', 'Scheme Message Admission by Id bad request', ApiErrorException)
            .local_error('401', 'Unauthorized', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('404', 'Scheme Message Not found', ApiErrorException)
        ).execute()
