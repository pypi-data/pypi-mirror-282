# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper


class Fx(object):

    """Implementation of the 'Fx' model.

    TODO: type model description here.

    Attributes:
        contract_reference (str): Reference to the foreign exchange contract
            associated with the transaction
        exchange_rate (str): Factor used to convert an amount from the
            instructed currency into the transaction currency: i.e. to convert
            the `fx.original_amount`, expressed in the `fx.original_currency`,
            to `amount` specified in `currency`. Decimal value, represented as
            a string, maximum length 12. Must be > 0.
        original_amount (str): Amount of money to be moved between the debtor
            and creditor, before deduction of charges, expressed in the
            currency as instructed by the initiating party. Decimal value.
            Must be > 0.
        original_currency (str): Currency of `original_amount`. Currency code
            as defined in ISO 4217.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "contract_reference": 'contract_reference',
        "exchange_rate": 'exchange_rate',
        "original_amount": 'original_amount',
        "original_currency": 'original_currency'
    }

    _optionals = [
        'contract_reference',
        'exchange_rate',
        'original_amount',
        'original_currency',
    ]

    def __init__(self,
                 contract_reference=APIHelper.SKIP,
                 exchange_rate=APIHelper.SKIP,
                 original_amount=APIHelper.SKIP,
                 original_currency=APIHelper.SKIP):
        """Constructor for the Fx class"""

        # Initialize members of the class
        if contract_reference is not APIHelper.SKIP:
            self.contract_reference = contract_reference 
        if exchange_rate is not APIHelper.SKIP:
            self.exchange_rate = exchange_rate 
        if original_amount is not APIHelper.SKIP:
            self.original_amount = original_amount 
        if original_currency is not APIHelper.SKIP:
            self.original_currency = original_currency 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        contract_reference = dictionary.get("contract_reference") if dictionary.get("contract_reference") else APIHelper.SKIP
        exchange_rate = dictionary.get("exchange_rate") if dictionary.get("exchange_rate") else APIHelper.SKIP
        original_amount = dictionary.get("original_amount") if dictionary.get("original_amount") else APIHelper.SKIP
        original_currency = dictionary.get("original_currency") if dictionary.get("original_currency") else APIHelper.SKIP
        # Return an object of this model
        return cls(contract_reference,
                   exchange_rate,
                   original_amount,
                   original_currency)
