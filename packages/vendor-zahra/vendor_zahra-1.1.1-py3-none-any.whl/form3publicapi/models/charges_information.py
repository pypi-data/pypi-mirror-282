# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.sender_charge import SenderCharge


class ChargesInformation(object):

    """Implementation of the 'ChargesInformation' model.

    TODO: type model description here.

    Attributes:
        bearer_code (str): Specifies which party/parties will bear the charges
            associated with the processing of the payment transaction. Can be
            one of the following: `DEBT`, `CRED`, `SHAR` or `SLEV`
        receiver_charges_amount (str): Transaction charges due to the receiver
            of the transaction. Requires 1 to 2 decimal places. Must be > 0.
        receiver_charges_currency (str): Currency of
            `receiver_charges_amount`. Currency code as defined in [ISO
            4217](http://www.iso.org/iso/home/standards/currency_codes.htm).
        sender_charges (List[SenderCharge]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bearer_code": 'bearer_code',
        "receiver_charges_amount": 'receiver_charges_amount',
        "receiver_charges_currency": 'receiver_charges_currency',
        "sender_charges": 'sender_charges'
    }

    _optionals = [
        'bearer_code',
        'receiver_charges_amount',
        'receiver_charges_currency',
        'sender_charges',
    ]

    def __init__(self,
                 bearer_code=APIHelper.SKIP,
                 receiver_charges_amount=APIHelper.SKIP,
                 receiver_charges_currency=APIHelper.SKIP,
                 sender_charges=APIHelper.SKIP):
        """Constructor for the ChargesInformation class"""

        # Initialize members of the class
        if bearer_code is not APIHelper.SKIP:
            self.bearer_code = bearer_code 
        if receiver_charges_amount is not APIHelper.SKIP:
            self.receiver_charges_amount = receiver_charges_amount 
        if receiver_charges_currency is not APIHelper.SKIP:
            self.receiver_charges_currency = receiver_charges_currency 
        if sender_charges is not APIHelper.SKIP:
            self.sender_charges = sender_charges 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        bearer_code = dictionary.get("bearer_code") if dictionary.get("bearer_code") else APIHelper.SKIP
        receiver_charges_amount = dictionary.get("receiver_charges_amount") if dictionary.get("receiver_charges_amount") else APIHelper.SKIP
        receiver_charges_currency = dictionary.get("receiver_charges_currency") if dictionary.get("receiver_charges_currency") else APIHelper.SKIP
        sender_charges = None
        if dictionary.get('sender_charges') is not None:
            sender_charges = [SenderCharge.from_dictionary(x) for x in dictionary.get('sender_charges')]
        else:
            sender_charges = APIHelper.SKIP
        # Return an object of this model
        return cls(bearer_code,
                   receiver_charges_amount,
                   receiver_charges_currency,
                   sender_charges)
