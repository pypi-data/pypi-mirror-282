# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.account_attributes_organisation_identification_actor import AccountAttributesOrganisationIdentificationActor


class AccountAttributesOrganisationIdentification(object):

    """Implementation of the 'AccountAttributesOrganisationIdentification' model.

    TODO: type model description here.

    Attributes:
        actors (List[AccountAttributesOrganisationIdentificationActor]): TODO:
            type description here.
        address (List[str]): TODO: type description here.
        city (str): TODO: type description here.
        country (str): TODO: type description here.
        identification (str): TODO: type description here.
        identification_issuer (str): TODO: type description here.
        identification_scheme (str): TODO: type description here.
        identification_scheme_code (str): TODO: type description here.
        registration_number (str): TODO: type description here.
        tax_residency (str): ISO 3166-1 code used to identify the domicile of
            the account

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "actors": 'actors',
        "address": 'address',
        "city": 'city',
        "country": 'country',
        "identification": 'identification',
        "identification_issuer": 'identification_issuer',
        "identification_scheme": 'identification_scheme',
        "identification_scheme_code": 'identification_scheme_code',
        "registration_number": 'registration_number',
        "tax_residency": 'tax_residency'
    }

    _optionals = [
        'actors',
        'address',
        'city',
        'country',
        'identification',
        'identification_issuer',
        'identification_scheme',
        'identification_scheme_code',
        'registration_number',
        'tax_residency',
    ]

    def __init__(self,
                 actors=APIHelper.SKIP,
                 address=APIHelper.SKIP,
                 city=APIHelper.SKIP,
                 country=APIHelper.SKIP,
                 identification=APIHelper.SKIP,
                 identification_issuer=APIHelper.SKIP,
                 identification_scheme=APIHelper.SKIP,
                 identification_scheme_code=APIHelper.SKIP,
                 registration_number=APIHelper.SKIP,
                 tax_residency=APIHelper.SKIP):
        """Constructor for the AccountAttributesOrganisationIdentification class"""

        # Initialize members of the class
        if actors is not APIHelper.SKIP:
            self.actors = actors 
        if address is not APIHelper.SKIP:
            self.address = address 
        if city is not APIHelper.SKIP:
            self.city = city 
        if country is not APIHelper.SKIP:
            self.country = country 
        if identification is not APIHelper.SKIP:
            self.identification = identification 
        if identification_issuer is not APIHelper.SKIP:
            self.identification_issuer = identification_issuer 
        if identification_scheme is not APIHelper.SKIP:
            self.identification_scheme = identification_scheme 
        if identification_scheme_code is not APIHelper.SKIP:
            self.identification_scheme_code = identification_scheme_code 
        if registration_number is not APIHelper.SKIP:
            self.registration_number = registration_number 
        if tax_residency is not APIHelper.SKIP:
            self.tax_residency = tax_residency 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        actors = None
        if dictionary.get('actors') is not None:
            actors = [AccountAttributesOrganisationIdentificationActor.from_dictionary(x) for x in dictionary.get('actors')]
        else:
            actors = APIHelper.SKIP
        address = dictionary.get("address") if dictionary.get("address") else APIHelper.SKIP
        city = dictionary.get("city") if dictionary.get("city") else APIHelper.SKIP
        country = dictionary.get("country") if dictionary.get("country") else APIHelper.SKIP
        identification = dictionary.get("identification") if dictionary.get("identification") else APIHelper.SKIP
        identification_issuer = dictionary.get("identification_issuer") if dictionary.get("identification_issuer") else APIHelper.SKIP
        identification_scheme = dictionary.get("identification_scheme") if dictionary.get("identification_scheme") else APIHelper.SKIP
        identification_scheme_code = dictionary.get("identification_scheme_code") if dictionary.get("identification_scheme_code") else APIHelper.SKIP
        registration_number = dictionary.get("registration_number") if dictionary.get("registration_number") else APIHelper.SKIP
        tax_residency = dictionary.get("tax_residency") if dictionary.get("tax_residency") else APIHelper.SKIP
        # Return an object of this model
        return cls(actors,
                   address,
                   city,
                   country,
                   identification,
                   identification_issuer,
                   identification_scheme,
                   identification_scheme_code,
                   registration_number,
                   tax_residency)
