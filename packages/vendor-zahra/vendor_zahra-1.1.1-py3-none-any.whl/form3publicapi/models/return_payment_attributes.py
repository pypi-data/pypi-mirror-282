# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.agent import Agent
from form3publicapi.models.settlement import Settlement
from form3publicapi.models.user_defined_data import UserDefinedData


class ReturnPaymentAttributes(object):

    """Implementation of the 'ReturnPaymentAttributes' model.

    TODO: type model description here.

    Attributes:
        agents (List[Agent]): Block to represent a Financial Institution/agent
            in the payment chain
        amount (str): The amount to return which should correspond to the
            amount of the original payment
        clearing_id (str): Unique identifier for organisations collecting
            payments
        currency (str): ISO currency code for transaction amount
        limit_breach_end_datetime (datetime): Time a payment was released from
            being held due to a limit breach
        limit_breach_start_datetime (datetime): Start time a payment was held
            due to a limit breach
        reason (str): TODO: type description here.
        return_code (str): The return [reason
            code](http://draft-api-docs.form3.tech/api.html#enumerations-paymen
            t-return-codes)
        scheme_transaction_id (str): A unique reference to the return payment
            instruction. If not supplied, the value is generated by Form3.
        settlement (Settlement): Specifies the details on how the settlement
            of the transaction between the instructing agent and the
            instructed agent is completed
        unique_scheme_id (str): The scheme-specific unique transaction ID.
            Populated by the scheme.
        user_defined_data (List[UserDefinedData]): All purpose list of
            key-value pairs specific data stored on the return.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "agents": 'agents',
        "amount": 'amount',
        "clearing_id": 'clearing_id',
        "currency": 'currency',
        "limit_breach_end_datetime": 'limit_breach_end_datetime',
        "limit_breach_start_datetime": 'limit_breach_start_datetime',
        "reason": 'reason',
        "return_code": 'return_code',
        "scheme_transaction_id": 'scheme_transaction_id',
        "settlement": 'settlement',
        "unique_scheme_id": 'unique_scheme_id',
        "user_defined_data": 'user_defined_data'
    }

    _optionals = [
        'agents',
        'amount',
        'clearing_id',
        'currency',
        'limit_breach_end_datetime',
        'limit_breach_start_datetime',
        'reason',
        'return_code',
        'scheme_transaction_id',
        'settlement',
        'unique_scheme_id',
        'user_defined_data',
    ]

    def __init__(self,
                 agents=APIHelper.SKIP,
                 amount=APIHelper.SKIP,
                 clearing_id=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 limit_breach_end_datetime=APIHelper.SKIP,
                 limit_breach_start_datetime=APIHelper.SKIP,
                 reason=APIHelper.SKIP,
                 return_code=APIHelper.SKIP,
                 scheme_transaction_id=APIHelper.SKIP,
                 settlement=APIHelper.SKIP,
                 unique_scheme_id=APIHelper.SKIP,
                 user_defined_data=APIHelper.SKIP):
        """Constructor for the ReturnPaymentAttributes class"""

        # Initialize members of the class
        if agents is not APIHelper.SKIP:
            self.agents = agents 
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if clearing_id is not APIHelper.SKIP:
            self.clearing_id = clearing_id 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if limit_breach_end_datetime is not APIHelper.SKIP:
            self.limit_breach_end_datetime = APIHelper.apply_datetime_converter(limit_breach_end_datetime, APIHelper.RFC3339DateTime) if limit_breach_end_datetime else None 
        if limit_breach_start_datetime is not APIHelper.SKIP:
            self.limit_breach_start_datetime = APIHelper.apply_datetime_converter(limit_breach_start_datetime, APIHelper.RFC3339DateTime) if limit_breach_start_datetime else None 
        if reason is not APIHelper.SKIP:
            self.reason = reason 
        if return_code is not APIHelper.SKIP:
            self.return_code = return_code 
        if scheme_transaction_id is not APIHelper.SKIP:
            self.scheme_transaction_id = scheme_transaction_id 
        if settlement is not APIHelper.SKIP:
            self.settlement = settlement 
        if unique_scheme_id is not APIHelper.SKIP:
            self.unique_scheme_id = unique_scheme_id 
        if user_defined_data is not APIHelper.SKIP:
            self.user_defined_data = user_defined_data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        agents = None
        if dictionary.get('agents') is not None:
            agents = [Agent.from_dictionary(x) for x in dictionary.get('agents')]
        else:
            agents = APIHelper.SKIP
        amount = dictionary.get("amount") if dictionary.get("amount") else APIHelper.SKIP
        clearing_id = dictionary.get("clearing_id") if dictionary.get("clearing_id") else APIHelper.SKIP
        currency = dictionary.get("currency") if dictionary.get("currency") else APIHelper.SKIP
        limit_breach_end_datetime = APIHelper.RFC3339DateTime.from_value(dictionary.get("limit_breach_end_datetime")).datetime if dictionary.get("limit_breach_end_datetime") else APIHelper.SKIP
        limit_breach_start_datetime = APIHelper.RFC3339DateTime.from_value(dictionary.get("limit_breach_start_datetime")).datetime if dictionary.get("limit_breach_start_datetime") else APIHelper.SKIP
        reason = dictionary.get("reason") if dictionary.get("reason") else APIHelper.SKIP
        return_code = dictionary.get("return_code") if dictionary.get("return_code") else APIHelper.SKIP
        scheme_transaction_id = dictionary.get("scheme_transaction_id") if dictionary.get("scheme_transaction_id") else APIHelper.SKIP
        settlement = Settlement.from_dictionary(dictionary.get('settlement')) if 'settlement' in dictionary.keys() else APIHelper.SKIP
        unique_scheme_id = dictionary.get("unique_scheme_id") if dictionary.get("unique_scheme_id") else APIHelper.SKIP
        user_defined_data = None
        if dictionary.get('user_defined_data') is not None:
            user_defined_data = [UserDefinedData.from_dictionary(x) for x in dictionary.get('user_defined_data')]
        else:
            user_defined_data = APIHelper.SKIP
        # Return an object of this model
        return cls(agents,
                   amount,
                   clearing_id,
                   currency,
                   limit_breach_end_datetime,
                   limit_breach_start_datetime,
                   reason,
                   return_code,
                   scheme_transaction_id,
                   settlement,
                   unique_scheme_id,
                   user_defined_data)
