# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from form3publicapi.api_helper import APIHelper


class PaymentTypeInformation(object):

    """Implementation of the 'PaymentTypeInformation' model.

    Set of elements used to further specify the type of transaction.

    Attributes:
        amount (str): Amount of money to be moved between the debtor and
            creditor, before deduction of charges.
        category_purpose (str): Specifies the high level purpose of the
            instruction based on a set of pre-defined categories.
        currency (str): Currency of the transaction amount. Currency code as
            defined in [ISO
            4217](https://www.iso.org/iso/home/standards/currency_codes.htm)
        payment_purpose (str): Underlying reason for the payment transaction.
            Defined in external code list (4 char) or proprietary code (35
            char)
        processing_date (date): Date on which the amount of money ceases to be
            available to the agent that owes it and when the amount of money
            becomes available to the agent to which it is due.
        remittance_information (str): Unstructured information supplied to
            enable the matching/reconciliation of an entry with the items that
            the payment is intended to settle.
        scheme_payment_sub_type (str): Specifies a local instrument to further
            qualify the level of service.
        scheme_payment_type (str): Specifies a pre-agreed level of service as
            published in an external code list (4 char) or a proprietary code
            (35 char).

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "amount": 'amount',
        "category_purpose": 'category_purpose',
        "currency": 'currency',
        "payment_purpose": 'payment_purpose',
        "processing_date": 'processing_date',
        "remittance_information": 'remittance_information',
        "scheme_payment_sub_type": 'scheme_payment_sub_type',
        "scheme_payment_type": 'scheme_payment_type'
    }

    _optionals = [
        'amount',
        'category_purpose',
        'currency',
        'payment_purpose',
        'processing_date',
        'remittance_information',
        'scheme_payment_sub_type',
        'scheme_payment_type',
    ]

    def __init__(self,
                 amount=APIHelper.SKIP,
                 category_purpose=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 payment_purpose=APIHelper.SKIP,
                 processing_date=APIHelper.SKIP,
                 remittance_information=APIHelper.SKIP,
                 scheme_payment_sub_type=APIHelper.SKIP,
                 scheme_payment_type=APIHelper.SKIP):
        """Constructor for the PaymentTypeInformation class"""

        # Initialize members of the class
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if category_purpose is not APIHelper.SKIP:
            self.category_purpose = category_purpose 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if payment_purpose is not APIHelper.SKIP:
            self.payment_purpose = payment_purpose 
        if processing_date is not APIHelper.SKIP:
            self.processing_date = processing_date 
        if remittance_information is not APIHelper.SKIP:
            self.remittance_information = remittance_information 
        if scheme_payment_sub_type is not APIHelper.SKIP:
            self.scheme_payment_sub_type = scheme_payment_sub_type 
        if scheme_payment_type is not APIHelper.SKIP:
            self.scheme_payment_type = scheme_payment_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        amount = dictionary.get("amount") if dictionary.get("amount") else APIHelper.SKIP
        category_purpose = dictionary.get("category_purpose") if dictionary.get("category_purpose") else APIHelper.SKIP
        currency = dictionary.get("currency") if dictionary.get("currency") else APIHelper.SKIP
        payment_purpose = dictionary.get("payment_purpose") if dictionary.get("payment_purpose") else APIHelper.SKIP
        processing_date = dateutil.parser.parse(dictionary.get('processing_date')).date() if dictionary.get('processing_date') else APIHelper.SKIP
        remittance_information = dictionary.get("remittance_information") if dictionary.get("remittance_information") else APIHelper.SKIP
        scheme_payment_sub_type = dictionary.get("scheme_payment_sub_type") if dictionary.get("scheme_payment_sub_type") else APIHelper.SKIP
        scheme_payment_type = dictionary.get("scheme_payment_type") if dictionary.get("scheme_payment_type") else APIHelper.SKIP
        # Return an object of this model
        return cls(amount,
                   category_purpose,
                   currency,
                   payment_purpose,
                   processing_date,
                   remittance_information,
                   scheme_payment_sub_type,
                   scheme_payment_type)
