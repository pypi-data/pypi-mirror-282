# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.account_with_bank_id import AccountWithBankId


class AccountHoldingEntity(object):

    """Implementation of the 'AccountHoldingEntity' model.

    Information about the financial institution servicing the account.

    Attributes:
        bank_address (List[str]): Financial institution address
        bank_id (str): TODO: type description here.
        bank_id_code (BankIdCodeEnum): TODO: type description here.
        bank_ids (List[AccountWithBankId]): Array for additional ID(s) for
            agent
        bank_name (str): Financial institution name
        bank_party_id (str): Identifier of the financial institution which
            services the account

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bank_id": 'bank_id',
        "bank_id_code": 'bank_id_code',
        "bank_address": 'bank_address',
        "bank_ids": 'bank_ids',
        "bank_name": 'bank_name',
        "bank_party_id": 'bank_party_id'
    }

    _optionals = [
        'bank_address',
        'bank_ids',
        'bank_name',
        'bank_party_id',
    ]

    def __init__(self,
                 bank_id=None,
                 bank_id_code=None,
                 bank_address=APIHelper.SKIP,
                 bank_ids=APIHelper.SKIP,
                 bank_name=APIHelper.SKIP,
                 bank_party_id=APIHelper.SKIP):
        """Constructor for the AccountHoldingEntity class"""

        # Initialize members of the class
        if bank_address is not APIHelper.SKIP:
            self.bank_address = bank_address 
        self.bank_id = bank_id 
        self.bank_id_code = bank_id_code 
        if bank_ids is not APIHelper.SKIP:
            self.bank_ids = bank_ids 
        if bank_name is not APIHelper.SKIP:
            self.bank_name = bank_name 
        if bank_party_id is not APIHelper.SKIP:
            self.bank_party_id = bank_party_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        bank_id = dictionary.get("bank_id") if dictionary.get("bank_id") else None
        bank_id_code = dictionary.get("bank_id_code") if dictionary.get("bank_id_code") else None
        bank_address = dictionary.get("bank_address") if dictionary.get("bank_address") else APIHelper.SKIP
        bank_ids = None
        if dictionary.get('bank_ids') is not None:
            bank_ids = [AccountWithBankId.from_dictionary(x) for x in dictionary.get('bank_ids')]
        else:
            bank_ids = APIHelper.SKIP
        bank_name = dictionary.get("bank_name") if dictionary.get("bank_name") else APIHelper.SKIP
        bank_party_id = dictionary.get("bank_party_id") if dictionary.get("bank_party_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(bank_id,
                   bank_id_code,
                   bank_address,
                   bank_ids,
                   bank_name,
                   bank_party_id)
