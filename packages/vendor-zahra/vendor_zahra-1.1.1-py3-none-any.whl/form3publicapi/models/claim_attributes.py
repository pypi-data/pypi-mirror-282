# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from form3publicapi.api_helper import APIHelper
from form3publicapi.models.beneficiary_party_2 import BeneficiaryParty2
from form3publicapi.models.debtor_party_1 import DebtorParty1
from form3publicapi.models.disputed_transaction import DisputedTransaction
from form3publicapi.models.original_instruction import OriginalInstruction


class ClaimAttributes(object):

    """Implementation of the 'ClaimAttributes' model.

    TODO: type model description here.

    Attributes:
        beneficiary_party (BeneficiaryParty2): TODO: type description here.
        clearing_id (str): TODO: type description here.
        contact_name (str): TODO: type description here.
        debtor_party (DebtorParty1): TODO: type description here.
        disputed_transactions (List[DisputedTransaction]): TODO: type
            description here.
        number_of_claims (int): TODO: type description here.
        original_instruction (OriginalInstruction): TODO: type description
            here.
        payment_scheme (str): TODO: type description here.
        processing_date (date): TODO: type description here.
        reason_code (str): TODO: type description here.
        reference (str): TODO: type description here.
        request_date (date): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "beneficiary_party": 'beneficiary_party',
        "clearing_id": 'clearing_id',
        "debtor_party": 'debtor_party',
        "disputed_transactions": 'disputed_transactions',
        "number_of_claims": 'number_of_claims',
        "original_instruction": 'original_instruction',
        "payment_scheme": 'payment_scheme',
        "reason_code": 'reason_code',
        "reference": 'reference',
        "contact_name": 'contact_name',
        "processing_date": 'processing_date',
        "request_date": 'request_date'
    }

    _optionals = [
        'contact_name',
        'processing_date',
        'request_date',
    ]

    def __init__(self,
                 beneficiary_party=None,
                 clearing_id=None,
                 debtor_party=None,
                 disputed_transactions=None,
                 number_of_claims=None,
                 original_instruction=None,
                 payment_scheme=None,
                 reason_code=None,
                 reference=None,
                 contact_name=APIHelper.SKIP,
                 processing_date=APIHelper.SKIP,
                 request_date=APIHelper.SKIP):
        """Constructor for the ClaimAttributes class"""

        # Initialize members of the class
        self.beneficiary_party = beneficiary_party 
        self.clearing_id = clearing_id 
        if contact_name is not APIHelper.SKIP:
            self.contact_name = contact_name 
        self.debtor_party = debtor_party 
        self.disputed_transactions = disputed_transactions 
        self.number_of_claims = number_of_claims 
        self.original_instruction = original_instruction 
        self.payment_scheme = payment_scheme 
        if processing_date is not APIHelper.SKIP:
            self.processing_date = processing_date 
        self.reason_code = reason_code 
        self.reference = reference 
        if request_date is not APIHelper.SKIP:
            self.request_date = request_date 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        beneficiary_party = BeneficiaryParty2.from_dictionary(dictionary.get('beneficiary_party')) if dictionary.get('beneficiary_party') else None
        clearing_id = dictionary.get("clearing_id") if dictionary.get("clearing_id") else None
        debtor_party = DebtorParty1.from_dictionary(dictionary.get('debtor_party')) if dictionary.get('debtor_party') else None
        disputed_transactions = None
        if dictionary.get('disputed_transactions') is not None:
            disputed_transactions = [DisputedTransaction.from_dictionary(x) for x in dictionary.get('disputed_transactions')]
        number_of_claims = dictionary.get("number_of_claims") if dictionary.get("number_of_claims") else None
        original_instruction = OriginalInstruction.from_dictionary(dictionary.get('original_instruction')) if dictionary.get('original_instruction') else None
        payment_scheme = dictionary.get("payment_scheme") if dictionary.get("payment_scheme") else None
        reason_code = dictionary.get("reason_code") if dictionary.get("reason_code") else None
        reference = dictionary.get("reference") if dictionary.get("reference") else None
        contact_name = dictionary.get("contact_name") if dictionary.get("contact_name") else APIHelper.SKIP
        processing_date = dateutil.parser.parse(dictionary.get('processing_date')).date() if dictionary.get('processing_date') else APIHelper.SKIP
        request_date = dateutil.parser.parse(dictionary.get('request_date')).date() if dictionary.get('request_date') else APIHelper.SKIP
        # Return an object of this model
        return cls(beneficiary_party,
                   clearing_id,
                   debtor_party,
                   disputed_transactions,
                   number_of_claims,
                   original_instruction,
                   payment_scheme,
                   reason_code,
                   reference,
                   contact_name,
                   processing_date,
                   request_date)
