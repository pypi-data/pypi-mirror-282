# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.relationships_full_query import RelationshipsFullQuery
from form3publicapi.models.relationships_full_query_response import RelationshipsFullQueryResponse


class QueryResponseSubmissionRelationships(object):

    """Implementation of the 'QueryResponseSubmissionRelationships' model.

    TODO: type model description here.

    Attributes:
        query (RelationshipsFullQuery): TODO: type description here.
        query_response (RelationshipsFullQueryResponse): TODO: type
            description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "query": 'query',
        "query_response": 'query_response'
    }

    _optionals = [
        'query',
        'query_response',
    ]

    def __init__(self,
                 query=APIHelper.SKIP,
                 query_response=APIHelper.SKIP):
        """Constructor for the QueryResponseSubmissionRelationships class"""

        # Initialize members of the class
        if query is not APIHelper.SKIP:
            self.query = query 
        if query_response is not APIHelper.SKIP:
            self.query_response = query_response 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        query = RelationshipsFullQuery.from_dictionary(dictionary.get('query')) if 'query' in dictionary.keys() else APIHelper.SKIP
        query_response = RelationshipsFullQueryResponse.from_dictionary(dictionary.get('query_response')) if 'query_response' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(query,
                   query_response)
