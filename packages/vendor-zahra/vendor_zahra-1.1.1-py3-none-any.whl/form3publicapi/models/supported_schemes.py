# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.bacs import BACS
from form3publicapi.models.ccc import CCC
from form3publicapi.models.chaps import CHAPS
from form3publicapi.models.fps import FPS


class SupportedSchemes(object):

    """Implementation of the 'SupportedSchemes' model.

    TODO: type model description here.

    Attributes:
        bacs (BACS): TODO: type description here.
        ccc (CCC): TODO: type description here.
        chaps (CHAPS): TODO: type description here.
        fps (FPS): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bacs": 'BACS',
        "ccc": 'CCC',
        "chaps": 'CHAPS',
        "fps": 'FPS'
    }

    _optionals = [
        'bacs',
        'ccc',
        'chaps',
        'fps',
    ]

    def __init__(self,
                 bacs=APIHelper.SKIP,
                 ccc=APIHelper.SKIP,
                 chaps=APIHelper.SKIP,
                 fps=APIHelper.SKIP):
        """Constructor for the SupportedSchemes class"""

        # Initialize members of the class
        if bacs is not APIHelper.SKIP:
            self.bacs = bacs 
        if ccc is not APIHelper.SKIP:
            self.ccc = ccc 
        if chaps is not APIHelper.SKIP:
            self.chaps = chaps 
        if fps is not APIHelper.SKIP:
            self.fps = fps 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        bacs = BACS.from_dictionary(dictionary.get('BACS')) if 'BACS' in dictionary.keys() else APIHelper.SKIP
        ccc = CCC.from_dictionary(dictionary.get('CCC')) if 'CCC' in dictionary.keys() else APIHelper.SKIP
        chaps = CHAPS.from_dictionary(dictionary.get('CHAPS')) if 'CHAPS' in dictionary.keys() else APIHelper.SKIP
        fps = FPS.from_dictionary(dictionary.get('FPS')) if 'FPS' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(bacs,
                   ccc,
                   chaps,
                   fps)
