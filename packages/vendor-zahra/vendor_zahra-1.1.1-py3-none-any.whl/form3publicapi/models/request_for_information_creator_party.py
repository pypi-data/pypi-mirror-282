# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.organisation_identification import OrganisationIdentification
from form3publicapi.models.private_identification_1 import PrivateIdentification1


class RequestForInformationCreatorParty(object):

    """Implementation of the 'RequestForInformationCreatorParty' model.

    TODO: type model description here.

    Attributes:
        birth_city (str): TODO: type description here.
        birth_country (str): TODO: type description here.
        birth_date (str): TODO: type description here.
        birth_province (str): TODO: type description here.
        name (str): TODO: type description here.
        organisation_identification (str): TODO: type description here.
        organisation_identification_code (str): TODO: type description here.
        organisation_identification_issuer (str): TODO: type description
            here.
        organisation_identifications (List[OrganisationIdentification]): TODO:
            type description here.
        private_identification (PrivateIdentification1): TODO: type
            description here.
        telephone_number (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "birth_city": 'birth_city',
        "birth_country": 'birth_country',
        "birth_date": 'birth_date',
        "birth_province": 'birth_province',
        "name": 'name',
        "organisation_identification": 'organisation_identification',
        "organisation_identification_code": 'organisation_identification_code',
        "organisation_identification_issuer": 'organisation_identification_issuer',
        "organisation_identifications": 'organisation_identifications',
        "private_identification": 'private_identification',
        "telephone_number": 'telephone_number'
    }

    _optionals = [
        'birth_city',
        'birth_country',
        'birth_date',
        'birth_province',
        'name',
        'organisation_identification',
        'organisation_identification_code',
        'organisation_identification_issuer',
        'organisation_identifications',
        'private_identification',
        'telephone_number',
    ]

    def __init__(self,
                 birth_city=APIHelper.SKIP,
                 birth_country=APIHelper.SKIP,
                 birth_date=APIHelper.SKIP,
                 birth_province=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 organisation_identification=APIHelper.SKIP,
                 organisation_identification_code=APIHelper.SKIP,
                 organisation_identification_issuer=APIHelper.SKIP,
                 organisation_identifications=APIHelper.SKIP,
                 private_identification=APIHelper.SKIP,
                 telephone_number=APIHelper.SKIP):
        """Constructor for the RequestForInformationCreatorParty class"""

        # Initialize members of the class
        if birth_city is not APIHelper.SKIP:
            self.birth_city = birth_city 
        if birth_country is not APIHelper.SKIP:
            self.birth_country = birth_country 
        if birth_date is not APIHelper.SKIP:
            self.birth_date = birth_date 
        if birth_province is not APIHelper.SKIP:
            self.birth_province = birth_province 
        if name is not APIHelper.SKIP:
            self.name = name 
        if organisation_identification is not APIHelper.SKIP:
            self.organisation_identification = organisation_identification 
        if organisation_identification_code is not APIHelper.SKIP:
            self.organisation_identification_code = organisation_identification_code 
        if organisation_identification_issuer is not APIHelper.SKIP:
            self.organisation_identification_issuer = organisation_identification_issuer 
        if organisation_identifications is not APIHelper.SKIP:
            self.organisation_identifications = organisation_identifications 
        if private_identification is not APIHelper.SKIP:
            self.private_identification = private_identification 
        if telephone_number is not APIHelper.SKIP:
            self.telephone_number = telephone_number 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        birth_city = dictionary.get("birth_city") if dictionary.get("birth_city") else APIHelper.SKIP
        birth_country = dictionary.get("birth_country") if dictionary.get("birth_country") else APIHelper.SKIP
        birth_date = dictionary.get("birth_date") if dictionary.get("birth_date") else APIHelper.SKIP
        birth_province = dictionary.get("birth_province") if dictionary.get("birth_province") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        organisation_identification = dictionary.get("organisation_identification") if dictionary.get("organisation_identification") else APIHelper.SKIP
        organisation_identification_code = dictionary.get("organisation_identification_code") if dictionary.get("organisation_identification_code") else APIHelper.SKIP
        organisation_identification_issuer = dictionary.get("organisation_identification_issuer") if dictionary.get("organisation_identification_issuer") else APIHelper.SKIP
        organisation_identifications = None
        if dictionary.get('organisation_identifications') is not None:
            organisation_identifications = [OrganisationIdentification.from_dictionary(x) for x in dictionary.get('organisation_identifications')]
        else:
            organisation_identifications = APIHelper.SKIP
        private_identification = PrivateIdentification1.from_dictionary(dictionary.get('private_identification')) if 'private_identification' in dictionary.keys() else APIHelper.SKIP
        telephone_number = dictionary.get("telephone_number") if dictionary.get("telephone_number") else APIHelper.SKIP
        # Return an object of this model
        return cls(birth_city,
                   birth_country,
                   birth_date,
                   birth_province,
                   name,
                   organisation_identification,
                   organisation_identification_code,
                   organisation_identification_issuer,
                   organisation_identifications,
                   private_identification,
                   telephone_number)
