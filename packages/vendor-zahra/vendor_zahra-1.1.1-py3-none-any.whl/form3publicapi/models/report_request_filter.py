# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from form3publicapi.api_helper import APIHelper
from form3publicapi.models.report_user import ReportUser


class ReportRequestFilter(object):

    """Implementation of the 'ReportRequestFilter' model.

    TODO: type model description here.

    Attributes:
        date_from (date): TODO: type description here.
        date_to (date): TODO: type description here.
        report_users (List[ReportUser]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "report_users": 'report_users',
        "date_from": 'date_from',
        "date_to": 'date_to'
    }

    _optionals = [
        'date_from',
        'date_to',
    ]

    def __init__(self,
                 report_users=None,
                 date_from=APIHelper.SKIP,
                 date_to=APIHelper.SKIP):
        """Constructor for the ReportRequestFilter class"""

        # Initialize members of the class
        if date_from is not APIHelper.SKIP:
            self.date_from = date_from 
        if date_to is not APIHelper.SKIP:
            self.date_to = date_to 
        self.report_users = report_users 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        report_users = None
        if dictionary.get('report_users') is not None:
            report_users = [ReportUser.from_dictionary(x) for x in dictionary.get('report_users')]
        date_from = dateutil.parser.parse(dictionary.get('date_from')).date() if dictionary.get('date_from') else APIHelper.SKIP
        date_to = dateutil.parser.parse(dictionary.get('date_to')).date() if dictionary.get('date_to') else APIHelper.SKIP
        # Return an object of this model
        return cls(report_users,
                   date_from,
                   date_to)
