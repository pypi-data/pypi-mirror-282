# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from form3publicapi.api_helper import APIHelper


class AccountAttributesPrivateIdentification(object):

    """Implementation of the 'AccountAttributesPrivateIdentification' model.

    TODO: type model description here.

    Attributes:
        address (List[str]): TODO: type description here.
        birth_country (str): TODO: type description here.
        birth_date (date): Customer birth date
        city (str): TODO: type description here.
        country (str): TODO: type description here.
        identification (str): TODO: type description here.
        identification_issuer (str): TODO: type description here.
        identification_scheme (str): TODO: type description here.
        identification_scheme_code (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "address": 'address',
        "birth_country": 'birth_country',
        "birth_date": 'birth_date',
        "city": 'city',
        "country": 'country',
        "identification": 'identification',
        "identification_issuer": 'identification_issuer',
        "identification_scheme": 'identification_scheme',
        "identification_scheme_code": 'identification_scheme_code'
    }

    _optionals = [
        'address',
        'birth_country',
        'birth_date',
        'city',
        'country',
        'identification',
        'identification_issuer',
        'identification_scheme',
        'identification_scheme_code',
    ]

    def __init__(self,
                 address=APIHelper.SKIP,
                 birth_country=APIHelper.SKIP,
                 birth_date=APIHelper.SKIP,
                 city=APIHelper.SKIP,
                 country=APIHelper.SKIP,
                 identification=APIHelper.SKIP,
                 identification_issuer=APIHelper.SKIP,
                 identification_scheme=APIHelper.SKIP,
                 identification_scheme_code=APIHelper.SKIP):
        """Constructor for the AccountAttributesPrivateIdentification class"""

        # Initialize members of the class
        if address is not APIHelper.SKIP:
            self.address = address 
        if birth_country is not APIHelper.SKIP:
            self.birth_country = birth_country 
        if birth_date is not APIHelper.SKIP:
            self.birth_date = birth_date 
        if city is not APIHelper.SKIP:
            self.city = city 
        if country is not APIHelper.SKIP:
            self.country = country 
        if identification is not APIHelper.SKIP:
            self.identification = identification 
        if identification_issuer is not APIHelper.SKIP:
            self.identification_issuer = identification_issuer 
        if identification_scheme is not APIHelper.SKIP:
            self.identification_scheme = identification_scheme 
        if identification_scheme_code is not APIHelper.SKIP:
            self.identification_scheme_code = identification_scheme_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        address = dictionary.get("address") if dictionary.get("address") else APIHelper.SKIP
        birth_country = dictionary.get("birth_country") if dictionary.get("birth_country") else APIHelper.SKIP
        birth_date = dateutil.parser.parse(dictionary.get('birth_date')).date() if dictionary.get('birth_date') else APIHelper.SKIP
        city = dictionary.get("city") if dictionary.get("city") else APIHelper.SKIP
        country = dictionary.get("country") if dictionary.get("country") else APIHelper.SKIP
        identification = dictionary.get("identification") if dictionary.get("identification") else APIHelper.SKIP
        identification_issuer = dictionary.get("identification_issuer") if dictionary.get("identification_issuer") else APIHelper.SKIP
        identification_scheme = dictionary.get("identification_scheme") if dictionary.get("identification_scheme") else APIHelper.SKIP
        identification_scheme_code = dictionary.get("identification_scheme_code") if dictionary.get("identification_scheme_code") else APIHelper.SKIP
        # Return an object of this model
        return cls(address,
                   birth_country,
                   birth_date,
                   city,
                   country,
                   identification,
                   identification_issuer,
                   identification_scheme,
                   identification_scheme_code)
