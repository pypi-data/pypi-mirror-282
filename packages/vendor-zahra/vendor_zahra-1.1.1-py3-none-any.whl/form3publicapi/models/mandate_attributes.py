# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from form3publicapi.api_helper import APIHelper
from form3publicapi.models.mandate_attributes_beneficiary_party import MandateAttributesBeneficiaryParty
from form3publicapi.models.mandate_attributes_debtor_party import MandateAttributesDebtorParty


class MandateAttributes(object):

    """Implementation of the 'MandateAttributes' model.

    TODO: type model description here.

    Attributes:
        amount (str): TODO: type description here.
        beneficiary_party (MandateAttributesBeneficiaryParty): TODO: type
            description here.
        clearing_id (str): TODO: type description here.
        currency (str): TODO: type description here.
        debtor_party (MandateAttributesDebtorParty): TODO: type description
            here.
        frequency (MandateFrequencyEnum): TODO: type description here.
        numeric_reference (str): TODO: type description here.
        payment_scheme (str): TODO: type description here.
        processing_date (date): TODO: type description here.
        reference (str): TODO: type description here.
        scheme_payment_type (str): TODO: type description here.
        scheme_processing_date (date): TODO: type description here.
        source (str): TODO: type description here.
        status (MandateStatusEnum): TODO: type description here.
        status_reason (str): TODO: type description here.
        unique_scheme_id (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "amount": 'amount',
        "beneficiary_party": 'beneficiary_party',
        "clearing_id": 'clearing_id',
        "currency": 'currency',
        "debtor_party": 'debtor_party',
        "frequency": 'frequency',
        "numeric_reference": 'numeric_reference',
        "payment_scheme": 'payment_scheme',
        "processing_date": 'processing_date',
        "reference": 'reference',
        "scheme_payment_type": 'scheme_payment_type',
        "scheme_processing_date": 'scheme_processing_date',
        "source": 'source',
        "status": 'status',
        "status_reason": 'status_reason',
        "unique_scheme_id": 'unique_scheme_id'
    }

    _optionals = [
        'amount',
        'beneficiary_party',
        'clearing_id',
        'currency',
        'debtor_party',
        'frequency',
        'numeric_reference',
        'payment_scheme',
        'processing_date',
        'reference',
        'scheme_payment_type',
        'scheme_processing_date',
        'source',
        'status',
        'status_reason',
        'unique_scheme_id',
    ]

    def __init__(self,
                 amount=APIHelper.SKIP,
                 beneficiary_party=APIHelper.SKIP,
                 clearing_id=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 debtor_party=APIHelper.SKIP,
                 frequency=APIHelper.SKIP,
                 numeric_reference=APIHelper.SKIP,
                 payment_scheme=APIHelper.SKIP,
                 processing_date=APIHelper.SKIP,
                 reference=APIHelper.SKIP,
                 scheme_payment_type=APIHelper.SKIP,
                 scheme_processing_date=APIHelper.SKIP,
                 source=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 status_reason=APIHelper.SKIP,
                 unique_scheme_id=APIHelper.SKIP):
        """Constructor for the MandateAttributes class"""

        # Initialize members of the class
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if beneficiary_party is not APIHelper.SKIP:
            self.beneficiary_party = beneficiary_party 
        if clearing_id is not APIHelper.SKIP:
            self.clearing_id = clearing_id 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if debtor_party is not APIHelper.SKIP:
            self.debtor_party = debtor_party 
        if frequency is not APIHelper.SKIP:
            self.frequency = frequency 
        if numeric_reference is not APIHelper.SKIP:
            self.numeric_reference = numeric_reference 
        if payment_scheme is not APIHelper.SKIP:
            self.payment_scheme = payment_scheme 
        if processing_date is not APIHelper.SKIP:
            self.processing_date = processing_date 
        if reference is not APIHelper.SKIP:
            self.reference = reference 
        if scheme_payment_type is not APIHelper.SKIP:
            self.scheme_payment_type = scheme_payment_type 
        if scheme_processing_date is not APIHelper.SKIP:
            self.scheme_processing_date = scheme_processing_date 
        if source is not APIHelper.SKIP:
            self.source = source 
        if status is not APIHelper.SKIP:
            self.status = status 
        if status_reason is not APIHelper.SKIP:
            self.status_reason = status_reason 
        if unique_scheme_id is not APIHelper.SKIP:
            self.unique_scheme_id = unique_scheme_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        amount = dictionary.get("amount") if dictionary.get("amount") else APIHelper.SKIP
        beneficiary_party = MandateAttributesBeneficiaryParty.from_dictionary(dictionary.get('beneficiary_party')) if 'beneficiary_party' in dictionary.keys() else APIHelper.SKIP
        clearing_id = dictionary.get("clearing_id") if dictionary.get("clearing_id") else APIHelper.SKIP
        currency = dictionary.get("currency") if dictionary.get("currency") else APIHelper.SKIP
        debtor_party = MandateAttributesDebtorParty.from_dictionary(dictionary.get('debtor_party')) if 'debtor_party' in dictionary.keys() else APIHelper.SKIP
        frequency = dictionary.get("frequency") if dictionary.get("frequency") else APIHelper.SKIP
        numeric_reference = dictionary.get("numeric_reference") if dictionary.get("numeric_reference") else APIHelper.SKIP
        payment_scheme = dictionary.get("payment_scheme") if dictionary.get("payment_scheme") else APIHelper.SKIP
        processing_date = dateutil.parser.parse(dictionary.get('processing_date')).date() if dictionary.get('processing_date') else APIHelper.SKIP
        reference = dictionary.get("reference") if dictionary.get("reference") else APIHelper.SKIP
        scheme_payment_type = dictionary.get("scheme_payment_type") if dictionary.get("scheme_payment_type") else APIHelper.SKIP
        scheme_processing_date = dateutil.parser.parse(dictionary.get('scheme_processing_date')).date() if dictionary.get('scheme_processing_date') else APIHelper.SKIP
        source = dictionary.get("source") if dictionary.get("source") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        status_reason = dictionary.get("status_reason") if dictionary.get("status_reason") else APIHelper.SKIP
        unique_scheme_id = dictionary.get("unique_scheme_id") if dictionary.get("unique_scheme_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(amount,
                   beneficiary_party,
                   clearing_id,
                   currency,
                   debtor_party,
                   frequency,
                   numeric_reference,
                   payment_scheme,
                   processing_date,
                   reference,
                   scheme_payment_type,
                   scheme_processing_date,
                   source,
                   status,
                   status_reason,
                   unique_scheme_id)
