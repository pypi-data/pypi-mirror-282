# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper


class Attributes18(object):

    """Implementation of the 'Attributes18' model.

    TODO: type model description here.

    Attributes:
        action_time (datetime): Timestamp when the change was requested
        actioned_by (uuid|str): User ID of the user who requested the change
        after_data (object): Snapshot of what the data would be after the
            change (empty if the request was to DELETE a record)
        before_data (object): Snapshot of the data before the change (empty if
            the request was to CREATE a new record)
        description (str): Textual description of the change being made
        record_id (uuid|str): ID of the resource that is being changed
        record_type (str): Type of the resource that is being changed

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "action_time": 'action_time',
        "actioned_by": 'actioned_by',
        "after_data": 'after_data',
        "before_data": 'before_data',
        "description": 'description',
        "record_id": 'record_id',
        "record_type": 'record_type'
    }

    _optionals = [
        'action_time',
        'actioned_by',
        'after_data',
        'before_data',
        'description',
        'record_id',
        'record_type',
    ]

    def __init__(self,
                 action_time=APIHelper.SKIP,
                 actioned_by=APIHelper.SKIP,
                 after_data=APIHelper.SKIP,
                 before_data=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 record_id=APIHelper.SKIP,
                 record_type=APIHelper.SKIP):
        """Constructor for the Attributes18 class"""

        # Initialize members of the class
        if action_time is not APIHelper.SKIP:
            self.action_time = APIHelper.apply_datetime_converter(action_time, APIHelper.RFC3339DateTime) if action_time else None 
        if actioned_by is not APIHelper.SKIP:
            self.actioned_by = actioned_by 
        if after_data is not APIHelper.SKIP:
            self.after_data = after_data 
        if before_data is not APIHelper.SKIP:
            self.before_data = before_data 
        if description is not APIHelper.SKIP:
            self.description = description 
        if record_id is not APIHelper.SKIP:
            self.record_id = record_id 
        if record_type is not APIHelper.SKIP:
            self.record_type = record_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        action_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("action_time")).datetime if dictionary.get("action_time") else APIHelper.SKIP
        actioned_by = dictionary.get("actioned_by") if dictionary.get("actioned_by") else APIHelper.SKIP
        after_data = dictionary.get("after_data") if dictionary.get("after_data") else APIHelper.SKIP
        before_data = dictionary.get("before_data") if dictionary.get("before_data") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        record_id = dictionary.get("record_id") if dictionary.get("record_id") else APIHelper.SKIP
        record_type = dictionary.get("record_type") if dictionary.get("record_type") else APIHelper.SKIP
        # Return an object of this model
        return cls(action_time,
                   actioned_by,
                   after_data,
                   before_data,
                   description,
                   record_id,
                   record_type)
