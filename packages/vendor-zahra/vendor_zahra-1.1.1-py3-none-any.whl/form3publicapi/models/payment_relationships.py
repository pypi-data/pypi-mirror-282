# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.beneficiary import Beneficiary
from form3publicapi.models.beneficiary_account import BeneficiaryAccount
from form3publicapi.models.debtor import Debtor
from form3publicapi.models.debtor_account import DebtorAccount
from form3publicapi.models.forwarded_payment import ForwardedPayment
from form3publicapi.models.forwarding_payment import ForwardingPayment
from form3publicapi.models.fx_deal import FxDeal
from form3publicapi.models.payment_admission_2 import PaymentAdmission2
from form3publicapi.models.payment_advice_1 import PaymentAdvice1
from form3publicapi.models.payment_recall import PaymentRecall
from form3publicapi.models.payment_return import PaymentReturn
from form3publicapi.models.payment_reversal import PaymentReversal
from form3publicapi.models.payment_submission_2 import PaymentSubmission2


class PaymentRelationships(object):

    """Implementation of the 'PaymentRelationships' model.

    TODO: type model description here.

    Attributes:
        beneficiary (Beneficiary): TODO: type description here.
        beneficiary_account (BeneficiaryAccount): TODO: type description
            here.
        debtor (Debtor): TODO: type description here.
        debtor_account (DebtorAccount): TODO: type description here.
        forwarded_payment (ForwardedPayment): TODO: type description here.
        forwarding_payment (ForwardingPayment): TODO: type description here.
        fx_deal (FxDeal): TODO: type description here.
        payment_admission (PaymentAdmission2): TODO: type description here.
        payment_advice (PaymentAdvice1): TODO: type description here.
        payment_recall (PaymentRecall): TODO: type description here.
        payment_return (PaymentReturn): TODO: type description here.
        payment_reversal (PaymentReversal): TODO: type description here.
        payment_submission (PaymentSubmission2): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "beneficiary": 'beneficiary',
        "beneficiary_account": 'beneficiary_account',
        "debtor": 'debtor',
        "debtor_account": 'debtor_account',
        "forwarded_payment": 'forwarded_payment',
        "forwarding_payment": 'forwarding_payment',
        "fx_deal": 'fx_deal',
        "payment_admission": 'payment_admission',
        "payment_advice": 'payment_advice',
        "payment_recall": 'payment_recall',
        "payment_return": 'payment_return',
        "payment_reversal": 'payment_reversal',
        "payment_submission": 'payment_submission'
    }

    _optionals = [
        'beneficiary',
        'beneficiary_account',
        'debtor',
        'debtor_account',
        'forwarded_payment',
        'forwarding_payment',
        'fx_deal',
        'payment_admission',
        'payment_advice',
        'payment_recall',
        'payment_return',
        'payment_reversal',
        'payment_submission',
    ]

    def __init__(self,
                 beneficiary=APIHelper.SKIP,
                 beneficiary_account=APIHelper.SKIP,
                 debtor=APIHelper.SKIP,
                 debtor_account=APIHelper.SKIP,
                 forwarded_payment=APIHelper.SKIP,
                 forwarding_payment=APIHelper.SKIP,
                 fx_deal=APIHelper.SKIP,
                 payment_admission=APIHelper.SKIP,
                 payment_advice=APIHelper.SKIP,
                 payment_recall=APIHelper.SKIP,
                 payment_return=APIHelper.SKIP,
                 payment_reversal=APIHelper.SKIP,
                 payment_submission=APIHelper.SKIP):
        """Constructor for the PaymentRelationships class"""

        # Initialize members of the class
        if beneficiary is not APIHelper.SKIP:
            self.beneficiary = beneficiary 
        if beneficiary_account is not APIHelper.SKIP:
            self.beneficiary_account = beneficiary_account 
        if debtor is not APIHelper.SKIP:
            self.debtor = debtor 
        if debtor_account is not APIHelper.SKIP:
            self.debtor_account = debtor_account 
        if forwarded_payment is not APIHelper.SKIP:
            self.forwarded_payment = forwarded_payment 
        if forwarding_payment is not APIHelper.SKIP:
            self.forwarding_payment = forwarding_payment 
        if fx_deal is not APIHelper.SKIP:
            self.fx_deal = fx_deal 
        if payment_admission is not APIHelper.SKIP:
            self.payment_admission = payment_admission 
        if payment_advice is not APIHelper.SKIP:
            self.payment_advice = payment_advice 
        if payment_recall is not APIHelper.SKIP:
            self.payment_recall = payment_recall 
        if payment_return is not APIHelper.SKIP:
            self.payment_return = payment_return 
        if payment_reversal is not APIHelper.SKIP:
            self.payment_reversal = payment_reversal 
        if payment_submission is not APIHelper.SKIP:
            self.payment_submission = payment_submission 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        beneficiary = Beneficiary.from_dictionary(dictionary.get('beneficiary')) if 'beneficiary' in dictionary.keys() else APIHelper.SKIP
        beneficiary_account = BeneficiaryAccount.from_dictionary(dictionary.get('beneficiary_account')) if 'beneficiary_account' in dictionary.keys() else APIHelper.SKIP
        debtor = Debtor.from_dictionary(dictionary.get('debtor')) if 'debtor' in dictionary.keys() else APIHelper.SKIP
        debtor_account = DebtorAccount.from_dictionary(dictionary.get('debtor_account')) if 'debtor_account' in dictionary.keys() else APIHelper.SKIP
        forwarded_payment = ForwardedPayment.from_dictionary(dictionary.get('forwarded_payment')) if 'forwarded_payment' in dictionary.keys() else APIHelper.SKIP
        forwarding_payment = ForwardingPayment.from_dictionary(dictionary.get('forwarding_payment')) if 'forwarding_payment' in dictionary.keys() else APIHelper.SKIP
        fx_deal = FxDeal.from_dictionary(dictionary.get('fx_deal')) if 'fx_deal' in dictionary.keys() else APIHelper.SKIP
        payment_admission = PaymentAdmission2.from_dictionary(dictionary.get('payment_admission')) if 'payment_admission' in dictionary.keys() else APIHelper.SKIP
        payment_advice = PaymentAdvice1.from_dictionary(dictionary.get('payment_advice')) if 'payment_advice' in dictionary.keys() else APIHelper.SKIP
        payment_recall = PaymentRecall.from_dictionary(dictionary.get('payment_recall')) if 'payment_recall' in dictionary.keys() else APIHelper.SKIP
        payment_return = PaymentReturn.from_dictionary(dictionary.get('payment_return')) if 'payment_return' in dictionary.keys() else APIHelper.SKIP
        payment_reversal = PaymentReversal.from_dictionary(dictionary.get('payment_reversal')) if 'payment_reversal' in dictionary.keys() else APIHelper.SKIP
        payment_submission = PaymentSubmission2.from_dictionary(dictionary.get('payment_submission')) if 'payment_submission' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(beneficiary,
                   beneficiary_account,
                   debtor,
                   debtor_account,
                   forwarded_payment,
                   forwarding_payment,
                   fx_deal,
                   payment_admission,
                   payment_advice,
                   payment_recall,
                   payment_return,
                   payment_reversal,
                   payment_submission)
