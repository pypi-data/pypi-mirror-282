# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper
from form3publicapi.models.correction_transaction_information import CorrectionTransactionInformation
from form3publicapi.models.duplicate_transaction_information import DuplicateTransactionInformation
from form3publicapi.models.payment_type_information import PaymentTypeInformation
from form3publicapi.models.query_beneficiary_debtor_party import QueryBeneficiaryDebtorParty
from form3publicapi.models.query_reference import QueryReference
from form3publicapi.models.query_ultimate_entity import QueryUltimateEntity


class QueryResponseInformation(object):

    """Implementation of the 'QueryResponseInformation' model.

    TODO: type model description here.

    Attributes:
        beneficiary_party (QueryBeneficiaryDebtorParty): TODO: type
            description here.
        correction_transaction_information (CorrectionTransactionInformation):
            References a transaction initiated to fix the case under
            investigation.
        debtor_party (QueryBeneficiaryDebtorParty): TODO: type description
            here.
        duplicate_transaction_information (DuplicateTransactionInformation):
            TODO: type description here.
        payment_type_information (PaymentTypeInformation): Set of elements
            used to further specify the type of transaction.
        references (List[QueryReference]): Reference for the case ID
            associated to this Exception and Investigation case.
        ultimate_beneficiary_party (QueryUltimateEntity): TODO: type
            description here.
        ultimate_debtor_party (QueryUltimateEntity): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "beneficiary_party": 'beneficiary_party',
        "correction_transaction_information": 'correction_transaction_information',
        "debtor_party": 'debtor_party',
        "duplicate_transaction_information": 'duplicate_transaction_information',
        "payment_type_information": 'payment_type_information',
        "references": 'references',
        "ultimate_beneficiary_party": 'ultimate_beneficiary_party',
        "ultimate_debtor_party": 'ultimate_debtor_party'
    }

    _optionals = [
        'beneficiary_party',
        'correction_transaction_information',
        'debtor_party',
        'duplicate_transaction_information',
        'payment_type_information',
        'references',
        'ultimate_beneficiary_party',
        'ultimate_debtor_party',
    ]

    def __init__(self,
                 beneficiary_party=APIHelper.SKIP,
                 correction_transaction_information=APIHelper.SKIP,
                 debtor_party=APIHelper.SKIP,
                 duplicate_transaction_information=APIHelper.SKIP,
                 payment_type_information=APIHelper.SKIP,
                 references=APIHelper.SKIP,
                 ultimate_beneficiary_party=APIHelper.SKIP,
                 ultimate_debtor_party=APIHelper.SKIP):
        """Constructor for the QueryResponseInformation class"""

        # Initialize members of the class
        if beneficiary_party is not APIHelper.SKIP:
            self.beneficiary_party = beneficiary_party 
        if correction_transaction_information is not APIHelper.SKIP:
            self.correction_transaction_information = correction_transaction_information 
        if debtor_party is not APIHelper.SKIP:
            self.debtor_party = debtor_party 
        if duplicate_transaction_information is not APIHelper.SKIP:
            self.duplicate_transaction_information = duplicate_transaction_information 
        if payment_type_information is not APIHelper.SKIP:
            self.payment_type_information = payment_type_information 
        if references is not APIHelper.SKIP:
            self.references = references 
        if ultimate_beneficiary_party is not APIHelper.SKIP:
            self.ultimate_beneficiary_party = ultimate_beneficiary_party 
        if ultimate_debtor_party is not APIHelper.SKIP:
            self.ultimate_debtor_party = ultimate_debtor_party 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        beneficiary_party = QueryBeneficiaryDebtorParty.from_dictionary(dictionary.get('beneficiary_party')) if 'beneficiary_party' in dictionary.keys() else APIHelper.SKIP
        correction_transaction_information = CorrectionTransactionInformation.from_dictionary(dictionary.get('correction_transaction_information')) if 'correction_transaction_information' in dictionary.keys() else APIHelper.SKIP
        debtor_party = QueryBeneficiaryDebtorParty.from_dictionary(dictionary.get('debtor_party')) if 'debtor_party' in dictionary.keys() else APIHelper.SKIP
        duplicate_transaction_information = DuplicateTransactionInformation.from_dictionary(dictionary.get('duplicate_transaction_information')) if 'duplicate_transaction_information' in dictionary.keys() else APIHelper.SKIP
        payment_type_information = PaymentTypeInformation.from_dictionary(dictionary.get('payment_type_information')) if 'payment_type_information' in dictionary.keys() else APIHelper.SKIP
        references = None
        if dictionary.get('references') is not None:
            references = [QueryReference.from_dictionary(x) for x in dictionary.get('references')]
        else:
            references = APIHelper.SKIP
        ultimate_beneficiary_party = QueryUltimateEntity.from_dictionary(dictionary.get('ultimate_beneficiary_party')) if 'ultimate_beneficiary_party' in dictionary.keys() else APIHelper.SKIP
        ultimate_debtor_party = QueryUltimateEntity.from_dictionary(dictionary.get('ultimate_debtor_party')) if 'ultimate_debtor_party' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(beneficiary_party,
                   correction_transaction_information,
                   debtor_party,
                   duplicate_transaction_information,
                   payment_type_information,
                   references,
                   ultimate_beneficiary_party,
                   ultimate_debtor_party)
