# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from form3publicapi.api_helper import APIHelper
from form3publicapi.models.report_user import ReportUser


class ReportAttributes(object):

    """Implementation of the 'ReportAttributes' model.

    TODO: type model description here.

    Attributes:
        formats (List[str]): TODO: type description here.
        generation_time (datetime): TODO: type description here.
        processing_date (date): TODO: type description here.
        report_source (str): TODO: type description here.
        report_type (str): Type of report.
        report_type_description (str): TODO: type description here.
        report_users (List[ReportUser]): Users or organisations this report
            was generated for

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "formats": 'formats',
        "generation_time": 'generation_time',
        "processing_date": 'processing_date',
        "report_source": 'report_source',
        "report_type": 'report_type',
        "report_type_description": 'report_type_description',
        "report_users": 'report_users'
    }

    _optionals = [
        'formats',
        'generation_time',
        'processing_date',
        'report_source',
        'report_type',
        'report_type_description',
        'report_users',
    ]

    def __init__(self,
                 formats=APIHelper.SKIP,
                 generation_time=APIHelper.SKIP,
                 processing_date=APIHelper.SKIP,
                 report_source=APIHelper.SKIP,
                 report_type=APIHelper.SKIP,
                 report_type_description=APIHelper.SKIP,
                 report_users=APIHelper.SKIP):
        """Constructor for the ReportAttributes class"""

        # Initialize members of the class
        if formats is not APIHelper.SKIP:
            self.formats = formats 
        if generation_time is not APIHelper.SKIP:
            self.generation_time = APIHelper.apply_datetime_converter(generation_time, APIHelper.RFC3339DateTime) if generation_time else None 
        if processing_date is not APIHelper.SKIP:
            self.processing_date = processing_date 
        if report_source is not APIHelper.SKIP:
            self.report_source = report_source 
        if report_type is not APIHelper.SKIP:
            self.report_type = report_type 
        if report_type_description is not APIHelper.SKIP:
            self.report_type_description = report_type_description 
        if report_users is not APIHelper.SKIP:
            self.report_users = report_users 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        formats = dictionary.get("formats") if dictionary.get("formats") else APIHelper.SKIP
        generation_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("generation_time")).datetime if dictionary.get("generation_time") else APIHelper.SKIP
        processing_date = dateutil.parser.parse(dictionary.get('processing_date')).date() if dictionary.get('processing_date') else APIHelper.SKIP
        report_source = dictionary.get("report_source") if dictionary.get("report_source") else APIHelper.SKIP
        report_type = dictionary.get("report_type") if dictionary.get("report_type") else APIHelper.SKIP
        report_type_description = dictionary.get("report_type_description") if dictionary.get("report_type_description") else APIHelper.SKIP
        report_users = None
        if dictionary.get('report_users') is not None:
            report_users = [ReportUser.from_dictionary(x) for x in dictionary.get('report_users')]
        else:
            report_users = APIHelper.SKIP
        # Return an object of this model
        return cls(formats,
                   generation_time,
                   processing_date,
                   report_source,
                   report_type,
                   report_type_description,
                   report_users)
