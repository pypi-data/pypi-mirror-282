# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from form3publicapi.api_helper import APIHelper


class Attributes59(object):

    """Implementation of the 'Attributes59' model.

    TODO: type model description here.

    Attributes:
        status (RecallDecisionSubmissionStatusEnum):
            [Status](http://draft-api-docs.form3.tech/api.html#enumerations-pay
            ment-status-codes-payment-submission-status) of the submission
        status_reason (str): Reason for submission failure if status is
            `delivery_failed`

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "status": 'status',
        "status_reason": 'status_reason'
    }

    _optionals = [
        'status',
        'status_reason',
    ]

    def __init__(self,
                 status=APIHelper.SKIP,
                 status_reason=APIHelper.SKIP):
        """Constructor for the Attributes59 class"""

        # Initialize members of the class
        if status is not APIHelper.SKIP:
            self.status = status 
        if status_reason is not APIHelper.SKIP:
            self.status_reason = status_reason 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        status_reason = dictionary.get("status_reason") if dictionary.get("status_reason") else APIHelper.SKIP
        # Return an object of this model
        return cls(status,
                   status_reason)
