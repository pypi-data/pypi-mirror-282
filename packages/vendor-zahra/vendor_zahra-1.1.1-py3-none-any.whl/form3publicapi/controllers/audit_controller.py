# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from form3publicapi.api_helper import APIHelper
from form3publicapi.configuration import Server
from form3publicapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from form3publicapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from form3publicapi.models.audit_entry_list_response import AuditEntryListResponse


class AuditController(BaseController):

    """A Controller to access Endpoints in the form3publicapi API."""
    def __init__(self, config):
        super(AuditController, self).__init__(config)

    def list_audit_entries_for_this_record_type(self,
                                                record_type,
                                                page_number=None,
                                                page_size=None,
                                                page_after=None,
                                                filter_organisation_id=None,
                                                filter_action_time_from=None,
                                                filter_action_time_to=None):
        """Does a GET request to /audit/entries/{record_type}.

        List audit entries for this record type

        Args:
            record_type (str): Record Type
            page_number (int, optional): Which page to select
            page_size (int, optional): Number of items to select
            page_after (str, optional): Cursor for next page (this is a
                base64-encoded UUID continuation token returned from the
                application and should not be manually generated)
            filter_organisation_id (List[uuid|str], optional): Filter by
                organisation id
            filter_action_time_from (datetime, optional): TODO: type
                description here.
            filter_action_time_to (datetime, optional): TODO: type description
                here.

        Returns:
            AuditEntryListResponse: Response from the API. Audit details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/audit/entries/{record_type}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('record_type')
                            .value(record_type)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('page[number]')
                         .value(page_number))
            .query_param(Parameter()
                         .key('page[size]')
                         .value(page_size))
            .query_param(Parameter()
                         .key('page[after]')
                         .value(page_after))
            .query_param(Parameter()
                         .key('filter[organisation_id]')
                         .value(filter_organisation_id))
            .query_param(Parameter()
                         .key('filter[action_time_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_action_time_from)))
            .query_param(Parameter()
                         .key('filter[action_time_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_action_time_to)))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AuditEntryListResponse.from_dictionary)
        ).execute()

    def fetch_audit_entry_list_for_this_record_type_id(self,
                                                       record_type,
                                                       id):
        """Does a GET request to /audit/entries/{record_type}/{id}.

        Fetch audit entry list for this record type/id

        Args:
            record_type (str): Record Type
            id (uuid|str): Record Id

        Returns:
            AuditEntryListResponse: Response from the API. Audit details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/audit/entries/{record_type}/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('record_type')
                            .value(record_type)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AuditEntryListResponse.from_dictionary)
        ).execute()
