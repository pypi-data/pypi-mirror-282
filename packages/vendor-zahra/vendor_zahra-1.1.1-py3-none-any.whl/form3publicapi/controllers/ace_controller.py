# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from form3publicapi.api_helper import APIHelper
from form3publicapi.configuration import Server
from form3publicapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from form3publicapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from form3publicapi.models.ace_details_list_response import AceDetailsListResponse
from form3publicapi.models.ace_creation_response import AceCreationResponse
from form3publicapi.models.ace_details_response import AceDetailsResponse
from form3publicapi.exceptions.api_error_exception import ApiErrorException


class ACEController(BaseController):

    """A Controller to access Endpoints in the form3publicapi API."""
    def __init__(self, config):
        super(ACEController, self).__init__(config)

    def list_all_access_controls_for_role(self,
                                          role_id):
        """Does a GET request to /security/roles/{role_id}/aces.

        List all Access Controls for role

        Args:
            role_id (uuid|str): Role Id

        Returns:
            AceDetailsListResponse: Response from the API. List of ACE
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/security/roles/{role_id}/aces')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('role_id')
                            .value(role_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AceDetailsListResponse.from_dictionary)
            .local_error('404', 'Not Found', ApiErrorException)
        ).execute()

    def create_access_control_entry(self,
                                    role_id,
                                    ace_creation_request=None):
        """Does a POST request to /security/roles/{role_id}/aces.

        Create Access Control Entry

        Args:
            role_id (uuid|str): Role Id
            ace_creation_request (AceCreation, optional): TODO: type
                description here.

        Returns:
            AceCreationResponse: Response from the API. ACE creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/security/roles/{role_id}/aces')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('role_id')
                            .value(role_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(ace_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AceCreationResponse.from_dictionary)
            .local_error('400', 'Bad request', ApiErrorException)
            .local_error('404', 'Not Found', ApiErrorException)
            .local_error('409', 'Conflict', ApiErrorException)
        ).execute()

    def delete_access_control_entry(self,
                                    role_id,
                                    ace_id):
        """Does a DELETE request to /security/roles/{role_id}/aces/{ace_id}.

        Delete Access Control Entry

        Args:
            role_id (uuid|str): Role Id
            ace_id (uuid|str): Ace Id

        Returns:
            void: Response from the API. ACE deleted OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/security/roles/{role_id}/aces/{ace_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('role_id')
                            .value(role_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ace_id')
                            .value(ace_id)
                            .should_encode(True))
            .auth(Single('OAuth2'))
        ).execute()

    def fetch_access_control_entry(self,
                                   role_id,
                                   ace_id):
        """Does a GET request to /security/roles/{role_id}/aces/{ace_id}.

        Fetch Access Control Entry

        Args:
            role_id (uuid|str): Role Id
            ace_id (uuid|str): Ace Id

        Returns:
            AceDetailsResponse: Response from the API. ACE details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/security/roles/{role_id}/aces/{ace_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('role_id')
                            .value(role_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ace_id')
                            .value(ace_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AceDetailsResponse.from_dictionary)
            .local_error('404', 'Not Found', ApiErrorException)
        ).execute()
