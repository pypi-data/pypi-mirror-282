# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from form3publicapi.api_helper import APIHelper
from form3publicapi.configuration import Server
from form3publicapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from form3publicapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from form3publicapi.models.claim_details_list_response import ClaimDetailsListResponse
from form3publicapi.models.claim_details_response import ClaimDetailsResponse
from form3publicapi.models.claim_reversal_details_response import ClaimReversalDetailsResponse
from form3publicapi.models.claim_reversal_submission_details_response import ClaimReversalSubmissionDetailsResponse
from form3publicapi.models.claim_submission_details_response import ClaimSubmissionDetailsResponse
from form3publicapi.exceptions.api_error_exception import ApiErrorException


class ClaimsController(BaseController):

    """A Controller to access Endpoints in the form3publicapi API."""
    def __init__(self, config):
        super(ClaimsController, self).__init__(config)

    def list_claims(self,
                    page_number=None,
                    page_size=None,
                    filter_organisation_id=None,
                    filter_payment_scheme=None,
                    filter_clearing_id=None,
                    filter_reference=None,
                    filter_reason_code=None,
                    filter_contact_name=None,
                    filter_debtor_party_account_number=None,
                    filter_debtor_party_bank_id=None,
                    filter_beneficiary_party_account_number=None,
                    filter_beneficiary_party_bank_id=None,
                    filter_original_instruction_reference=None,
                    filter_submission_status=None,
                    filter_submission_submission_date_from=None,
                    filter_submission_submission_date_to=None,
                    filter_reversal_status=None,
                    filter_reversal_submission_date_from=None,
                    filter_reversal_submission_date_to=None):
        """Does a GET request to /transaction/claims.

        List claims

        Args:
            page_number (int, optional): Which page to select
            page_size (int, optional): Number of items to select
            filter_organisation_id (List[uuid|str], optional): Filter by
                organisation id
            filter_payment_scheme (str, optional): TODO: type description
                here.
            filter_clearing_id (str, optional): TODO: type description here.
            filter_reference (str, optional): TODO: type description here.
            filter_reason_code (str, optional): TODO: type description here.
            filter_contact_name (str, optional): TODO: type description here.
            filter_debtor_party_account_number (str, optional): TODO: type
                description here.
            filter_debtor_party_bank_id (str, optional): TODO: type
                description here.
            filter_beneficiary_party_account_number (str, optional): TODO:
                type description here.
            filter_beneficiary_party_bank_id (str, optional): TODO: type
                description here.
            filter_original_instruction_reference (str, optional): TODO: type
                description here.
            filter_submission_status (str, optional): TODO: type description
                here.
            filter_submission_submission_date_from (datetime, optional): TODO:
                type description here.
            filter_submission_submission_date_to (datetime, optional): TODO:
                type description here.
            filter_reversal_status (str, optional): TODO: type description
                here.
            filter_reversal_submission_date_from (datetime, optional): TODO:
                type description here.
            filter_reversal_submission_date_to (datetime, optional): TODO:
                type description here.

        Returns:
            ClaimDetailsListResponse: Response from the API. List of claims
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/claims')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page[number]')
                         .value(page_number))
            .query_param(Parameter()
                         .key('page[size]')
                         .value(page_size))
            .query_param(Parameter()
                         .key('filter[organisation_id]')
                         .value(filter_organisation_id))
            .query_param(Parameter()
                         .key('filter[payment_scheme]')
                         .value(filter_payment_scheme))
            .query_param(Parameter()
                         .key('filter[clearing_id]')
                         .value(filter_clearing_id))
            .query_param(Parameter()
                         .key('filter[reference]')
                         .value(filter_reference))
            .query_param(Parameter()
                         .key('filter[reason_code]')
                         .value(filter_reason_code))
            .query_param(Parameter()
                         .key('filter[contact_name]')
                         .value(filter_contact_name))
            .query_param(Parameter()
                         .key('filter[debtor_party.account_number]')
                         .value(filter_debtor_party_account_number))
            .query_param(Parameter()
                         .key('filter[debtor_party.bank_id]')
                         .value(filter_debtor_party_bank_id))
            .query_param(Parameter()
                         .key('filter[beneficiary_party.account_number]')
                         .value(filter_beneficiary_party_account_number))
            .query_param(Parameter()
                         .key('filter[beneficiary_party.bank_id]')
                         .value(filter_beneficiary_party_bank_id))
            .query_param(Parameter()
                         .key('filter[original_instruction.reference]')
                         .value(filter_original_instruction_reference))
            .query_param(Parameter()
                         .key('filter[submission.status]')
                         .value(filter_submission_status))
            .query_param(Parameter()
                         .key('filter[submission.submission_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_submission_submission_date_from)))
            .query_param(Parameter()
                         .key('filter[submission.submission_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_submission_submission_date_to)))
            .query_param(Parameter()
                         .key('filter[reversal.status]')
                         .value(filter_reversal_status))
            .query_param(Parameter()
                         .key('filter[reversal.submission_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_reversal_submission_date_from)))
            .query_param(Parameter()
                         .key('filter[reversal.submission_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_reversal_submission_date_to)))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ClaimDetailsListResponse.from_dictionary)
        ).execute()

    def create_claim(self,
                     claim_creation_request=None):
        """Does a POST request to /transaction/claims.

        Create Claim

        Args:
            claim_creation_request (ClaimCreation, optional): TODO: type
                description here.

        Returns:
            ClaimDetailsResponse: Response from the API. Claim creation
                response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/claims')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(claim_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ClaimDetailsResponse.from_dictionary)
            .local_error('400', 'Claim creation error', ApiErrorException)
        ).execute()

    def fetch_claim(self,
                    id):
        """Does a GET request to /transaction/claims/{id}.

        Fetch claim

        Args:
            id (uuid|str): Claim Id

        Returns:
            ClaimDetailsResponse: Response from the API. Claim details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/claims/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ClaimDetailsResponse.from_dictionary)
            .local_error('400', 'Error', ApiErrorException)
        ).execute()

    def create_claim_reversal(self,
                              id,
                              claim_reversal_creation_request=None):
        """Does a POST request to /transaction/claims/{id}/reversals.

        Create Claim Reversal

        Args:
            id (uuid|str): Claim Id
            claim_reversal_creation_request (ClaimReversalCreation, optional):
                TODO: type description here.

        Returns:
            ClaimReversalDetailsResponse: Response from the API. Claim
                Reversal creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/claims/{id}/reversals')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(claim_reversal_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ClaimReversalDetailsResponse.from_dictionary)
            .local_error('400', 'Claim Reversal creation error', ApiErrorException)
        ).execute()

    def fetch_claim_reversal(self,
                             id,
                             reversal_id):
        """Does a GET request to /transaction/claims/{id}/reversals/{reversalId}.

        Fetch Claim Reversal

        Args:
            id (uuid|str): Claim Id
            reversal_id (uuid|str): Claim Reversal Id

        Returns:
            ClaimReversalDetailsResponse: Response from the API. Claim
                Reversal details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/claims/{id}/reversals/{reversalId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ClaimReversalDetailsResponse.from_dictionary)
            .local_error('400', 'Error', ApiErrorException)
        ).execute()

    def create_claim_reversal_submission(self,
                                         id,
                                         reversal_id,
                                         claim_reversal_submission_creation_request=None):
        """Does a POST request to /transaction/claims/{id}/reversals/{reversalId}/submissions.

        Create Claim Reversal Submission

        Args:
            id (uuid|str): Claim Id
            reversal_id (uuid|str): Claim Reversal Id
            claim_reversal_submission_creation_request
                (ClaimReversalSubmissionCreation, optional): TODO: type
                description here.

        Returns:
            ClaimReversalSubmissionDetailsResponse: Response from the API.
                Claim Reversal Submission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/claims/{id}/reversals/{reversalId}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(claim_reversal_submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ClaimReversalSubmissionDetailsResponse.from_dictionary)
            .local_error('400', 'Claim Reversal creation error', ApiErrorException)
        ).execute()

    def fetch_claim_reversal_submission(self,
                                        id,
                                        reversal_id,
                                        submission_id):
        """Does a GET request to /transaction/claims/{id}/reversals/{reversalId}/submissions/{submissionId}.

        Fetch Claim Reversal Submission

        Args:
            id (uuid|str): Claim Id
            reversal_id (uuid|str): Claim Reversal Id
            submission_id (uuid|str): Claim Reversal Submission Id

        Returns:
            ClaimReversalSubmissionDetailsResponse: Response from the API.
                Claim Reversal Submission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/claims/{id}/reversals/{reversalId}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ClaimReversalSubmissionDetailsResponse.from_dictionary)
            .local_error('400', 'Error', ApiErrorException)
        ).execute()

    def create_claim_submission(self,
                                id,
                                claim_submission_creation_request=None):
        """Does a POST request to /transaction/claims/{id}/submissions.

        Create Claim Submission

        Args:
            id (uuid|str): Claim Id
            claim_submission_creation_request (ClaimSubmissionCreation,
                optional): TODO: type description here.

        Returns:
            ClaimSubmissionDetailsResponse: Response from the API. Claim
                Submission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/claims/{id}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(claim_submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ClaimSubmissionDetailsResponse.from_dictionary)
            .local_error('400', 'Claim Submission creation error', ApiErrorException)
        ).execute()

    def fetch_claim_submission(self,
                               id,
                               submission_id):
        """Does a GET request to /transaction/claims/{id}/submissions/{submissionId}.

        Fetch Claim Submission

        Args:
            id (uuid|str): Claim Id
            submission_id (uuid|str): Claim Submission Id

        Returns:
            ClaimSubmissionDetailsResponse: Response from the API. Claim
                Submission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/claims/{id}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ClaimSubmissionDetailsResponse.from_dictionary)
            .local_error('400', 'Error', ApiErrorException)
        ).execute()
