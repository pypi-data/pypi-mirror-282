# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from form3publicapi.api_helper import APIHelper
from form3publicapi.configuration import Server
from form3publicapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from form3publicapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from form3publicapi.models.position_details_list_response import PositionDetailsListResponse
from form3publicapi.models.payment_details_list_response import PaymentDetailsListResponse
from form3publicapi.models.payment_creation_response import PaymentCreationResponse
from form3publicapi.models.payment_details_response import PaymentDetailsResponse
from form3publicapi.models.payment_admission_details_response import PaymentAdmissionDetailsResponse
from form3publicapi.models.payment_admission_task_list_response import PaymentAdmissionTaskListResponse
from form3publicapi.models.payment_admission_task_details_response import PaymentAdmissionTaskDetailsResponse
from form3publicapi.models.advice_creation_response import AdviceCreationResponse
from form3publicapi.models.advice_details_response import AdviceDetailsResponse
from form3publicapi.models.advice_submission_creation_response import AdviceSubmissionCreationResponse
from form3publicapi.models.advice_submission_details_response import AdviceSubmissionDetailsResponse
from form3publicapi.models.recall_creation_response import RecallCreationResponse
from form3publicapi.models.recall_details_response import RecallDetailsResponse
from form3publicapi.models.recall_admission_details_response import RecallAdmissionDetailsResponse
from form3publicapi.models.recall_decision_creation_response import RecallDecisionCreationResponse
from form3publicapi.models.recall_decision_details_response import RecallDecisionDetailsResponse
from form3publicapi.models.recall_decision_admission_details_response import RecallDecisionAdmissionDetailsResponse
from form3publicapi.models.recall_decision_submission_creation_response import RecallDecisionSubmissionCreationResponse
from form3publicapi.models.recall_decision_submission_details_response import RecallDecisionSubmissionDetailsResponse
from form3publicapi.models.recall_reversal_details_response import RecallReversalDetailsResponse
from form3publicapi.models.recall_reversal_admission_details_response import RecallReversalAdmissionDetailsResponse
from form3publicapi.models.recall_submission_creation_response import RecallSubmissionCreationResponse
from form3publicapi.models.recall_submission_details_response import RecallSubmissionDetailsResponse
from form3publicapi.models.return_creation_response import ReturnCreationResponse
from form3publicapi.models.return_details_response import ReturnDetailsResponse
from form3publicapi.models.return_admission_fetch_response import ReturnAdmissionFetchResponse
from form3publicapi.models.return_reversal_creation_response import ReturnReversalCreationResponse
from form3publicapi.models.return_reversal_details_response import ReturnReversalDetailsResponse
from form3publicapi.models.return_reversal_admission_details_response import ReturnReversalAdmissionDetailsResponse
from form3publicapi.models.return_submission_creation_response import ReturnSubmissionCreationResponse
from form3publicapi.models.return_submission_details_response import ReturnSubmissionDetailsResponse
from form3publicapi.models.reversal_creation_response import ReversalCreationResponse
from form3publicapi.models.reversal_details_response import ReversalDetailsResponse
from form3publicapi.models.reversal_admission_details_response import ReversalAdmissionDetailsResponse
from form3publicapi.models.reversal_submission_creation_response import ReversalSubmissionCreationResponse
from form3publicapi.models.reversal_submission_details_response import ReversalSubmissionDetailsResponse
from form3publicapi.models.payment_submission_creation_response import PaymentSubmissionCreationResponse
from form3publicapi.models.payment_submission_details_response import PaymentSubmissionDetailsResponse
from form3publicapi.models.payment_submission_task_details_response import PaymentSubmissionTaskDetailsResponse
from form3publicapi.models.return_submission_task_details_response import ReturnSubmissionTaskDetailsResponse
from form3publicapi.exceptions.api_error_exception import ApiErrorException


class PaymentsController(BaseController):

    """A Controller to access Endpoints in the form3publicapi API."""
    def __init__(self, config):
        super(PaymentsController, self).__init__(config)

    def list_positions(self):
        """Does a GET request to /organisation/positions.

        List Positions

        Returns:
            PositionDetailsListResponse: Response from the API. List of
                position details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/organisation/positions')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PositionDetailsListResponse.from_dictionary)
        ).execute()

    def list_payments(self,
                      page_number=None,
                      page_size=None,
                      page_before=None,
                      page_after=None,
                      filter_organisation_id=None,
                      filter_debtor_party_account_number=None,
                      filter_debtor_party_account_name=None,
                      filter_debtor_party_bank_id=None,
                      filter_beneficiary_party_account_number=None,
                      filter_beneficiary_party_account_name=None,
                      filter_beneficiary_party_bank_id=None,
                      filter_currency=None,
                      filter_end_to_end_reference=None,
                      filter_return_unique_scheme_id=None,
                      filter_scheme_transaction_id=None,
                      filter_payment_scheme=None,
                      filter_payment_type=None,
                      filter_processing_date_from=None,
                      filter_processing_date_to=None,
                      filter_unique_scheme_id=None,
                      filter_amount=None,
                      filter_reference=None,
                      filter_route=None,
                      filter_submission_submission_date_from=None,
                      filter_submission_submission_date_to=None,
                      filter_submission_status=None,
                      filter_submission_scheme_status_code=None,
                      filter_return_submission_submission_date_from=None,
                      filter_return_submission_submission_date_to=None,
                      filter_return_submission_status=None,
                      filter_admission_admission_date_from=None,
                      filter_admission_admission_date_to=None,
                      filter_admission_status=None,
                      filter_admission_scheme_status_code=None,
                      filter_relationships=None,
                      filter_not_relationships=None):
        """Does a GET request to /transaction/payments.

        List payments

        Args:
            page_number (str, optional): Which page to select
            page_size (int, optional): Number of items to select
            page_before (str, optional): Cursor for previous page (this is a
                base64-encoded UUID continuation token returned from the
                application and should not be manually generated, unless
                requesting the last page, where the value should be set to
                "end").
            page_after (str, optional): Cursor for next page (this is a
                base64-encoded UUID continuation token returned from the
                application and should not be manually generated, unless
                requesting the first page, where the value should be set to
                "start").
            filter_organisation_id (List[uuid|str], optional): Filter by
                organisation id
            filter_debtor_party_account_number (str, optional): TODO: type
                description here.
            filter_debtor_party_account_name (str, optional): TODO: type
                description here.
            filter_debtor_party_bank_id (str, optional): TODO: type
                description here.
            filter_beneficiary_party_account_number (str, optional): TODO:
                type description here.
            filter_beneficiary_party_account_name (str, optional): TODO: type
                description here.
            filter_beneficiary_party_bank_id (str, optional): TODO: type
                description here.
            filter_currency (str, optional): TODO: type description here.
            filter_end_to_end_reference (str, optional): TODO: type
                description here.
            filter_return_unique_scheme_id (str, optional): TODO: type
                description here.
            filter_scheme_transaction_id (str, optional): TODO: type
                description here.
            filter_payment_scheme (str, optional): TODO: type description
                here.
            filter_payment_type (str, optional): TODO: type description here.
            filter_processing_date_from (date, optional): TODO: type
                description here.
            filter_processing_date_to (date, optional): TODO: type description
                here.
            filter_unique_scheme_id (str, optional): TODO: type description
                here.
            filter_amount (str, optional): TODO: type description here.
            filter_reference (str, optional): TODO: type description here.
            filter_route (str, optional): TODO: type description here.
            filter_submission_submission_date_from (datetime, optional): TODO:
                type description here.
            filter_submission_submission_date_to (datetime, optional): TODO:
                type description here.
            filter_submission_status (str, optional): Filter by submission
                status
            filter_submission_scheme_status_code (str, optional): Filter by
                submission scheme status code
            filter_return_submission_submission_date_from (datetime,
                optional): TODO: type description here.
            filter_return_submission_submission_date_to (datetime, optional):
                TODO: type description here.
            filter_return_submission_status (str, optional): Filter by return
                submission status
            filter_admission_admission_date_from (datetime, optional): TODO:
                type description here.
            filter_admission_admission_date_to (datetime, optional): TODO:
                type description here.
            filter_admission_status (str, optional): Filter by admission
                status
            filter_admission_scheme_status_code (str, optional): Filter by
                admission scheme status code
            filter_relationships (List[FilterRelationships1Enum], optional):
                Filter for payments containing all of the requested
                relationships
            filter_not_relationships (List[FilterNotRelationships1Enum],
                optional): Filter for payments containing none of the
                requested relationships

        Returns:
            PaymentDetailsListResponse: Response from the API. List of payment
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page[number]')
                         .value(page_number))
            .query_param(Parameter()
                         .key('page[size]')
                         .value(page_size))
            .query_param(Parameter()
                         .key('page[before]')
                         .value(page_before))
            .query_param(Parameter()
                         .key('page[after]')
                         .value(page_after))
            .query_param(Parameter()
                         .key('filter[organisation_id]')
                         .value(filter_organisation_id))
            .query_param(Parameter()
                         .key('filter[debtor_party.account_number]')
                         .value(filter_debtor_party_account_number))
            .query_param(Parameter()
                         .key('filter[debtor_party.account_name]')
                         .value(filter_debtor_party_account_name))
            .query_param(Parameter()
                         .key('filter[debtor_party.bank_id]')
                         .value(filter_debtor_party_bank_id))
            .query_param(Parameter()
                         .key('filter[beneficiary_party.account_number]')
                         .value(filter_beneficiary_party_account_number))
            .query_param(Parameter()
                         .key('filter[beneficiary_party.account_name]')
                         .value(filter_beneficiary_party_account_name))
            .query_param(Parameter()
                         .key('filter[beneficiary_party.bank_id]')
                         .value(filter_beneficiary_party_bank_id))
            .query_param(Parameter()
                         .key('filter[currency]')
                         .value(filter_currency))
            .query_param(Parameter()
                         .key('filter[end_to_end_reference]')
                         .value(filter_end_to_end_reference))
            .query_param(Parameter()
                         .key('filter[return.unique_scheme_id]')
                         .value(filter_return_unique_scheme_id))
            .query_param(Parameter()
                         .key('filter[scheme_transaction_id]')
                         .value(filter_scheme_transaction_id))
            .query_param(Parameter()
                         .key('filter[payment_scheme]')
                         .value(filter_payment_scheme))
            .query_param(Parameter()
                         .key('filter[payment_type]')
                         .value(filter_payment_type))
            .query_param(Parameter()
                         .key('filter[processing_date_from]')
                         .value(filter_processing_date_from))
            .query_param(Parameter()
                         .key('filter[processing_date_to]')
                         .value(filter_processing_date_to))
            .query_param(Parameter()
                         .key('filter[unique_scheme_id]')
                         .value(filter_unique_scheme_id))
            .query_param(Parameter()
                         .key('filter[amount]')
                         .value(filter_amount))
            .query_param(Parameter()
                         .key('filter[reference]')
                         .value(filter_reference))
            .query_param(Parameter()
                         .key('filter[route]')
                         .value(filter_route))
            .query_param(Parameter()
                         .key('filter[submission.submission_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_submission_submission_date_from)))
            .query_param(Parameter()
                         .key('filter[submission.submission_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_submission_submission_date_to)))
            .query_param(Parameter()
                         .key('filter[submission.status]')
                         .value(filter_submission_status))
            .query_param(Parameter()
                         .key('filter[submission.scheme_status_code]')
                         .value(filter_submission_scheme_status_code))
            .query_param(Parameter()
                         .key('filter[return_submission.submission_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_return_submission_submission_date_from)))
            .query_param(Parameter()
                         .key('filter[return_submission.submission_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_return_submission_submission_date_to)))
            .query_param(Parameter()
                         .key('filter[return_submission.status]')
                         .value(filter_return_submission_status))
            .query_param(Parameter()
                         .key('filter[admission.admission_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_admission_admission_date_from)))
            .query_param(Parameter()
                         .key('filter[admission.admission_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_admission_admission_date_to)))
            .query_param(Parameter()
                         .key('filter[admission.status]')
                         .value(filter_admission_status))
            .query_param(Parameter()
                         .key('filter[admission.scheme_status_code]')
                         .value(filter_admission_scheme_status_code))
            .query_param(Parameter()
                         .key('filter[relationships]')
                         .value(filter_relationships))
            .query_param(Parameter()
                         .key('filter[not_relationships]')
                         .value(filter_not_relationships))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PaymentDetailsListResponse.from_dictionary)
        ).execute()

    def create_payment(self,
                       payment_creation_request=None):
        """Does a POST request to /transaction/payments.

        Create payment

        Args:
            payment_creation_request (PaymentCreation, optional): TODO: type
                description here.

        Returns:
            PaymentCreationResponse: Response from the API. Payment creation
                response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(payment_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PaymentCreationResponse.from_dictionary)
            .local_error('400', 'Payment creation error', ApiErrorException)
        ).execute()

    def fetch_payment(self,
                      id):
        """Does a GET request to /transaction/payments/{id}.

        Fetch payment

        Args:
            id (uuid|str): Payment Id

        Returns:
            PaymentDetailsResponse: Response from the API. Payment details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PaymentDetailsResponse.from_dictionary)
        ).execute()

    def fetch_admission(self,
                        id,
                        admission_id):
        """Does a GET request to /transaction/payments/{id}/admissions/{admissionId}.

        Fetch admission

        Args:
            id (uuid|str): Payment Id
            admission_id (uuid|str): Admission Id

        Returns:
            PaymentAdmissionDetailsResponse: Response from the API. Admission
                details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PaymentAdmissionDetailsResponse.from_dictionary)
        ).execute()

    def list_tasks(self,
                   id,
                   admission_id):
        """Does a GET request to /transaction/payments/{id}/admissions/{admissionId}/tasks.

        List tasks

        Args:
            id (uuid|str): Payment Id
            admission_id (uuid|str): Admission Id

        Returns:
            PaymentAdmissionTaskListResponse: Response from the API. List of
                Task Details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/admissions/{admissionId}/tasks')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PaymentAdmissionTaskListResponse.from_dictionary)
        ).execute()

    def get_payment_admission_task_by_id(self,
                                         id,
                                         admission_id,
                                         task_id):
        """Does a GET request to /transaction/payments/{id}/admissions/{admissionId}/tasks/{taskId}.

        Get Payment Admission Task By ID

        Args:
            id (uuid|str): Payment Id
            admission_id (uuid|str): Admission Id
            task_id (uuid|str): Payment Admission Task Id

        Returns:
            PaymentAdmissionTaskDetailsResponse: Response from the API.
                Payment Admission Task Details details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/admissions/{admissionId}/tasks/{taskId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('taskId')
                            .value(task_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PaymentAdmissionTaskDetailsResponse.from_dictionary)
        ).execute()

    def patch_payment_admission_task(self,
                                     id,
                                     admission_id,
                                     task_id,
                                     payment_admission_task_patch_request=None):
        """Does a PATCH request to /transaction/payments/{id}/admissions/{admissionId}/tasks/{taskId}.

        Patch Payment Admission Task

        Args:
            id (uuid|str): Payment Id
            admission_id (uuid|str): Admission Id
            task_id (uuid|str): Payment Admission Task Id
            payment_admission_task_patch_request
                (PaymentAdmissionTaskAmendment, optional): TODO: type
                description here.

        Returns:
            PaymentAdmissionTaskDetailsResponse: Response from the API.
                Payment Admission Task update response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/admissions/{admissionId}/tasks/{taskId}')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('taskId')
                            .value(task_id)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(payment_admission_task_patch_request))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PaymentAdmissionTaskDetailsResponse.from_dictionary)
            .local_error('400', 'Error', ApiErrorException)
            .local_error('409', 'Conflict', ApiErrorException)
        ).execute()

    def create_advice(self,
                      id,
                      advice_creation_request=None):
        """Does a POST request to /transaction/payments/{id}/advices.

        Create advice

        Args:
            id (uuid|str): Payment Id
            advice_creation_request (AdviceCreation, optional): TODO: type
                description here.

        Returns:
            AdviceCreationResponse: Response from the API. Advice creation
                response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/advices')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(advice_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AdviceCreationResponse.from_dictionary)
            .local_error('400', 'Advice creation error', ApiErrorException)
        ).execute()

    def fetch_advice(self,
                     id,
                     advice_id):
        """Does a GET request to /transaction/payments/{id}/advices/{adviceId}.

        Fetch advice

        Args:
            id (uuid|str): Payment Id
            advice_id (uuid|str): Advice Id

        Returns:
            AdviceDetailsResponse: Response from the API. Advice details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/advices/{adviceId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('adviceId')
                            .value(advice_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AdviceDetailsResponse.from_dictionary)
        ).execute()

    def create_advice_submission(self,
                                 id,
                                 advice_id,
                                 advice_submission_creation_request=None):
        """Does a POST request to /transaction/payments/{id}/advices/{adviceId}/submissions.

        create advice submission

        Args:
            id (uuid|str): Payment Id
            advice_id (uuid|str): Advice Id
            advice_submission_creation_request (AdviceSubmissionCreation,
                optional): TODO: type description here.

        Returns:
            AdviceSubmissionCreationResponse: Response from the API. Advice
                submission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/advices/{adviceId}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('adviceId')
                            .value(advice_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(advice_submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AdviceSubmissionCreationResponse.from_dictionary)
            .local_error('400', 'Advice submission creation error', ApiErrorException)
        ).execute()

    def fetch_advice_submission(self,
                                id,
                                advice_id,
                                submission_id):
        """Does a GET request to /transaction/payments/{id}/advices/{adviceId}/submissions/{submissionId}.

        Fetch advice submission

        Args:
            id (uuid|str): Payment Id
            advice_id (uuid|str): Advice Id
            submission_id (uuid|str): Submission Id

        Returns:
            AdviceSubmissionDetailsResponse: Response from the API. Advice
                submission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/advices/{adviceId}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('adviceId')
                            .value(advice_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AdviceSubmissionDetailsResponse.from_dictionary)
        ).execute()

    def create_recall(self,
                      id,
                      recall_creation_request=None):
        """Does a POST request to /transaction/payments/{id}/recalls.

        Create recall

        Args:
            id (uuid|str): Payment Id
            recall_creation_request (RecallCreation, optional): TODO: type
                description here.

        Returns:
            RecallCreationResponse: Response from the API. Recall creation
                response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/recalls')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(recall_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RecallCreationResponse.from_dictionary)
            .local_error('400', 'Recall creation error', ApiErrorException)
        ).execute()

    def fetch_recall(self,
                     id,
                     recall_id):
        """Does a GET request to /transaction/payments/{id}/recalls/{recallId}.

        Fetch recall

        Args:
            id (uuid|str): Payment Id
            recall_id (uuid|str): Recall Id

        Returns:
            RecallDetailsResponse: Response from the API. Recall details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/recalls/{recallId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('recallId')
                            .value(recall_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RecallDetailsResponse.from_dictionary)
        ).execute()

    def fetch_recall_admission(self,
                               id,
                               recall_id,
                               admission_id):
        """Does a GET request to /transaction/payments/{id}/recalls/{recallId}/admissions/{admissionId}.

        Fetch recall admission

        Args:
            id (uuid|str): Payment Id
            recall_id (uuid|str): Recall Id
            admission_id (uuid|str): Admission Id

        Returns:
            RecallAdmissionDetailsResponse: Response from the API. Recall
                admission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/recalls/{recallId}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('recallId')
                            .value(recall_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RecallAdmissionDetailsResponse.from_dictionary)
        ).execute()

    def create_recall_decision(self,
                               id,
                               recall_id,
                               recall_decision_creation_request=None):
        """Does a POST request to /transaction/payments/{id}/recalls/{recallId}/decisions.

        Create recall decision

        Args:
            id (uuid|str): Payment Id
            recall_id (uuid|str): Recall Id
            recall_decision_creation_request (RecallDecisionCreation,
                optional): TODO: type description here.

        Returns:
            RecallDecisionCreationResponse: Response from the API. Recall
                decision creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/recalls/{recallId}/decisions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('recallId')
                            .value(recall_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(recall_decision_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RecallDecisionCreationResponse.from_dictionary)
            .local_error('400', 'Recall decision creation error', ApiErrorException)
        ).execute()

    def fetch_recall_decision(self,
                              id,
                              recall_id,
                              decision_id):
        """Does a GET request to /transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}.

        Fetch recall decision

        Args:
            id (uuid|str): Payment Id
            recall_id (uuid|str): Recall Id
            decision_id (uuid|str): Decision Id

        Returns:
            RecallDecisionDetailsResponse: Response from the API. Recall
                decision details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('recallId')
                            .value(recall_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('decisionId')
                            .value(decision_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RecallDecisionDetailsResponse.from_dictionary)
        ).execute()

    def fetch_recall_decision_admission(self,
                                        id,
                                        recall_id,
                                        decision_id,
                                        admission_id):
        """Does a GET request to /transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}/admissions/{admissionId}.

        Fetch recall decision admission

        Args:
            id (uuid|str): Payment Id
            recall_id (uuid|str): Recall Id
            decision_id (uuid|str): Decision Id
            admission_id (uuid|str): Admission Id

        Returns:
            RecallDecisionAdmissionDetailsResponse: Response from the API.
                Recall decision admission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('recallId')
                            .value(recall_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('decisionId')
                            .value(decision_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RecallDecisionAdmissionDetailsResponse.from_dictionary)
        ).execute()

    def create_recall_decision_submission(self,
                                          id,
                                          recall_id,
                                          decision_id,
                                          recall_decision_submission_creation_request=None):
        """Does a POST request to /transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}/submissions.

        create recall decision submission

        Args:
            id (uuid|str): Payment Id
            recall_id (uuid|str): Recall Id
            decision_id (uuid|str): Decision Id
            recall_decision_submission_creation_request
                (RecallDecisionSubmissionCreation, optional): TODO: type
                description here.

        Returns:
            RecallDecisionSubmissionCreationResponse: Response from the API.
                Recall decision submission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('recallId')
                            .value(recall_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('decisionId')
                            .value(decision_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(recall_decision_submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RecallDecisionSubmissionCreationResponse.from_dictionary)
            .local_error('400', 'Recall decision submission creation error', ApiErrorException)
        ).execute()

    def fetch_recall_decision_submission(self,
                                         id,
                                         recall_id,
                                         decision_id,
                                         submission_id):
        """Does a GET request to /transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}/submissions/{submissionId}.

        Fetch recall decision submission

        Args:
            id (uuid|str): Payment Id
            recall_id (uuid|str): Recall Id
            decision_id (uuid|str): Decision Id
            submission_id (uuid|str): Submission Id

        Returns:
            RecallDecisionSubmissionDetailsResponse: Response from the API.
                Recall decision submission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('recallId')
                            .value(recall_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('decisionId')
                            .value(decision_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RecallDecisionSubmissionDetailsResponse.from_dictionary)
        ).execute()

    def fetch_recall_reversal(self,
                              id,
                              recall_id,
                              reversal_id):
        """Does a GET request to /transaction/payments/{id}/recalls/{recallId}/reversals/{reversalId}.

        Fetch recall reversal

        Args:
            id (uuid|str): Payment Id
            recall_id (uuid|str): Recall Id
            reversal_id (uuid|str): Reversal Id

        Returns:
            RecallReversalDetailsResponse: Response from the API. Recall
                Reversal details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/recalls/{recallId}/reversals/{reversalId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('recallId')
                            .value(recall_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RecallReversalDetailsResponse.from_dictionary)
        ).execute()

    def fetch_recall_reversal_admission(self,
                                        id,
                                        recall_id,
                                        reversal_id,
                                        admission_id):
        """Does a GET request to /transaction/payments/{id}/recalls/{recallId}/reversals/{reversalId}/admissions/{admissionId}.

        Fetch recall reversal admission

        Args:
            id (uuid|str): Payment Id
            recall_id (uuid|str): Recall Id
            reversal_id (uuid|str): Reversal Id
            admission_id (uuid|str): Admission Id

        Returns:
            RecallReversalAdmissionDetailsResponse: Response from the API.
                Reversal admission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/recalls/{recallId}/reversals/{reversalId}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('recallId')
                            .value(recall_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RecallReversalAdmissionDetailsResponse.from_dictionary)
        ).execute()

    def create_recall_submission(self,
                                 id,
                                 recall_id,
                                 recall_submission_creation_request=None):
        """Does a POST request to /transaction/payments/{id}/recalls/{recallId}/submissions.

        create recall submission

        Args:
            id (uuid|str): Payment Id
            recall_id (uuid|str): Recall Id
            recall_submission_creation_request (RecallSubmissionCreation,
                optional): TODO: type description here.

        Returns:
            RecallSubmissionCreationResponse: Response from the API. Recall
                submission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/recalls/{recallId}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('recallId')
                            .value(recall_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(recall_submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RecallSubmissionCreationResponse.from_dictionary)
            .local_error('400', 'Recall submission creation error', ApiErrorException)
        ).execute()

    def fetch_recall_submission(self,
                                id,
                                recall_id,
                                submission_id):
        """Does a GET request to /transaction/payments/{id}/recalls/{recallId}/submissions/{submissionId}.

        Fetch recall submission

        Args:
            id (uuid|str): Payment Id
            recall_id (uuid|str): Recall Id
            submission_id (uuid|str): Submission Id

        Returns:
            RecallSubmissionDetailsResponse: Response from the API. Recall
                submission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/recalls/{recallId}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('recallId')
                            .value(recall_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RecallSubmissionDetailsResponse.from_dictionary)
        ).execute()

    def create_return(self,
                      id,
                      return_creation_request=None):
        """Does a POST request to /transaction/payments/{id}/returns.

        Create return

        Args:
            id (uuid|str): Payment Id
            return_creation_request (ReturnCreation, optional): TODO: type
                description here.

        Returns:
            ReturnCreationResponse: Response from the API. Return creation
                response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/returns')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(return_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnCreationResponse.from_dictionary)
            .local_error('400', 'Return creation error', ApiErrorException)
        ).execute()

    def fetch_return(self,
                     id,
                     return_id):
        """Does a GET request to /transaction/payments/{id}/returns/{returnId}.

        Fetch return

        Args:
            id (uuid|str): Payment Id
            return_id (uuid|str): Return Id

        Returns:
            ReturnDetailsResponse: Response from the API. Return details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/returns/{returnId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnDetailsResponse.from_dictionary)
        ).execute()

    def fetch_return_admission(self,
                               id,
                               return_id,
                               admission_id):
        """Does a GET request to /transaction/payments/{id}/returns/{returnId}/admissions/{admissionId}.

        Fetch return admission

        Args:
            id (uuid|str): Payment Id
            return_id (uuid|str): Return Id
            admission_id (uuid|str): Admission Id

        Returns:
            ReturnAdmissionFetchResponse: Response from the API. Return
                admission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/returns/{returnId}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnAdmissionFetchResponse.from_dictionary)
        ).execute()

    def create_return_reversal(self,
                               id,
                               return_id,
                               return_reversal_creation_request=None):
        """Does a POST request to /transaction/payments/{id}/returns/{returnId}/reversals.

        Create return reversal

        Args:
            id (uuid|str): Payment Id
            return_id (uuid|str): Return Id
            return_reversal_creation_request (ReturnReversalCreation,
                optional): TODO: type description here.

        Returns:
            ReturnReversalCreationResponse: Response from the API. Reversal
                creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/returns/{returnId}/reversals')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(return_reversal_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnReversalCreationResponse.from_dictionary)
            .local_error('400', 'Reversal creation error', ApiErrorException)
        ).execute()

    def fetch_return_reversal(self,
                              id,
                              return_id,
                              reversal_id):
        """Does a GET request to /transaction/payments/{id}/returns/{returnId}/reversals/{reversalId}.

        Fetch return reversal

        Args:
            id (uuid|str): Payment Id
            return_id (uuid|str): Return Id
            reversal_id (uuid|str): Reversal Id

        Returns:
            ReturnReversalDetailsResponse: Response from the API. Return
                reversal details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/returns/{returnId}/reversals/{reversalId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnReversalDetailsResponse.from_dictionary)
        ).execute()

    def fetch_return_reversal_admission(self,
                                        id,
                                        return_id,
                                        reversal_id,
                                        admission_id):
        """Does a GET request to /transaction/payments/{id}/returns/{returnId}/reversals/{reversalId}/admissions/{admissionId}.

        Fetch return reversal admission

        Args:
            id (uuid|str): Payment Id
            return_id (uuid|str): Return Id
            reversal_id (uuid|str): Reversal Id
            admission_id (uuid|str): Admission Id

        Returns:
            ReturnReversalAdmissionDetailsResponse: Response from the API.
                Return reversal admission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/returns/{returnId}/reversals/{reversalId}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnReversalAdmissionDetailsResponse.from_dictionary)
        ).execute()

    def create_return_submission(self,
                                 id,
                                 return_id,
                                 return_submission_creation_request=None):
        """Does a POST request to /transaction/payments/{id}/returns/{returnId}/submissions.

        create return submission

        Args:
            id (uuid|str): Payment Id
            return_id (uuid|str): Return Id
            return_submission_creation_request (ReturnSubmissionCreation,
                optional): TODO: type description here.

        Returns:
            ReturnSubmissionCreationResponse: Response from the API. Return
                submission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/returns/{returnId}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(return_submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnSubmissionCreationResponse.from_dictionary)
            .local_error('400', 'Return submission creation error', ApiErrorException)
        ).execute()

    def fetch_return_submission(self,
                                id,
                                return_id,
                                submission_id):
        """Does a GET request to /transaction/payments/{id}/returns/{returnId}/submissions/{submissionId}.

        Fetch return submission

        Args:
            id (uuid|str): Payment Id
            return_id (uuid|str): Return Id
            submission_id (uuid|str): Submission Id

        Returns:
            ReturnSubmissionDetailsResponse: Response from the API. Return
                submission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/returns/{returnId}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnSubmissionDetailsResponse.from_dictionary)
        ).execute()

    def create_reversal(self,
                        id,
                        reversal_creation_request=None):
        """Does a POST request to /transaction/payments/{id}/reversals.

        Create reversal

        Args:
            id (uuid|str): Payment Id
            reversal_creation_request (ReversalCreation, optional): TODO: type
                description here.

        Returns:
            ReversalCreationResponse: Response from the API. Reversal creation
                response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/reversals')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(reversal_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReversalCreationResponse.from_dictionary)
            .local_error('400', 'Reversal creation error', ApiErrorException)
        ).execute()

    def fetch_reversal(self,
                       id,
                       reversal_id):
        """Does a GET request to /transaction/payments/{id}/reversals/{reversalId}.

        Fetch reversal

        Args:
            id (uuid|str): Payment Id
            reversal_id (uuid|str): Reversal Id

        Returns:
            ReversalDetailsResponse: Response from the API. Reversal details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/reversals/{reversalId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReversalDetailsResponse.from_dictionary)
        ).execute()

    def fetch_reversal_admission(self,
                                 id,
                                 reversal_id,
                                 admission_id):
        """Does a GET request to /transaction/payments/{id}/reversals/{reversalId}/admissions/{admissionId}.

        Fetch reversal admission

        Args:
            id (uuid|str): Payment Id
            reversal_id (uuid|str): Reversal Id
            admission_id (uuid|str): Admission Id

        Returns:
            ReversalAdmissionDetailsResponse: Response from the API. Reversal
                admission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/reversals/{reversalId}/admissions/{admissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('admissionId')
                            .value(admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReversalAdmissionDetailsResponse.from_dictionary)
        ).execute()

    def create_reversal_submission(self,
                                   id,
                                   reversal_id,
                                   reversal_submission_creation_request=None):
        """Does a POST request to /transaction/payments/{id}/reversals/{reversalId}/submissions.

        Create reversal submission

        Args:
            id (uuid|str): Payment Id
            reversal_id (uuid|str): Reversal Id
            reversal_submission_creation_request (ReversalSubmissionCreation,
                optional): TODO: type description here.

        Returns:
            ReversalSubmissionCreationResponse: Response from the API.
                Reversal submission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/reversals/{reversalId}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnc.api+json'))
            .body_param(Parameter()
                        .value(reversal_submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReversalSubmissionCreationResponse.from_dictionary)
            .local_error('400', 'Reversal submission creation error', ApiErrorException)
        ).execute()

    def fetch_reversal_submission(self,
                                  id,
                                  reversal_id,
                                  submission_id):
        """Does a GET request to /transaction/payments/{id}/reversals/{reversalId}/submissions/{submissionId}.

        Fetch reversal submission

        Args:
            id (uuid|str): Payment Id
            reversal_id (uuid|str): Reversal Id
            submission_id (uuid|str): Submission Id

        Returns:
            ReversalSubmissionDetailsResponse: Response from the API. Reversal
                submission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/reversals/{reversalId}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('reversalId')
                            .value(reversal_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReversalSubmissionDetailsResponse.from_dictionary)
        ).execute()

    def create_submission(self,
                          id,
                          submission_creation_request=None):
        """Does a POST request to /transaction/payments/{id}/submissions.

        create submission

        Args:
            id (uuid|str): Payment Id
            submission_creation_request (PaymentSubmissionCreation, optional):
                TODO: type description here.

        Returns:
            PaymentSubmissionCreationResponse: Response from the API.
                Submission creation response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(submission_creation_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PaymentSubmissionCreationResponse.from_dictionary)
            .local_error('400', 'Submission creation error', ApiErrorException)
        ).execute()

    def fetch_submission(self,
                         id,
                         submission_id):
        """Does a GET request to /transaction/payments/{id}/submissions/{submissionId}.

        Fetch submission

        Args:
            id (uuid|str): Payment Id
            submission_id (uuid|str): Submission Id

        Returns:
            PaymentSubmissionDetailsResponse: Response from the API.
                Submission details

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/submissions/{submissionId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PaymentSubmissionDetailsResponse.from_dictionary)
        ).execute()

    def patch_payment_submission_task(self,
                                      id,
                                      submission_id,
                                      task_id,
                                      payment_submission_task_patch_request=None):
        """Does a PATCH request to /transaction/payments/{id}/submissions/{submissionId}/tasks/{taskId}.

        Patch Payment Submission Task

        Args:
            id (uuid|str): Payment Id
            submission_id (uuid|str): Submission Id
            task_id (uuid|str): Payment Submission Task Id
            payment_submission_task_patch_request
                (PaymentSubmissionTaskAmendment, optional): TODO: type
                description here.

        Returns:
            PaymentSubmissionTaskDetailsResponse: Response from the API.
                Payment Submission Task update response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{id}/submissions/{submissionId}/tasks/{taskId}')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('submissionId')
                            .value(submission_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('taskId')
                            .value(task_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(payment_submission_task_patch_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PaymentSubmissionTaskDetailsResponse.from_dictionary)
            .local_error('400', 'Error', ApiErrorException)
            .local_error('409', 'Conflict', ApiErrorException)
        ).execute()

    def patch_return_submission_task(self,
                                     payment_id,
                                     return_id,
                                     return_submission_id,
                                     task_id,
                                     return_submission_task_patch_request=None):
        """Does a PATCH request to /transaction/payments/{paymentId}/returns/{returnId}/submissions/{returnSubmissionId}/tasks/{taskId}.

        Patch Return Submission Task

        Args:
            payment_id (uuid|str): Payment ID
            return_id (uuid|str): Return ID
            return_submission_id (uuid|str): Return Submission ID
            task_id (uuid|str): Return Submission Task Id
            return_submission_task_patch_request
                (ReturnSubmissionTaskAmendment, optional): TODO: type
                description here.

        Returns:
            ReturnSubmissionTaskDetailsResponse: Response from the API. Return
                Submission Task update response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transaction/payments/{paymentId}/returns/{returnId}/submissions/{returnSubmissionId}/tasks/{taskId}')
            .http_method(HttpMethodEnum.PATCH)
            .template_param(Parameter()
                            .key('paymentId')
                            .value(payment_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnId')
                            .value(return_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('returnSubmissionId')
                            .value(return_submission_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('taskId')
                            .value(task_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/vnd.api+json'))
            .body_param(Parameter()
                        .value(return_submission_task_patch_request))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnSubmissionTaskDetailsResponse.from_dictionary)
            .local_error('400', 'Error', ApiErrorException)
            .local_error('409', 'Conflict', ApiErrorException)
        ).execute()
