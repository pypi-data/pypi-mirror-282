# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from form3publicapi.api_helper import APIHelper
from form3publicapi.configuration import Server
from form3publicapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from form3publicapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from form3publicapi.models.signing_keys_list_response import SigningKeysListResponse
from form3publicapi.models.signing_keys_response import SigningKeysResponse
from form3publicapi.exceptions.api_error_exception import ApiErrorException


class PlatformsecurityapiController(BaseController):

    """A Controller to access Endpoints in the form3publicapi API."""
    def __init__(self, config):
        super(PlatformsecurityapiController, self).__init__(config)

    def get_a_list_of_signing_keys(self):
        """Does a GET request to /platform/security/signing_keys.

        Get a list of Signing Keys

        Returns:
            SigningKeysListResponse: Response from the API. keys returned

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/platform/security/signing_keys')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SigningKeysListResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('403', 'Action Forbidden', ApiErrorException)
            .local_error('502', 'Bad Gateway', ApiErrorException)
            .local_error('default', 'Unexpected Error', ApiErrorException)
        ).execute()

    def fetch_a_signing_key(self,
                            signingkey_id):
        """Does a GET request to /platform/security/signing_keys/{signingkey_id}.

        Fetch a Signing Key

        Args:
            signingkey_id (uuid|str): Signing Key ID

        Returns:
            SigningKeysResponse: Response from the API. signing key response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/platform/security/signing_keys/{signingkey_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('signingkey_id')
                            .value(signingkey_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SigningKeysResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('403', 'Action Forbidden', ApiErrorException)
            .local_error('404', 'Not Found', ApiErrorException)
            .local_error('502', 'Bad Gateway', ApiErrorException)
            .local_error('default', 'Unexpected Error', ApiErrorException)
        ).execute()
