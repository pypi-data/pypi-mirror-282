# -*- coding: utf-8 -*-

"""
form3publicapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from form3publicapi.api_helper import APIHelper
from form3publicapi.configuration import Server
from form3publicapi.utilities.file_wrapper import FileWrapper
from form3publicapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from form3publicapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from form3publicapi.models.list_scheme_files_response import ListSchemeFilesResponse
from form3publicapi.models.scheme_file_response import SchemeFileResponse
from form3publicapi.models.scheme_file_admission_response import SchemeFileAdmissionResponse
from form3publicapi.models.scheme_file_submission_response import SchemeFileSubmissionResponse
from form3publicapi.exceptions.api_error_exception import ApiErrorException


class SchemeFileAPIController(BaseController):

    """A Controller to access Endpoints in the form3publicapi API."""
    def __init__(self, config):
        super(SchemeFileAPIController, self).__init__(config)

    def list_scheme_files(self,
                          page_number=None,
                          page_size=100,
                          filter_organisation_id=None,
                          filter_payment_scheme=None,
                          filter_file_format=None,
                          filter_file_type=None,
                          filter_created_on_from=None,
                          filter_created_on_to=None,
                          filter_submission_status=None,
                          filter_submission_submission_date_from=None,
                          filter_submission_submission_date_to=None,
                          filter_admission_status=None,
                          filter_admission_admission_date_from=None,
                          filter_admission_admission_date_to=None):
        """Does a GET request to /files/schemefiles.

        List Scheme files

        Args:
            page_number (str, optional): Which page to select
            page_size (int, optional): Number of items to select
            filter_organisation_id (List[uuid|str], optional): Find all Scheme
                File resources with a given organisation ID
            filter_payment_scheme (str, optional): Find Scheme File resources
                by a certain scheme
            filter_file_format (str, optional): Find Scheme File resources by
                the format of the file
            filter_file_type (str, optional): Find Scheme File resources by
                the type of the file
            filter_created_on_from (date, optional): Find all Scheme File
                resources created from this date, in format YYYY-MM-DD
            filter_created_on_to (date, optional): Find all Scheme File
                resources created up to this date, in format YYYY-MM-DD
            filter_submission_status (str, optional): Find all Scheme File
                resources with a certain submission status
            filter_submission_submission_date_from (datetime, optional): Find
                all Scheme File resources submitted from and including this
                date/time
            filter_submission_submission_date_to (datetime, optional): Find
                all Scheme File resources submitted up to and included this
                date/time
            filter_admission_status (str, optional): Find all File resources
                with a certain admission status
            filter_admission_admission_date_from (datetime, optional): Find
                all File resources admitted from and including this date/time
            filter_admission_admission_date_to (datetime, optional): Find all
                File resources admitted up to and included this date/time

        Returns:
            ListSchemeFilesResponse: Response from the API. List of scheme
                files

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/files/schemefiles')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page[number]')
                         .value(page_number))
            .query_param(Parameter()
                         .key('page[size]')
                         .value(page_size))
            .query_param(Parameter()
                         .key('filter[organisation_id]')
                         .value(filter_organisation_id))
            .query_param(Parameter()
                         .key('filter[payment_scheme]')
                         .value(filter_payment_scheme))
            .query_param(Parameter()
                         .key('filter[file_format]')
                         .value(filter_file_format))
            .query_param(Parameter()
                         .key('filter[file_type]')
                         .value(filter_file_type))
            .query_param(Parameter()
                         .key('filter[created_on_from]')
                         .value(filter_created_on_from))
            .query_param(Parameter()
                         .key('filter[created_on_to]')
                         .value(filter_created_on_to))
            .query_param(Parameter()
                         .key('filter[submission.status]')
                         .value(filter_submission_status))
            .query_param(Parameter()
                         .key('filter[submission.submission_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_submission_submission_date_from)))
            .query_param(Parameter()
                         .key('filter[submission.submission_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_submission_submission_date_to)))
            .query_param(Parameter()
                         .key('filter[admission.status]')
                         .value(filter_admission_status))
            .query_param(Parameter()
                         .key('filter[admission.admission_date_from]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_admission_admission_date_from)))
            .query_param(Parameter()
                         .key('filter[admission.admission_date_to]')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, filter_admission_admission_date_to)))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ListSchemeFilesResponse.from_dictionary)
            .local_error('400', 'Reports bad request', ApiErrorException)
            .local_error('401', 'Unauthorized', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('500', 'Internal Server Error', ApiErrorException)
        ).execute()

    def create_scheme_file(self,
                           scheme_file_creation_request=None):
        """Does a POST request to /files/schemefiles.

        Creates a Scheme File

        Args:
            scheme_file_creation_request (SchemeFileCreation, optional): TODO:
                type description here.

        Returns:
            SchemeFileResponse: Response from the API. Scheme File Creation
                Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/files/schemefiles')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(scheme_file_creation_request))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SchemeFileResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('401', 'Unauthorized', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('409', 'Conflict', ApiErrorException)
            .local_error('500', 'Internal Server Error', ApiErrorException)
        ).execute()

    def get_scheme_file(self,
                        scheme_file_id,
                        accept=None):
        """Does a GET request to /files/schemefiles/{scheme_file_id}.

        Get Scheme file

        Args:
            scheme_file_id (uuid|str): Scheme File Id
            accept (str, optional): Acceptable Formats, possible values are
                "application/vnd.api+json" and "application/xml"

        Returns:
            SchemeFileResponse: Response from the API. Scheme File Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/files/schemefiles/{scheme_file_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('scheme_file_id')
                            .value(scheme_file_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SchemeFileResponse.from_dictionary)
            .local_error('401', 'Unauthorized', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('404', 'Not Found', ApiErrorException)
            .local_error('500', 'Internal Server Error', ApiErrorException)
        ).execute()

    def upload_scheme_file(self,
                           scheme_file_id,
                           x_form_3_upload_part,
                           payload):
        """Does a PUT request to /files/schemefiles/{scheme_file_id}.

        Put Scheme file chunk

        Args:
            scheme_file_id (uuid|str): Scheme File Id
            x_form_3_upload_part (str): Which part of the file we are
                uploading
            payload (typing.BinaryIO): TODO: type description here.

        Returns:
            SchemeFileResponse: Response from the API. Scheme File Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/files/schemefiles/{scheme_file_id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('scheme_file_id')
                            .value(scheme_file_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('X-Form3-Upload-Part')
                          .value(x_form_3_upload_part))
            .multipart_param(Parameter()
                             .key('payload')
                             .value(payload)
                             .default_content_type('application/octet-stream'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SchemeFileResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('401', 'Unauthorized', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('404', 'Scheme File Not Found', ApiErrorException)
            .local_error('409', 'Scheme File Conflict', ApiErrorException)
            .local_error('500', 'Internal Server Error', ApiErrorException)
        ).execute()

    def create_scheme_file_admission(self,
                                     scheme_file_id,
                                     scheme_file_admission_creation_request=None):
        """Does a POST request to /files/schemefiles/{scheme_file_id}/admissions.

        Creates a Scheme File Admission

        Args:
            scheme_file_id (uuid|str): Scheme File Id
            scheme_file_admission_creation_request
                (SchemeFileAdmissionCreation, optional): TODO: type
                description here.

        Returns:
            SchemeFileAdmissionResponse: Response from the API. Scheme File
                Admission Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/files/schemefiles/{scheme_file_id}/admissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('scheme_file_id')
                            .value(scheme_file_id)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(scheme_file_admission_creation_request))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SchemeFileAdmissionResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('401', 'Unauthorized', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('404', 'Not Found', ApiErrorException)
            .local_error('409', 'Scheme File Admission Conflict', ApiErrorException)
            .local_error('500', 'Internal Server Error', ApiErrorException)
        ).execute()

    def get_scheme_file_admission(self,
                                  scheme_file_id,
                                  scheme_file_admission_id):
        """Does a GET request to /files/schemefiles/{scheme_file_id}/admissions/{scheme_file_admission_id}.

        Fetch scheme file admission

        Args:
            scheme_file_id (uuid|str): Scheme File Id
            scheme_file_admission_id (uuid|str): Scheme File Admission Id

        Returns:
            SchemeFileAdmissionResponse: Response from the API. Scheme File
                Admission Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/files/schemefiles/{scheme_file_id}/admissions/{scheme_file_admission_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('scheme_file_id')
                            .value(scheme_file_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scheme_file_admission_id')
                            .value(scheme_file_admission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SchemeFileAdmissionResponse.from_dictionary)
            .local_error('401', 'Unauthorized', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('404', 'Not Found', ApiErrorException)
            .local_error('500', 'Internal Server Error', ApiErrorException)
        ).execute()

    def create_scheme_file_submission(self,
                                      scheme_file_id,
                                      scheme_file_submission_creation_request=None):
        """Does a POST request to /files/schemefiles/{scheme_file_id}/submissions.

        Creates a Scheme File Submission

        Args:
            scheme_file_id (uuid|str): Scheme File Id
            scheme_file_submission_creation_request
                (SchemeFileSubmissionCreation, optional): TODO: type
                description here.

        Returns:
            SchemeFileSubmissionResponse: Response from the API. Scheme File
                Submission Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/files/schemefiles/{scheme_file_id}/submissions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('scheme_file_id')
                            .value(scheme_file_id)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(scheme_file_submission_creation_request))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SchemeFileSubmissionResponse.from_dictionary)
            .local_error('400', 'Bad Request', ApiErrorException)
            .local_error('401', 'Unauthorized', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('404', 'Not Found', ApiErrorException)
            .local_error('409', 'Scheme File Submission Conflict', ApiErrorException)
            .local_error('500', 'Internal Server Error', ApiErrorException)
        ).execute()

    def get_scheme_file_submission(self,
                                   scheme_file_id,
                                   scheme_file_submission_id):
        """Does a GET request to /files/schemefiles/{scheme_file_id}/submissions/{scheme_file_submission_id}.

        Get Scheme file submission

        Args:
            scheme_file_id (uuid|str): Scheme File Id
            scheme_file_submission_id (uuid|str): Scheme File Submission Id

        Returns:
            SchemeFileSubmissionResponse: Response from the API. Scheme File
                Submission Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/files/schemefiles/{scheme_file_id}/submissions/{scheme_file_submission_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('scheme_file_id')
                            .value(scheme_file_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('scheme_file_submission_id')
                            .value(scheme_file_submission_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuth2'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SchemeFileSubmissionResponse.from_dictionary)
            .local_error('401', 'Unauthorized', ApiErrorException)
            .local_error('403', 'Forbidden', ApiErrorException)
            .local_error('404', 'Not Found', ApiErrorException)
            .local_error('500', 'Internal Server Error', ApiErrorException)
        ).execute()
