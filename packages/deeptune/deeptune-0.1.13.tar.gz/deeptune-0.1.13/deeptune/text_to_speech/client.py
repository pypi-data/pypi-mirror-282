# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from .types.generate_request_voice_settings import GenerateRequestVoiceSettings
from .types.generate_response import GenerateResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TextToSpeechClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def generate(
        self,
        voice_id: str,
        *,
        text: str,
        model_id: typing.Optional[str] = OMIT,
        voice_settings: typing.Optional[GenerateRequestVoiceSettings] = OMIT,
        seed: typing.Optional[int] = OMIT,
        previous_text: typing.Optional[str] = OMIT,
        next_text: typing.Optional[str] = OMIT,
        previous_request_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        next_request_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GenerateResponse:
        """
        Parameters
        ----------
        voice_id : str
            The ID of the voice to use

        text : str

        model_id : typing.Optional[str]

        voice_settings : typing.Optional[GenerateRequestVoiceSettings]

        seed : typing.Optional[int]

        previous_text : typing.Optional[str]

        next_text : typing.Optional[str]

        previous_request_ids : typing.Optional[typing.Sequence[str]]

        next_request_ids : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GenerateResponse
            Successful response

        Examples
        --------
        from deeptune.client import DeeptuneApi

        client = DeeptuneApi(
            xi_api_key="YOUR_XI_API_KEY",
            token="YOUR_TOKEN",
        )
        client.text_to_speech.generate(
            voice_id="voice_id",
            text="text",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/api/text-to-speech/{jsonable_encoder(voice_id)}",
            method="POST",
            json={
                "text": text,
                "model_id": model_id,
                "voice_settings": voice_settings,
                "seed": seed,
                "previous_text": previous_text,
                "next_text": next_text,
                "previous_request_ids": previous_request_ids,
                "next_request_ids": next_request_ids,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(GenerateResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTextToSpeechClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def generate(
        self,
        voice_id: str,
        *,
        text: str,
        model_id: typing.Optional[str] = OMIT,
        voice_settings: typing.Optional[GenerateRequestVoiceSettings] = OMIT,
        seed: typing.Optional[int] = OMIT,
        previous_text: typing.Optional[str] = OMIT,
        next_text: typing.Optional[str] = OMIT,
        previous_request_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        next_request_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GenerateResponse:
        """
        Parameters
        ----------
        voice_id : str
            The ID of the voice to use

        text : str

        model_id : typing.Optional[str]

        voice_settings : typing.Optional[GenerateRequestVoiceSettings]

        seed : typing.Optional[int]

        previous_text : typing.Optional[str]

        next_text : typing.Optional[str]

        previous_request_ids : typing.Optional[typing.Sequence[str]]

        next_request_ids : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GenerateResponse
            Successful response

        Examples
        --------
        from deeptune.client import AsyncDeeptuneApi

        client = AsyncDeeptuneApi(
            xi_api_key="YOUR_XI_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.text_to_speech.generate(
            voice_id="voice_id",
            text="text",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/api/text-to-speech/{jsonable_encoder(voice_id)}",
            method="POST",
            json={
                "text": text,
                "model_id": model_id,
                "voice_settings": voice_settings,
                "seed": seed,
                "previous_text": previous_text,
                "next_text": next_text,
                "previous_request_ids": previous_request_ids,
                "next_request_ids": next_request_ids,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(GenerateResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
