openapi: 3.0.2
info:
  title: Public Transit API
  version: 8.0.1
  description: |
    Public Transit is a set of three REST APIs that provides public transit
    routing information and public transit stations information available within
    an area or for a given station.
  termsOfService: http://developer.here.com/terms-conditions
  license:
    name: HERE Documentation License
    url: https://legal.here.com/en-gb/terms/documentation-license
  x-document-meta-data:
    copyright: "Â© 2022 HERE Europe B.V."
    document-id: d75c26ed-f4b2-40ba-bb6f-6814876baa40
    date-created: '2022-07-11T07:24:49+00:00'
servers:
- url: https://transit.hereapi.com/v8
  description: All Public Transit services, namely Routing, Next Departures, and Station
    Search.
security:
- Bearer: []
- ApiKey: []
paths:
  "/routes":
    get:
      operationId: getRoutes
      summary: Routes
      servers:
      - url: https://transit.router.hereapi.com/v8
        description: Public Transit Routing service only.
      - url: https://transit.hereapi.com/v8
        description: All Public Transit services, namely Routing, Next Departures,
          and Station Search.
      tags:
      - Routing
      description: |
        Lists public transit routes.
        The service supports several use cases as follows:

          * define routes based on arrival or departure times.
          * filter specific transit modes, such as rail and metro only.
          * plan routes hours or days in advance.
          * set a maximum distance for the walk to the nearest transit stop/station or the speed of the walk.
          * define how many changes or transfers the journey may include.
          * request turn-by-turn navigation.
          * request route polyline in order to view the route over a map.
      parameters:
      - "$ref": "#/components/parameters/origin"
      - "$ref": "#/components/parameters/destination"
      - "$ref": "#/components/parameters/lang"
      - "$ref": "#/components/parameters/units"
      - "$ref": "#/components/parameters/departureTime"
      - "$ref": "#/components/parameters/arrivalTime"
      - "$ref": "#/components/parameters/alternatives"
      - "$ref": "#/components/parameters/changes"
      - "$ref": "#/components/parameters/transitModes"
      - "$ref": "#/components/parameters/pedestrianSpeed"
      - "$ref": "#/components/parameters/pedestrianMaxDistance"
      - "$ref": "#/components/parameters/transitReturn"
      responses:
        200:
          description: API response in case of success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TransitRouteResponse"
          headers:
            X-Correlation-Id:
              "$ref": "#/components/headers/X-Correlation-Id"
        400:
          "$ref": "#/components/responses/400ErrorResponse"
        401:
          "$ref": "#/components/responses/401ErrorResponse"
        403:
          "$ref": "#/components/responses/403ErrorResponse"
        500:
          "$ref": "#/components/responses/500ErrorResponse"
        502:
          "$ref": "#/components/responses/502ErrorResponse"
        503:
          "$ref": "#/components/responses/503ErrorResponse"
        504:
          "$ref": "#/components/responses/504ErrorResponse"
  "/departures":
    get:
      operationId: getDepartures
      summary: Departures
      tags:
      - Next Departures
      description: |
        Lists public transit departures.
        Discovers subsequent departures using structured or topological queries.
        The service accepts two types of queries as shown in the table below:

        | Query | Parameter | Description |
        |-------|-----------|-------------|
        | Departures by IDs | `ids` | takes a comma-separated list of station/stop identifiers |
        | Departures by Location | `in` | takes a pair of coordinates to define the center and a radius to define the extent of a circular area where to search for departures |

        Select a query from `one of` the options above to visualize the request parameters.
      parameters:
      - "$ref": "#/components/parameters/boardOptions"
      - "$ref": "#/components/parameters/boardTime"
      - "$ref": "#/components/parameters/transitModes"
      - "$ref": "#/components/parameters/maxPerBoard"
      - "$ref": "#/components/parameters/maxPerTransport"
      - "$ref": "#/components/parameters/boardSort"
      - "$ref": "#/components/parameters/timespan"
      - "$ref": "#/components/parameters/lang"
      responses:
        200:
          description: API response in case of success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/StationBoardResponse"
          headers:
            X-Correlation-Id:
              "$ref": "#/components/headers/X-Correlation-Id"
        400:
          "$ref": "#/components/responses/400ErrorResponse"
        401:
          "$ref": "#/components/responses/401ErrorResponse"
        403:
          "$ref": "#/components/responses/403ErrorResponse"
        500:
          "$ref": "#/components/responses/500ErrorResponse"
        502:
          "$ref": "#/components/responses/502ErrorResponse"
        503:
          "$ref": "#/components/responses/503ErrorResponse"
        504:
          "$ref": "#/components/responses/504ErrorResponse"
  "/stations":
    get:
      operationId: getStations
      summary: Stations
      tags:
      - Station Search
      description: |
        Lists public transit stations.
        Discovers stations using structured or topological queries.
        The service accepts three types of queries as shown in the table below:

        | Query | Parameter | Description |
        |-------|-----------|-------------|
        | Stations by IDs | `ids` | Takes a comma-separated list of station/stop identifiers. |
        | Stations by location | `in` | Takes a pair of coordinates to define the center and a radius to define the extent of a circular area where to search for departures. |
        | Stations by name and location | `name` and `in` | Takes the station name or part of the name to search for. It is composed of one or more space-separated words and does not support stopwords. |

        Select a query from `one of` the options above to visualize the request parameters.
      parameters:
      - "$ref": "#/components/parameters/stationOptions"
      - "$ref": "#/components/parameters/placesReturn"
      responses:
        200:
          description: API response in case of success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/StationsInfoResponse"
          headers:
            X-Correlation-Id:
              "$ref": "#/components/headers/X-Correlation-Id"
        400:
          "$ref": "#/components/responses/400ErrorResponse"
        401:
          "$ref": "#/components/responses/401ErrorResponse"
        403:
          "$ref": "#/components/responses/403ErrorResponse"
        500:
          "$ref": "#/components/responses/500ErrorResponse"
        502:
          "$ref": "#/components/responses/502ErrorResponse"
        503:
          "$ref": "#/components/responses/503ErrorResponse"
        504:
          "$ref": "#/components/responses/504ErrorResponse"
  "/health":
    get:
      operationId: getHealth
      summary: Health
      tags:
      - Routing
      - Next Departures
      - Station Search
      description: Returns the health status of the service
      security: []
      responses:
        200:
          "$ref": "#/components/responses/HealthResponseOk"
        default:
          "$ref": "#/components/responses/HealthResponseFail"
  "/version":
    get:
      operationId: getVersion
      summary: Version
      tags:
      - Routing
      - Next Departures
      - Station Search
      description: Returns the version of the service
      security: []
      responses:
        200:
          "$ref": "#/components/responses/VersionResponseOk"
        500:
          "$ref": "#/components/responses/500ErrorResponse"
        502:
          "$ref": "#/components/responses/502ErrorResponse"
        503:
          "$ref": "#/components/responses/503ErrorResponse"
        504:
          "$ref": "#/components/responses/504ErrorResponse"
components:
  parameters:
    alternatives:
      name: alternatives
      description: Number of alternative routes to return aside from the optimal route.
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        maximum: 6
        default: 0
    arrivalTime:
      name: arrivalTime
      description: |
        Specifies the time of arrival as defined by either `date-time` or `full-date` `T` `partial-time` in `RFC 3339`, section 5.6 (for example, `2019-06-24T01:23:45`).
        The requested time is converted to the local time at destination. When the optional timezone offset is
        not specified, time is assumed to be local.
        All `Time` values in the response are returned in the timezone of each location.

        Note : The following features do not support the arrivalTime parameter:
        * EV Routing
        * Route Handle
        * Route Import
      in: query
      allowReserved: true
      required: false
      schema:
        "$ref": "#/components/schemas/Time"
    boardOptions:
      name: boardOptions
      description: Board options
      in: query
      schema:
        type: object
        oneOf:
        - "$ref": "#/components/schemas/BoardByIds"
        - "$ref": "#/components/schemas/BoardByLocation"
      style: form
      explode: true
    boardSort:
      name: sort
      description: |
        Define how the departures are sorted. By default, the departures are returned sorted by scheduled time.
        When `sort=transport`, the departures are sorted first by transport and then by scheduled time.

        * `sort=time`: means sorted by time.
        * `sort=transport`: means that we sort by `name`, `headsign`, `mode` and `time` in this order.
      in: query
      schema:
        type: string
        enum:
        - time
        - transport
        default: time
    boardTime:
      name: time
      description: |
        Specifies the time of earliest departure in `RFC 3339`, section 5.6 as defined by either `date-time` or `full-date` "T" `partial-time` (for example, `2019-06-24T01:23:45`).
        The requested time is converted to local time at each location. When the optional timezone offset is
        not specified, time is assumed to be local. If `time` is not specified, current time at departure place will be used.
        All `Time` values in the response are returned in the timezone of each location.
      in: query
      required: false
      schema:
        "$ref": "#/components/schemas/Time"
    changes:
      name: changes
      description: 'Maximum number of changes or transfers allowed in a route. Unlimited
        number of changes is permitted when not set.

'
      in: query
      schema:
        type: integer
        minimum: 0
        maximum: 6
    departureTime:
      name: departureTime
      description: |
        Specifies the time of departure as defined by either `date-time` or `full-date` `T` `partial-time` in `RFC 3339`, section 5.6 (for example, `2019-06-24T01:23:45`).
        The requested time is converted to the local time at origin. When the optional timezone offset is
        not specified, time is assumed to be local. If neither `departureTime` or `arrivalTime` are specified, current time at departure location will be used.
        All `Time` values in the response are returned in the timezone of each location.
      in: query
      allowReserved: true
      required: false
      schema:
        "$ref": "#/components/schemas/Time"
    destination:
      name: destination
      description: |+
        Trip destination WGS-84 compliant coordinates.

        Format: `{lat},{lng}[;placeName={name}]`

        The optional `placeName` parameter can be used to customize the
          name of the destination place and will affect the generated actions descriptions.

      in: query
      required: true
      schema:
        "$ref": "#/components/schemas/LocationString"
    lang:
      name: lang
      description: 'Specifies the preferred language of the response. The value should
        comply with the [IETF BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt).

'
      in: query
      schema:
        type: string
        default: en-US
    maxPerBoard:
      name: maxPerBoard
      description: The maximum number of subsequent departures per station board the
        response is to include.
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 5
    maxPerTransport:
      name: maxPerTransport
      description: 'The maximum number of subsequent departures per transport returned
        in the response. A transport is identified by its name, direction and mode.
        When not set, all departures are returned, otherwise the first `maxPerTransport`
        departures for each transport in chronological order are returned.

'
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 10
        nullable: true
        default:
    origin:
      name: origin
      description: |+
        Trip origin WGS-84 compliant coordinates.

        Format: `{lat},{lng}[;placeName={name}]`

        The optional `placeName` parameter can be used to customize
          the name of the origin place and will affect the generated actions descriptions.

      in: query
      required: true
      schema:
        "$ref": "#/components/schemas/LocationString"
    pedestrianMaxDistance:
      name: pedestrian[maxDistance]
      description: Maximum allowed walking distance in meters (e.g. when looking for
        nearest stations).
      in: query
      schema:
        type: integer
        minimum: 0
        maximum: 6000
        default: 2000
    pedestrianSpeed:
      name: pedestrian[speed]
      description: 'Walking speed in meters per second. Influences the duration of
        walking segments from origin to a station, from a station to destination and
        in-between the stations (e.g. if transfer is needed).

'
      in: query
      schema:
        "$ref": "#/components/schemas/PedestrianSpeed"
    placesReturn:
      name: return
      description: |
        Defines which place attributes are included.

         * `address` - The place's address.
         * `transport` - List of transports.
         * `accessPoints` - List of access points.
      in: query
      schema:
        "$ref": "#/components/schemas/PlacesReturn"
      style: form
      explode: false
    stationOptions:
      name: stationOptions
      description: Station filter
      in: query
      schema:
        type: object
        oneOf:
        - "$ref": "#/components/schemas/PlacesByIds"
        - "$ref": "#/components/schemas/PlacesByLocation"
        - "$ref": "#/components/schemas/PlacesByName"
      style: form
      explode: true
    timespan:
      name: timespan
      description: 'Limit the subsequent departures to the defined time window and
        starting from the time provided in the request. When not set, this filter
        is not applied and a maximum of 24 hours of departures can be returned. The
        filter will remove all departures outside the interval defined by time and
        time span.

'
      in: query
      schema:
        allOf:
        - "$ref": "#/components/schemas/Duration"
        - type: integer
          minimum: 1
          maximum: 1440
          default:
          nullable: true
    transitModes:
      name: modes
      description: |
        Transit mode filter used to determine which modes of transit to include in the response.
        By default, all supported transit modes are permitted.

        Supported modes: `highSpeedTrain` `intercityTrain` `interRegionalTrain` `regionalTrain` `cityTrain`
        `bus` `ferry` `subway` `lightRail` `privateBus` `inclined` `aerial` `busRapid` `monorail`
        `flight` `spaceship`

        This parameter also support an exclusion list: It's sufficient to specify each mode to exclude by prefixing it with `-`.
        Mixing of inclusive and exclusive transit modes is not allowed.

        examples:
          * `subway,bus`. Returns only subways and busses.
          * `-subway,-bus`. Returns all modes except subways and busses.
      in: query
      schema:
        "$ref": "#/components/schemas/TransitModesFilter"
      style: form
      explode: false
    transitReturn:
      name: return
      description: |
        Defines which section attributes are included.

         * `intermediate` - List of intermediate stops within a section of the route. If
           enabled, the response includes `intermediateStops` attribute. Each intermediate stop includes
           stop/station names, WGS-84 geocoordinates, and the departure times at the stops.
         * `fares` - List of fares/tickets to cover a section of the route.
         * `polyline` - Polyline for the route in
           [Flexible Polyline](https://github.com/heremaps/flexible-polyline/blob/master/README.md)
           Encoding.
         * `actions` - Actions (such as maneuvers or tasks) that must be taken to complete the section.
         * `travelSummary` - Include summary for the travel portion of the section.
         * `incidents` - Include a list of all incidents applicable to each section.
         * `bookingLinks` - Include a list of links to book a ride for a section of the route.
      in: query
      schema:
        type: array
        uniqueItems: true
        items:
          type: string
          enum:
          - intermediate
          - fares
          - polyline
          - actions
          - travelSummary
          - incidents
          - bookingLinks
      style: form
      explode: false
    units:
      name: units
      description: Units of measurement used, for example, in guidance instructions.
        The default is `metric`.
      in: query
      schema:
        "$ref": "#/components/schemas/Units"
  headers:
    X-Correlation-Id:
      description: Auto-generated id that univocally identifies the request.
      schema:
        type: string
      example: 4199533b-6290-41db-8d79-edf4f4019a74
  securitySchemes:
    ApiKey:
      type: apiKey
      in: query
      name: apiKey
      description: 'A key generated specifically to authenticate API requests. For
        more information on how to get an API key, see https://developer.here.com/documentation/identity-access-management/dev_guide/index.html.

'
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        A token obtained from a separate endpoint using client credentials and an OAuth 1.0a HMAC-SHA256 signed request.
        For more information on how to get a bearer token, see https://developer.here.com/documentation/identity-access-management/dev_guide/index.html.
  schemas:
    AccessAttributes:
      description: "Extensible enum: `open` `noThrough` `tollRoad` `...`  \n`AccessAttributes`
        is applied to a span of a route section and describes access flags of a street.\n\n*
        `open`: A part of the route that can be traversed.\n* `noThrough`: A part
        of the route that can only be traversed if origin, destination or any via
        waypoint is located there.\n* `tollRoad`: Access to this part of the route
        is restricted with a fee (or toll).\n\nAs it is possible that new access attributes
        are supported in the future, unknown access attributes should be ignored.\n"
      type: string
      x-extensible-enum:
      - open
      - noThrough
      - tollRoad
    Address:
      properties:
        countryCode:
          description: 3 letter ISO 3166-1 country code.
          type: string
          example: GER
        countryName:
          description: Name of the country where the place is located.
          type: string
          example: Germany
        state:
          description: Name of region or state where the place is located.
          type: string
          example: Berlin
        county:
          type: string
          example: Berlin
        city:
          description: Name of the city.
          type: string
          example: Berlin
        district:
          description: District name.
          type: string
          example: Mitte
        subdistrict:
          type: string
          example: Romantikkiez
        postalCode:
          description: Postal code.
          type: string
          example: '10115'
        street:
          description: Name of the street, square, boulevard, etc.
          type: string
          example: Invalidenstrasse
        houseNumber:
          description: Civic number.
          type: string
          example: '116'
    AttributionLinkType:
      description: |
        Attribution link type.

        * `disclaimer` - Page with further legal information from the agency.
        * `tariff` - Page with information on the tariff.
      type: string
      required:
      - type
      enum:
      - disclaimer
      - tariff
    AuthErrorResponseSchema:
      properties:
        error:
          type: string
          description: Human-readable error
        error_description:
          type: string
          description: Human-readable error description
    BaseNoticeDetail:
      properties:
        title:
          type: string
          description: Detail title
        cause:
          type: string
          description: Cause of the notice
        type:
          type: string
          description: |
            Detail type. Each type of detail might contain extra attributes.

            **NOTE:** The list of possible detail types may be extended in the future.
            The client application is expected to handle such a case gracefully.
      required:
      - type
    BoardByIds:
      title: Query departures by IDs
      properties:
        ids:
          description: 'Specifies a comma separated list of station IDs. A maximum
            of 50 station identifiers are allowed in a single query

'
          type: string
          maxLength: 1000
      required:
      - ids
    ChargingConnectorType:
      description: "Extensible enum: `iec62196Type1Combo` `iec62196Type2Combo` `chademo`
        `tesla` `...`  \nCurrently supported connector types are:\n* `iec62196Type1Combo`:
        \ Type 1 Combo connector, commonly called \"SAE J1772\"\n* `iec62196Type2Combo`:
        \ Type 2 Combo connector, commonly called \"Mennekes\"\n* `chademo`: CHAdeMO
        connector\n* `tesla`: Tesla connector\n"
      type: string
      x-extensible-enum:
      - iec62196Type1Combo
      - iec62196Type2Combo
      - chademo
      - tesla
    ChargingStationBrand:
      description: Information regarding the charging station brand
      properties:
        name:
          description: Charging station brand name
          type: string
        hrn:
          description: |
            Charging station brand unique ID.
            If specified in `ev[preferredBrands]` parameter
            then it would apply preference to adding stations of the given brand.

            **NOTE:** As of now it is generated as a brand name hash.
            It will be changed to HRN (HERE Resource Name) in the future.
          type: string
    ChargingSupplyType:
      description: "Extensible enum: `acSingle` `acThree` `dc` `...`  \nCurrently
        possible values are:\n\n* `acSingle` : Single phase Alternating Current supply\n*
        `acThree`: Three phase Alternating Current supply\n* `dc`: Direct Current
        supply\n"
      type: string
      x-extensible-enum:
      - acSingle
      - acThree
      - dc
    Color:
      type: string
      pattern: "#[0-9A-Fa-f]{6}"
      example: "#FF0000"
    CountryCode:
      description: ISO-3166-1 alpha-3 code
      type: string
      example: FRA
    DataVersion:
      description: Version of a specific data set
      properties:
        name:
          type: string
          description: Identifies a data set, for example, a HRN, or a service specific
            identifier
        version:
          type: string
          description: The current version of this data set
      required:
      - name
      - version
    DepartureDelay:
      description: The accumulated delay in seconds from the scheduled time of the
        event.
      type: integer
    DeparturePlatform:
      description: Platform name or number for the departure.
      type: string
    DepartureStatus:
      description: "Extensible enum: `scheduled` `cancelled` `additional` `replaced`
        `...`  \nStatus of the departure\n\n* `scheduled`: A trip that is running
        as planned in the schedule.\n* `cancelled`: A trip that existed in the schedule
        but was removed.\n* `additional`: An extra trip that was added in addition
        to a running schedule, for example, to respond to sudden passenger load.\n*
        `replaced`: A trip that was in the schedule but is removed and replaced with
        `additional` trip, for example, to replace a broken vehicle or handle detour.\n"
      type: string
      x-extensible-enum:
      - scheduled
      - cancelled
      - additional
      - replaced
      default: scheduled
    Distance:
      type: integer
      minimum: 0
      description: Distance in meters.
    Duration:
      type: integer
      description: Duration in seconds.
    ErrorResponse:
      description: Response in case of error
      properties:
        title:
          type: string
          description: Human-readable error description
          example: Input data failed validation
        status:
          type: integer
          description: HTTP status code
          example: 400
        code:
          type: string
          description: |
            Error code.

            All error codes start with "`E60`".
          example: E600101
        cause:
          type: string
          description: Human-readable explanation for the error
          example: The input data in question does not comply with validation rules
        action:
          type: string
          description: Human-readable description of the action that can be taken
            to correct the error
          example: Request a valid id
        correlationId:
          type: string
          description: Auto-generated id that univocally identifies the request
          example: 4199533b-6290-41db-8d79-edf4f4019a74
      required:
      - title
      - status
      - code
      - cause
      - action
      - correlationId
    FarePassValidityPeriod:
      description: Specifies a temporal validity period for a pass
      properties:
        period:
          description: "Extensible enum: `annual` `extendedAnnual` `minutes` `days`
            `months` `...`  \nSpecifies one of the following validity periods:\n  -
            `annual`: pass is valid from Jan 1 to Dec 31\n  - `extendedAnnual`: pass
            is valid from Jan 1 to Jan 31 of the following year\n  - `minutes`: pass
            is valid for a specified number of minutes See `unit`.\n  - `days`: pass
            is valid for a specified number of days. See `unit`.\n  - `months`: pass
            is valid for a specified number of months. See `unit`.\n"
          type: string
          x-extensible-enum:
          - annual
          - extendedAnnual
          - minutes
          - days
          - months
        count:
          description: Required if period is `minutes`, days` or `months`, it specifies
            how many of these units are covered by the pass.
          type: integer
      required:
      - period
    FareReason:
      description: "Extensible enum: `ride` `parking` `...`  \nReason for the cost
        described in this `Fare` element.\n"
      type: string
      x-extensible-enum:
      - ride
      - parking
    FunctionalClass:
      description: |
        Functional class is used to classify roads depending on the speed, importance and
        connectivity of the road.

        * `1`: Roads allow for high volume, maximum speed traffic movement between and through major
          metropolitan areas.
        * `2`: Roads are used to channel traffic to functional class 1 roads for travel between and
          through cities in the shortest amount of time.
        * `3`: Roads that intersect functional class 2 roads and provide a high volume of traffic
          movement at a lower level of mobility than functional class 2 roads.
        * `4`: Roads that provide for a high volume of traffic movement at moderate speeds between
          neighbourhoods.
        * `5`: Roads with volume and traffic movement below the level of any other functional class.
      type: integer
      format: int32
      minimum: 1
      maximum: 5
    InCircle:
      description: |
        Specifies the center point and the optional radius of your search.
        Format `{lat},{lng}[;r={radius}]`, where `radius=500` meters by default.
      type: string
      pattern: "[-+]?\\d*\\.?\\d+,[-+]?\\d*\\.?\\d+(;r=\\d+)?"
      example: 24.5,16.8;r=500
    LocalizedString:
      description: String with optional language code.
      properties:
        value:
          description: String written in the language specified in the language property.
          type: string
        language:
          description: Language in BCP47 format
          type: string
      required:
      - value
      example:
        value: InvalidenstraÃe
        language: de
    Location:
      description: Location on the Earth
      properties:
        lat:
          description: Location of a point on the Earth north or south of the equator
            in decimal degrees.
          type: number
          format: double
          example: 52.531677
        lng:
          description: Location of a place on the Earth east or west of the prime
            meridian in decimal degrees.
          type: number
          format: double
          example: 13.381777
        elv:
          description: |
            Ellipsoid(geodetic) height in meters. Difference between the WGS84 ellipsoid and a point on the Earthâs surface.
            Note: Similar elevation can be obtained from a GPS receiver.
          type: number
          example: 512.5
      example:
        lat: 52.531677
        lng: 13.381777
      required:
      - lat
      - lng
    LocationString:
      type: string
      example: 52.5251,13.3694
    MaxSpeed:
      description: Speed in meters per second, or "unlimited" indicating that the
        speed is unlimited, e.g., on a German autobahn
      oneOf:
      - type: number
        minimum: 0
      - type: string
        enum:
        - unlimited
    NoticeSeverity:
      description: |
        Describes the impact a notice has on the resource to which the notice is attached.
        * critical - The notice must not be ignored, even if the type of notice is not known to the user. Any associated resource (e.g., route section) must not be used without further evaluation.
        * info - The notice is for informative purposes, but does not affect usability of the route.
      type: string
      enum:
      - critical
      - info
    ParkingLotPlaceType:
      description: "Extensible enum: `parkAndRide` `...`  \nCurrently possible values
        are:\n\n* `parkAndRide` - this parking lot is of type \"Park and Ride\",\n
        \ such as it is a parking specifically designed to allow transition between
        car and transit.\n"
      type: string
      x-extensible-enum:
      - parkAndRide
    PartialTime:
      type: string
      description: "**RFC 3339**, section 5.6 as defined by `partial-time`."
      pattern: "^[012]\\d:[0-5]\\d:[0-6]\\d(\\.\\d+)?$"
      example: 30600
    PaymentMethod:
      description: "Extensible enum: `cash` `bankCard` `creditCard` `passSubscription`
        `transponder` `videoToll` `cashExact` `travelCard` `...`  \nRecognized methods
        of payment.\n"
      type: string
      x-extensible-enum:
      - cash
      - bankCard
      - creditCard
      - passSubscription
      - transponder
      - videoToll
      - cashExact
      - travelCard
    PedestrianSpeed:
      description: Pedestrian speed in meters per second
      type: number
      minimum: 0.5
      maximum: 2
      default: 1
    PlacesByIds:
      title: Query stations by IDs
      properties:
        ids:
          description: 'Specifies a comma separated list of station IDs. A maximum
            of 50 station identifiers are allowed in a single query

'
          type: string
          maxLength: 1000
      required:
      - ids
    PlacesReturn:
      type: array
      description: Enables transport information in the response.
      items:
        type: string
        enum:
        - transport
        - address
        - accessPoints
    Polyline:
      type: string
      description: Line string in [Flexible Polyline](https://github.com/heremaps/flexible-polyline)
        format.
      example: A05xgKuy2xCx9B7vUl0OhnR54EqSzpEl-HxjD3pBiGnyGi2CvwFsgD3nD4vB6e
    RoadInfoType:
      description: Type of the road (rural, urban, highway)
      type: string
      enum:
      - rural
      - urban
      - highway
      default: urban
    Speed:
      description: Speed in meters per second
      type: number
      minimum: 0
    StreetAttributes:
      description: "Extensible enum: `rightDrivingSide` `dirtRoad` `tunnel` `bridge`
        `ramp` `controlledAccess` `roundabout` `underConstruction` `dividedRoad` `privateRoad`
        `...`  \n`StreetAttributes` is applied to a span of a route section and describes
        attribute flags of a street.\n* `rightDrivingSide`: Do vehicles have to drive
        on the right-hand side of the road or the left-hand side.\n* `dirtRoad`: This
        part of the route has an un-paved surface.\n* `tunnel`: This part of the route
        is a tunnel.\n* `bridge`: This part of the route is a bridge.\n* `ramp`: This
        part of the route is a ramp (usually connecting to/from/between highways).\n*
        `motorway`: This part of the route is a controlled access road (usually highways
        with motorway sign).\n* `roundabout`: This part of the route is a roundabout.\n*
        `underConstruction`: This part of the route is under construction.\n* `dividedRoad`:
        This part of the route uses a road with a physical or legal divider in the
        middle.\n* `privateRoad`: This part of the route uses a privately owned road.\n*
        `controlledAccessHighway`: This part of the route is a either controlled access
        or limited access road or both.\n\nAs it is possible that new street attributes
        are supported in the future, unknown street attributes should be ignored.\n"
      type: string
      x-extensible-enum:
      - rightDrivingSide
      - dirtRoad
      - tunnel
      - bridge
      - ramp
      - controlledAccess
      - roundabout
      - underConstruction
      - dividedRoad
      - privateRoad
    Time:
      type: string
      description: "**RFC 3339**, section 5.6 as defined by either `date-time` or
        `date-only` 'T' `partial-time` (ie no time-offset)."
      format: date-time
    TimeRestrictedWeekdays:
      type: string
      enum:
      - mo
      - tu
      - we
      - th
      - fr
      - sa
      - su
    TransitIncidentEffect:
      description: "Extensible enum: `cancelledService` `reducedService` `additionalService`
        `modifiedService` `delays` `detour` `stopMoved` `other` `...`  \nAn open list
        of possible incident effects.\nNote: Since new types are expected to appear,
        it is important to check for unknown types when parsing this value.\n"
      type: string
      x-extensible-enum:
      - cancelledService
      - reducedService
      - additionalService
      - modifiedService
      - delays
      - detour
      - stopMoved
      - other
    TransitIncidentType:
      description: "Extensible enum: `technicalProblem` `strike` `demonstration` `accident`
        `holiday` `weather` `maintenance` `construction` `policeActivity` `medicalEmergency`
        `other` `...`  \nAn open list of possible incident causes / types.\nNote:
        Since new types are expected to appear, it is important to check for unknown
        types when parsing this value.\n"
      type: string
      x-extensible-enum:
      - technicalProblem
      - strike
      - demonstration
      - accident
      - holiday
      - weather
      - maintenance
      - construction
      - policeActivity
      - medicalEmergency
      - other
    TransitModeFlags:
      title: Modes and excluded modes
      description: "Extensible enum: `highSpeedTrain` `intercityTrain` `interRegionalTrain`
        `regionalTrain` `cityTrain` `bus` `ferry` `subway` `lightRail` `privateBus`
        `inclined` `aerial` `busRapid` `monorail` `flight` `spaceship` `-highSpeedTrain`
        `-intercityTrain` `-interRegionalTrain` `-regionalTrain` `-cityTrain` `-bus`
        `-ferry` `-subway` `-lightRail` `-privateBus` `-inclined` `-aerial` `-busRapid`
        `-monorail` `-flight` `-spaceship` `...`  \nTransit mode and excluded modes
        of transport\n"
      type: string
      x-extensible-enum:
      - highSpeedTrain
      - intercityTrain
      - interRegionalTrain
      - regionalTrain
      - cityTrain
      - bus
      - ferry
      - subway
      - lightRail
      - privateBus
      - inclined
      - aerial
      - busRapid
      - monorail
      - flight
      - spaceship
      - "-highSpeedTrain"
      - "-intercityTrain"
      - "-interRegionalTrain"
      - "-regionalTrain"
      - "-cityTrain"
      - "-bus"
      - "-ferry"
      - "-subway"
      - "-lightRail"
      - "-privateBus"
      - "-inclined"
      - "-aerial"
      - "-busRapid"
      - "-monorail"
      - "-flight"
      - "-spaceship"
    TransitStopAttributes:
      description: "Extensible enum: `noEntry` `noExit` `...`  \nAttributes of a stop.\n\n*
        `noEntry`: The transport cannot be entered at the stop.\n* `noExit`: The transport
        cannot be exited at the stop.\n"
      type: string
      x-extensible-enum:
      - noEntry
      - noExit
    TurnActionDirection:
      description: Direction of the turn. `middle` is only used by the `keep` action.
      type: string
      enum:
      - middle
      - right
      - left
    TurnActionSeverity:
      description: |
        Tightness of the turn. Optional in the `turn` action, unused by other actions.

        * `light`: indicates making a light turn
        * `quite`: indicates making a regular turn
        * `heavy`: indicates making a heavy turn
      type: string
      enum:
      - light
      - quite
      - heavy
    Units:
      description: Units of measurement used, for example, in guidance instructions.
        The default is `metric`.
      type: string
      enum:
      - metric
      - imperial
    Uri:
      description: An URL address that links to a particular resource.
      type: string
      format: uri
    WalkAttributes:
      description: "Extensible enum: `stairs` `park` `indoor` `open` `noThrough` `tollRoad`
        `...`  \nWalkAttributes are applied to a span of a route section and describe
        walk-related attribute\nflags.\n\n* `stairs`: This part of the route is using
        stairs.\n* `park`: This part of the route is located inside a park.\n* `indoor`:
        This part of the route is located inside a venue.\n* `open`: This part of
        the route is open to walking.\n* `noThrough`: This part of the route can only
        be traversed if origin, destination or any via waypoint is located there.\n*
        `tollRoad`: This part of the route is restricted with a fee (or toll).\n"
      type: string
      x-extensible-enum:
      - stairs
      - park
      - indoor
      - open
      - noThrough
      - tollRoad
    WheelchairAccessibility:
      description: |
        Defines accessibility for people with a disability and who use a wheelchair.

        * `unknown` - Information is not available.
        * `yes` - Full unrestricted accessibility.
        * `limited` - Accessibility is limited, not everywhere or require assistance.
        * `no` - No accessibility.
      type: string
      enum:
      - unknown
      - 'yes'
      - limited
      - 'no'
      default: unknown
    Agency:
      description: Contains information about a particular agency.
      properties:
        id:
          description: Unique code of the agency. Specifies if the same agency is
            used on different sections of the same route.
          type: string
        name:
          description: Human readable name of the owner of the transport service.
          type: string
        website:
          description: Link to the agency's website.
          allOf:
          - "$ref": "#/components/schemas/Uri"
      required:
      - id
      - name
    BaseAction:
      description: An action to be performed between sections or during a section.
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
      required:
      - action
      - duration
    BasePlace:
      properties:
        name:
          description: Location name
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
      required:
      - type
      - location
    BaseSummary:
      description: Total value of key attributes for a route section.
      properties:
        duration:
          "$ref": "#/components/schemas/Duration"
        length:
          "$ref": "#/components/schemas/Distance"
      required:
      - duration
      - length
    BoardByLocation:
      title: Query departures by Location
      properties:
        in:
          "$ref": "#/components/schemas/InCircle"
        maxPlaces:
          description: The maximum number of stations the response should include.
          type: integer
          minimum: 1
          maximum: 50
          default: 5
      required:
      - in
    ChargingConnectorAttributes:
      description: Details of the connector that is suggested to be used in the section's
        `postAction` for charging.
      properties:
        power:
          description: Power supplied by the suggested connector in kW.
          type: number
        current:
          description: Current of the suggested connector in Amperes.
          type: number
        voltage:
          description: Voltage of the suggested connector in Volts.
          type: number
        supplyType:
          description: 'Supply type of the suggested connector.

'
          allOf:
          - "$ref": "#/components/schemas/ChargingSupplyType"
        connectorType:
          description: Suggested connector for charging at this station
          allOf:
          - "$ref": "#/components/schemas/ChargingConnectorType"
      required:
      - power
      - supplyType
      - connectorType
    DynamicSpeedInfo:
      description: 'Describes dynamic speed information, such as traffic speed, estimated
        speed without traffic, and turn time.

'
      properties:
        trafficSpeed:
          description: 'Traffic-enabled speed, which is the estimated speed considering
            traffic-relevant constraints.

'
          allOf:
          - "$ref": "#/components/schemas/Speed"
        baseSpeed:
          description: Estimated speed without considering any traffic-related constraints.
          allOf:
          - "$ref": "#/components/schemas/Speed"
        turnTime:
          description: 'Turn time estimate considering traffic and transport mode
            needed for turning from this segment into the next.

'
          allOf:
          - "$ref": "#/components/schemas/Duration"
      required:
      - trafficSpeed
      - baseSpeed
      - turnTime
    ExitInfo:
      description: Exit information attached to an offset action
      properties:
        number:
          description: Number of the exit (e.g. '18')
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
      example:
        exit:
          number:
          - value: '15'
            language: de
    FarePass:
      description: Specifies whether this `Fare` is a multi-travel pass, and its characteristics
      properties:
        returnJourney:
          description: This pass includes the fare for the return journey.
          type: boolean
        validityPeriod:
          "$ref": "#/components/schemas/FarePassValidityPeriod"
        travels:
          description: This pass allows for the specified number of travels.
          type: integer
        transfers:
          description: Indicates if transfers are permitted with this pass, and if
            so, how many.
          type: integer
        seniorPass:
          description: This pass is valid only if presented by a senior person.
          type: boolean
    HealthResponseFailSchema:
      description: Returns the health of the service
      properties:
        status:
          description: |
            Health status of the service:

            * `ok` - the service is operating normally
            * `fail` - the service is currently encountering a failure
          type: string
          enum:
          - fail
    HealthResponseOKSchema:
      description: Returns the health of the service
      properties:
        status:
          description: |
            Health status of the service:

            * `ok` - the service is operating normally
            * `fail` - the service is currently encountering a failure
          type: string
          enum:
          - ok
    Notice:
      description: A notice contains important notifications.
      properties:
        title:
          type: string
          description: Human-readable notice description.
          example: No route found
        code:
          type: string
          description: Notice code.
          example: noRouteFound
        severity:
          "$ref": "#/components/schemas/NoticeSeverity"
        details:
          type: array
          description: Additional details about the notice
          items:
            "$ref": "#/components/schemas/BaseNoticeDetail"
      required:
      - code
    PedestrianMode:
      description: "Extensible enum: `pedestrian` `...`  \nPedestrian mode of transport.\n\nSince
        the supported pedestrian modes may be extended in the future, the pedestrian
        mode should be hidden when an unknown mode is encountered.\n"
      type: string
      x-extensible-enum:
      - pedestrian
      default: pedestrian
    PlacesByLocation:
      title: Query stations by Location
      properties:
        in:
          "$ref": "#/components/schemas/InCircle"
        maxPlaces:
          description: The maximum number of stations/stops included in the response.
          type: integer
          minimum: 1
          maximum: 50
          default: 5
        modesInPlace:
          description: |
            Format: `mode1,mode2,...`

            Filter the list of stations returned in the response depending on the Transit modes available.

            Stations where at least one of the specified modes exists will get returned.
            By default, all supported transit modes are permitted.

            Supported modes: `highSpeedTrain` `intercityTrain` `interRegionalTrain` `regionalTrain` `cityTrain`
            `bus` `ferry` `subway` `lightRail` `privateBus` `inclined` `aerial` `busRapid` `monorail`
            `flight` `spaceship`

            This parameter also support an exclusion list: It's sufficient to specify each mode to exclude by prefixing it with `-`.
            Mixing of inclusive and exclusive transit modes is not allowed.

            examples:
              * `subway,bus`. Returns only stations having subways and busses.
              * `-subway,-bus`. Returns all stations except the one having just subways or busses.
          type: string
      required:
      - in
    RoadInfo:
      description: Road information attached to an offset action
      properties:
        type:
          "$ref": "#/components/schemas/RoadInfoType"
        name:
          description: |
            Name of the road

            If the road has multiple names, each name will be a separate entry in the array.
            The road names can be in multiple languages. If a preferred language was provided,
            and names in that language are available, they will be prioritized in the array.
            Otherwise the default name of the street is prioritized.
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        number:
          description: Route name or number (e.g. 'M25')
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        toward:
          description: Names of destinations on sign which can be reached when going
            in that direction
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
      example:
        fennstrasse:
          type: street
          name:
          - value: FennstraÃe
            language: de
          number:
          - value: B96
            language: de
          toward:
          - value: Reinickendorf
            language: de
    TransitIncident:
      description: |
        An incident describes disruptions on the transit network.
        Disruptions scale from delays to service cancellations.
      properties:
        summary:
          type: string
          description: A human readable summary of the incident
          example: The subway is closed each night between 1 AM and 5 AM.
        description:
          type: string
          description: A human readable description of the incident
          example: The subway is closed each night between 1 AM and 5 AM while we
            clean our trains and stations. We are running extra bus service overnight.
        type:
          "$ref": "#/components/schemas/TransitIncidentType"
        effect:
          "$ref": "#/components/schemas/TransitIncidentEffect"
        validFrom:
          "$ref": "#/components/schemas/Time"
        validUntil:
          "$ref": "#/components/schemas/Time"
        url:
          description: Link to the original incident published at the agency website
          allOf:
          - "$ref": "#/components/schemas/Uri"
      required:
      - type
      - effect
    TransitModeOutput:
      title: Modes
      description: "Extensible enum: `highSpeedTrain` `intercityTrain` `interRegionalTrain`
        `regionalTrain` `cityTrain` `bus` `ferry` `subway` `lightRail` `privateBus`
        `inclined` `aerial` `busRapid` `monorail` `carShuttleTrain` `flight` `spaceship`
        `...`  \nTransit mode of transport in the route response\n"
      type: string
      x-extensible-enum:
      - highSpeedTrain
      - intercityTrain
      - interRegionalTrain
      - regionalTrain
      - cityTrain
      - bus
      - ferry
      - subway
      - lightRail
      - privateBus
      - inclined
      - aerial
      - busRapid
      - monorail
      - carShuttleTrain
      - flight
      - spaceship
    TransitModesFilter:
      description: 'Transit type filter used to determine which types of transit to
        include in the response. By default, all supported transit types are permitted.
        Mixing of inclusive and exclusive transit types is not allowed.

'
      type: array
      uniqueItems: true
      items:
        "$ref": "#/components/schemas/TransitModeFlags"
    VersionResponse:
      description: Returns the versions of the service components.
      properties:
        apiVersion:
          type: string
          description: The current version of the API.
        serviceVersion:
          type: string
          description: The current version of the service.
        dataVersions:
          type: array
          items:
            "$ref": "#/components/schemas/DataVersion"
          description: Returns the versions of data sets used by the service.
      required:
      - apiVersion
    WebLink:
      description: The URL address to an external resource.
      properties:
        id:
          description: Unique identifier for the web link. It is used to deduplicate
            links defined in multiple sections.
          type: string
        href:
          "$ref": "#/components/schemas/Uri"
        text:
          description: Text describing the url address (e.g. The example website).
          type: string
        hrefText:
          description: 'The interactive (or clickable) portion of the text. If not
            present (default), the entire content of the text attribute will be considered.

'
          type: string
      required:
      - id
      - text
    AccessPointPlace:
      description: Access point to a venue/station
      properties:
        name:
          description: Location name
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        wheelchairAccessible:
          description: |
            Information about accessibility for people with a disability and who use a wheelchair.

            * `unknown` - Accessibility information is not available.
            * `yes` - Access point is wheelchair accessible.
            * `limited` - Accessibility is limited or assistance is required.
            * `no` - No accessible path from the access point to platforms.
          allOf:
          - "$ref": "#/components/schemas/WheelchairAccessibility"
      required:
      - type
      - location
    Attribution:
      description: The URL address to an external resource.
      properties:
        id:
          description: Unique identifier for the web link. It is used to deduplicate
            links defined in multiple sections.
          type: string
        href:
          "$ref": "#/components/schemas/Uri"
        text:
          description: Text describing the url address (e.g. The example website).
          type: string
        hrefText:
          description: 'The interactive (or clickable) portion of the text. If not
            present (default), the entire content of the text attribute will be considered.

'
          type: string
        type:
          "$ref": "#/components/schemas/AttributionLinkType"
      required:
      - id
      - text
    BoardAction:
      description: An action to board a ferry.
      allOf:
      - "$ref": "#/components/schemas/BaseAction"
    ChargingStationPlace:
      description: A charging station
      properties:
        name:
          description: Human readable name of this charging station
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        id:
          description: Identifier of this charging station
          type: string
        connectorAttributes:
          "$ref": "#/components/schemas/ChargingConnectorAttributes"
        brand:
          "$ref": "#/components/schemas/ChargingStationBrand"
      required:
      - type
      - location
    DeboardAction:
      description: An action to disembark a ferry.
      allOf:
      - "$ref": "#/components/schemas/BaseAction"
    DockingStationPlace:
      description: A place represents a docking station for rented vehicles.
      allOf:
      - "$ref": "#/components/schemas/BasePlace"
    OffsetAction:
      description: |
        An action to be performed at or during a specific portion of a section.

        * `depart`: departure maneuver, such as "Start at"
        * `arrive`: arrival maneuver, such as "Arrive at"
        * `continue`: continue maneuver, such as "Continue on"
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
        offset:
          description: Offset of a coordinate in the section's polyline.
          type: integer
        length:
          description: Estimated length of this action (in meters). Actions extend
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Distance"
        currentRoad:
          description: Attributes of the current road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        nextRoad:
          description: Attributes of the next road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        exitSign:
          description: Attributes of the road exit
          allOf:
          - "$ref": "#/components/schemas/ExitInfo"
      required:
      - action
      - duration
    PedestrianNotice:
      description: A notice contains important notifications.
      properties:
        title:
          type: string
          description: Human-readable notice description.
          example: Violated avoid tunnel
        code:
          type: string
          description: "Extensible enum: `simplePolyline` `pedestrianOptionViolated`
            `violatedAvoidTunnel` `violatedAvoidDirtRoad` `...`  \nCurrently known
            codes (non-exhaustive: this list could be extended for new situations):\n\n|
            Code      | Description  | Severity |\n| --------- | ------- | ----            |\n| simplePolyline | An accurate polyline is not available for this section.
            The returned polyline has been generated from departure and arrival places
            | info |\n| pedestrianOptionViolated | This section violates the parameter
            `pedestrian[speed]` or `pedestrian[maxDistance]` | critical |\n| violatedAvoidTunnel
            | Route did not manage to avoid user preference | critical |\n| violatedAvoidDirtRoad
            | Route did not manage to avoid user preference | critical |\n"
          example: violatedAvoidTunnel
          x-extensible-enum:
          - simplePolyline
          - pedestrianOptionViolated
          - violatedAvoidTunnel
          - violatedAvoidDirtRoad
        severity:
          "$ref": "#/components/schemas/NoticeSeverity"
        details:
          type: array
          description: Additional details about the notice
          items:
            "$ref": "#/components/schemas/BaseNoticeDetail"
      required:
      - code
    PedestrianSpan:
      description: 'Span attached to a `Section` describing pedestrian content.

'
      properties:
        offset:
          description: 'Offset of a coordinate in the section''s polyline.

'
          type: integer
          format: int32
          minimum: 0
        length:
          description: 'Length of the span.

'
          "$ref": "#/components/schemas/Distance"
        duration:
          description: Duration of the span.
          "$ref": "#/components/schemas/Duration"
        streetAttributes:
          description: |
            `StreetAttributes` is applied to a span of a route section and describes attribute flags of a street.
            * `rightDrivingSide`: Do vehicles have to drive on the right-hand side of the road or the left-hand side.
            * `dirtRoad`: This part of the route has an un-paved surface.
            * `tunnel`: This part of the route is a tunnel.
            * `bridge`: This part of the route is a bridge.
            * `ramp`: This part of the route is a ramp (usually connecting to/from/between highways).
            * `motorway`: This part of the route is a controlled access road (usually highways with motorway sign).
            * `roundabout`: This part of the route is a roundabout.
            * `underConstruction`: This part of the route is under construction.
            * `dividedRoad`: This part of the route uses a road with a physical or legal divider in the middle.
            * `privateRoad`: This part of the route uses a privately owned road.
            * `controlledAccessHighway`: This part of the route is a either controlled access or limited access road or both.

            As it is possible that new street attributes are supported in the future, unknown street attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/StreetAttributes"
        walkAttributes:
          type: array
          description: |
            Accessibility and walk-related attribute flags.

            * `stairs`: This part of the route is a staircase.
            * `park`: This part of the route is in a park.
            * `indoor`: This part of the route is inside a venue.
            * `open`: This part of the route is open to walking.
            * `noThrough`: This part of the route can only be traversed if origin, destination or any via waypoint is located there.
            * `tollRoad`: Access to this part of the route is restricted with a fee (or toll).

            As it is possible that new attributes are supported in the future, unknown attributes should be ignored.
          items:
            "$ref": "#/components/schemas/WalkAttributes"
        carAttributes:
          description: |
            Car specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describes access flags of a street.
            * `open`:  A part of the route that is open to cars.
            * `noThrough`:  A part of the route that can only be traversed if origin, destination or any via waypoint is located there.
            * `tollRoad`: Access to this part of the route is restricted with a fee (or toll).

            As it is possible that new access attributes are supported in the future, unknown access attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        truckAttributes:
          description: |
            Truck specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describes access flags of a street.
            * `open`: This part of the route is open to trucks.
            * `noThrough`: This part of the route can only be traversed if origin, destination or any via waypoint is located there.
            * `tollRoad`: This part of the route is restricted with a fee (or toll).

            As it is possible that new access attributes are supported in the future, unknown access attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        scooterAttributes:
          description: |
            Scooter specific `AccessAttributes`.

            `AccessAttributes` is applied to a span of a route section and describes access flags of a street.
            * `open`: This part of the route is open to scooters.

            As it is possible that new access attributes are supported in the future, unknown access attributes should be ignored.
          type: array
          items:
            "$ref": "#/components/schemas/AccessAttributes"
        names:
          description: Designated name for the span (e.g. a street name or a transport
            name)
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        routeNumbers:
          description: Designated route name or number of the span (e.g. 'M25')
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        countryCode:
          "$ref": "#/components/schemas/CountryCode"
        functionalClass:
          "$ref": "#/components/schemas/FunctionalClass"
        speedLimit:
          description: "**NOTE:** Attribute speedLimit is deprecated. Please, use
            maxSpeed instead of it.\n"
          "$ref": "#/components/schemas/Speed"
        maxSpeed:
          "$ref": "#/components/schemas/MaxSpeed"
        dynamicSpeedInfo:
          "$ref": "#/components/schemas/DynamicSpeedInfo"
        segmentId:
          description: |
            **Disclaimer: This property is currently in beta release, and is therefore subject to breaking changes.**

            The directed topology segment id including prefix (e.g '+here:cm:segment:').

            The id consists of two parts.
            * The direction ('+' or '-')
            * followed by the topology segment id (a unique identifier within the HERE platform catalogs).

            The direction specifies whether the route is using the segment in its canonical direction ('+' aka traveling along the geometry's direction), or against it ('-' aka traveling against the geometry's direction).
          type: string
        segmentRef:
          description: |
            A reference to the HMC topology segment used in this span.

            The standard representation of a segment reference has the following structure:
            {catalogHrn}:{catalogVersion}:({layerId})?:{tileId}:{segmentId}(#{direction}({startOffset}..{endOffset})?)?

            The individual parts are:
            * catalogHrn: The HERE Resource Name that identifies the source catalog of the segment, example: hrn:here:data::olp-here:rib-2
            * catalogVersion: The catalog version
            * layerId (optional): The layer inside the catalog where the segment can be found, example: topology-geometry
            * tileId: The HERE tile key of the partition/tile where the segment is located in the given version of the catalog. This can be on a lower level than the actual segment is stored at (for example, the provided tile ID can be on level 14, despite topology-geometry partitions being tiled at level 12). The level of a HERE tile key is indicated by the position of the highest set bit in binary representation. Since the HERE tile key represents a morton code of the x and y portion of the Tile ID, the level 12 tile ID can be retrieved from the level 14 tile ID by removing the 4 least significant bits (or 2 bits per level) or 1 hexidecimal digit. For example, the level 14 tile 377894441 is included in the level 12 tile 23618402 (377894441<sub>10</sub> = 16863629<sub>16</sub> &rightarrow; 1686362<sub>16</sub> = 23618402<sub>10</sub>)
            * segmentId: The identifier of the referenced topology segment inside the catalog, example: here:cm:segment:84905195
            * direction (optional): Either '*' for undirected or bidirectional, '+' for positive direction, '-' for negative direction, or '?' for unknown direction (not used by the routing service)
            * startOffset/endOffset (optional): The start- and end offset are non-negative numbers between 0 and 1, representing the start and end of the referenced range using a proportion of the length of the segment. 0 represents the start and 1 the end of the segment, relative to the indicated direction (or positive direction in case of undirected segments). Example: 0.7..1

            Example of a segment reference in standard representation:
            hrn:here:data::olp-here:rib-2:1363::377894441:here:cm:segment:84905195#+0.7..1

            The segment references can also be provided in a compact representation, to reduce the response size. In the compact representation, some parts are replaced by placeholders, which can be resolved using the refReplacements dictionary in the parent section.
            The placeholder format is \$\d+ and need to be surrounded by columns or string start/end. It can be captured with the following regular expression: (^|:)\$\d+(:|$)

            Example of the segment reference previously mentioned in compact representation:
            $0:377894441:$1:84905195#+0.7..1
            With the corresponding refReplacements:
            "refReplacements": {
              "0": "hrn:here:data::olp-here:rib-2:1363:",
              "1": "here:cm:segment"
            }
          type: string
        baseDuration:
          description: |
            Duration of this span (in seconds) ignoring time-aware information.

            For pedestrian mode, the reported time is currently equal to that in `duration`.
          "$ref": "#/components/schemas/Duration"
        typicalDuration:
          description: |
            Duration of this span (in seconds) under typical traffic conditions.

            For pedestrian mode, the reported time is currently equal to that in `duration`.
          "$ref": "#/components/schemas/Duration"
        incidents:
          description: |
            A list of indices into the incident array of the parent section.
            References all incidents that apply to the span.
          type: array
          items:
            type: integer
    PedestrianSummary:
      description: Total value of key attributes for a route section.
      properties:
        duration:
          "$ref": "#/components/schemas/Duration"
        length:
          "$ref": "#/components/schemas/Distance"
        baseDuration:
          description: |
            Duration (in seconds) ignoring time-aware information.

            For pedestrian mode, the reported time is currently equal to that in `duration`.
          allOf:
          - "$ref": "#/components/schemas/Duration"
      required:
      - duration
      - length
    PedestrianTransport:
      description: Information about a transport
      properties:
        mode:
          "$ref": "#/components/schemas/PedestrianMode"
      required:
      - mode
    Place:
      description: A place represents a generic location relevant for the route.
      allOf:
      - "$ref": "#/components/schemas/BasePlace"
    PlacesByName:
      title: Query stations by Name and Location
      properties:
        name:
          description: |
            The station name or part of the name to search for.
            It is composed of one or more space separated words.
          type: string
        method:
          description: |
            Specifies if the match is `fuzzy` or `strict`.
            The default value is fuzzy.

            `fuzzy` - search for a station with the name similar to one of the names requested
            `strict` - search for a station with the name exactly matching one of the names requested or containing it as a part

            For example, if the station name in the request is "maurer", then if the method is `fuzzy` the response
            contains "AMBOY AVE AT MAURER RD" and "LAUREL HILL BL/48 ST". If the method is `strict`
            the response contains "AMBOY AVE AT MAURER RD" but not "LAUREL HILL BL/48 ST".
          type: string
          enum:
          - fuzzy
          - strict
        maxPlaces:
          type: integer
          maximum: 25
          description: The maximum number of stations/stops included in the response.
          minimum: 1
          default: 5
        in:
          "$ref": "#/components/schemas/InCircle"
        modesInPlace:
          description: |
            Format: `mode1,mode2,...`

            Filter the list of stations returned in the response depending on the Transit modes available.

            Stations where at least one of the specified modes exists will get returned.
            By default, all supported transit modes are permitted.

            Supported modes: `highSpeedTrain` `intercityTrain` `interRegionalTrain` `regionalTrain` `cityTrain`
            `bus` `ferry` `subway` `lightRail` `privateBus` `inclined` `aerial` `busRapid` `monorail`
            `flight` `spaceship`

            This parameter also support an exclusion list: It's sufficient to specify each mode to exclude by prefixing it with `-`.
            Mixing of inclusive and exclusive transit modes is not allowed.

            examples:
              * `subway,bus`. Returns only stations having subways and busses.
              * `-subway,-bus`. Returns all stations except the one having just subways or busses.
          type: string
      required:
      - name
      - in
    RangePrice:
      properties:
        type:
          description: |
            Type of price represented by this object. The API customer is responsible for correctly visualizing
            the pricing model. As it is possible to extend the supported price types in the future,
            the price information should be hidden when an unknown type is encountered.

            Available price types are:

              * `value` - A single value.
              * `range` - A range value that includes a minimum and maximum price.
          type: string
        estimated:
          description: Attribute value is `true` if the fare price is estimated, `false`
            if it is an exact value.
          type: boolean
          default: false
        currency:
          description: Local currency of the price compliant to ISO 4217
          type: string
        unit:
          description: |
            When set, the price is paid for a specific duration.

            Examples:
              * `"unit": 3600` - price for one hour
              * `"unit": 28800` - price for 8 hours
              * `"unit": 86400` - price for one day
          allOf:
          - "$ref": "#/components/schemas/Duration"
        minimum:
          description: Minimum price
          type: number
        maximum:
          description: Maximum price
          type: number
      required:
      - type
      - currency
      - minimum
      - maximum
    SinglePrice:
      properties:
        type:
          description: |
            Type of price represented by this object. The API customer is responsible for correctly visualizing
            the pricing model. As it is possible to extend the supported price types in the future,
            the price information should be hidden when an unknown type is encountered.

            Available price types are:

              * `value` - A single value.
              * `range` - A range value that includes a minimum and maximum price.
          type: string
        estimated:
          description: Attribute value is `true` if the fare price is estimated, `false`
            if it is an exact value.
          type: boolean
          default: false
        currency:
          description: Local currency of the price compliant to ISO 4217
          type: string
        unit:
          description: |
            When set, the price is paid for a specific duration.

            Examples:
              * `"unit": 3600` - price for one hour
              * `"unit": 28800` - price for 8 hours
              * `"unit": 86400` - price for one day
          allOf:
          - "$ref": "#/components/schemas/Duration"
        value:
          description: The price value
          type: number
      required:
      - type
      - currency
      - value
    StationPlace:
      description: A station
      properties:
        name:
          description: Location name
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        id:
          description: Identifier of this station
          type: string
        platform:
          description: Platform name or number for the departure.
          type: string
        code:
          description: Short text or a number that identifies the place for riders.
          type: string
        wheelchairAccessible:
          description: |
            Information about accessibility for people with a disability and who use a wheelchair.

            * `unknown` - Accessibility information is not available.
            * `yes` - There exists some accessible path from outside the station to the specific stop/platform.
            * `limited` - Accessibility is limited or assistance is required.
            * `no` - There exists no accessible path from outside the station to the specific stop/platform.
          allOf:
          - "$ref": "#/components/schemas/WheelchairAccessibility"
      required:
      - type
      - location
    TransitNotice:
      description: A notice contains important notifications.
      properties:
        title:
          type: string
          description: Human-readable notice description.
          example: No schedule
        code:
          type: string
          description: "Extensible enum: `noSchedule` `noIntermediate` `unwantedMode`
            `scheduledTimes` `simplePolyline` `violatedAvoidFerry` `violatedAvoidTrainFerry`
            `...`  \nCurrently known codes (non-exhaustive: this list could be extended
            for new situations):\n\n| Code      | Description  | Severity |\n| ------            | ------- | ------- |\n| noSchedule | A timetable schedule is not available
            for the transit line in this section, and only the run frequency is available.
            As a result, departure/arrival times are approximated | info |\n| noIntermediate
            | Information about intermediate stops is not available for this transit
            line | info |\n| unwantedMode | This section contains a transport mode
            that was explictly disabled. Mode filtering is not available in this area
            | info |\n| scheduledTimes | The times returned on this section are the
            scheduled times even though delay information are available | info |\n|
            simplePolyline | An accurate polyline is not available for this section.
            The returned polyline has been generated from departure and arrival places
            | info |\n| violatedAvoidFerry | Route did not manage to avoid user preference
            | critical |\n| violatedAvoidTrainFerry | Route did not manage to avoid
            user preference | critical |\n"
          example: noSchedule
          x-extensible-enum:
          - noSchedule
          - noIntermediate
          - unwantedMode
          - scheduledTimes
          - simplePolyline
          - violatedAvoidFerry
          - violatedAvoidTrainFerry
        severity:
          "$ref": "#/components/schemas/NoticeSeverity"
        details:
          type: array
          description: Additional details about the notice
          items:
            "$ref": "#/components/schemas/BaseNoticeDetail"
      required:
      - code
    TransitSpan:
      description: |
        Contains information attached to a contiguous part of a `Section`. The information may be
        attached along different dimensions of a section which are geometry (spatial), distance or
        time.

        A section, if it uses spans, has an optional attribute `spans` which is an array of
        extended `Span` types.

        The attributes of a span which should be returned in the response are
        configured by a request parameter.

        Use this type as a base for any span extension for sections that provide spans.
      properties:
        offset:
          description: 'Offset of a coordinate in the section''s polyline.

'
          type: integer
          format: int32
          minimum: 0
        length:
          description: 'Length of the span.

'
          "$ref": "#/components/schemas/Distance"
        duration:
          description: Duration of the span.
          "$ref": "#/components/schemas/Duration"
        countryCode:
          "$ref": "#/components/schemas/CountryCode"
        names:
          description: Designated name for the span (e.g. a street name or a transport
            name)
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        segmentId:
          description: |
            **Disclaimer: This property is currently in beta release, and is therefore subject to breaking changes.**

            The directed topology segment id including prefix (e.g '+here:cm:segment:').

            The id consists of two parts.
            * The direction ('+' or '-')
            * followed by the topology segment id (a unique identifier within the HERE platform catalogs).

            The direction specifies whether the route is using the segment in its canonical direction ('+' aka traveling along the geometry's direction), or against it ('-' aka traveling against the geometry's direction).

            This attribute will not appear for HERE Public Transit v8 and HERE Intermodal Routing v8 requests
          type: string
        segmentRef:
          description: |
            A reference to the HMC topology segment used in this span.

            The standard representation of a segment reference has the following structure:
            {catalogHrn}:{catalogVersion}:({layerId})?:{tileId}:{segmentId}(#{direction}({startOffset}..{endOffset})?)?

            The individual parts are:
            * catalogHrn: The HERE Resource Name that identifies the source catalog of the segment, example: hrn:here:data::olp-here:rib-2
            * catalogVersion: The catalog version
            * layerId (optional): The layer inside the catalog where the segment can be found, example: topology-geometry
            * tileId: The HERE tile key of the partition/tile where the segment is located in the given version of the catalog. This can be on a lower level than the actual segment is stored at (for example, the provided tile ID can be on level 14, despite topology-geometry partitions being tiled at level 12). The level of a HERE tile key is indicated by the position of the highest set bit in binary representation. Since the HERE tile key represents a morton code of the x and y portion of the Tile ID, the level 12 tile ID can be retrieved from the level 14 tile ID by removing the 4 least significant bits (or 2 bits per level) or 1 hexidecimal digit. For example, the level 14 tile 377894441 is included in the level 12 tile 23618402 (377894441<sub>10</sub> = 16863629<sub>16</sub> &rightarrow; 1686362<sub>16</sub> = 23618402<sub>10</sub>)
            * segmentId: The identifier of the referenced topology segment inside the catalog, example: here:cm:segment:84905195
            * direction (optional): Either '*' for undirected or bidirectional, '+' for positive direction, '-' for negative direction, or '?' for unknown direction (not used by the routing service)
            * startOffset/endOffset (optional): The start- and end offset are non-negative numbers between 0 and 1, representing the start and end of the referenced range using a proportion of the length of the segment. 0 represents the start and 1 the end of the segment, relative to the indicated direction (or positive direction in case of undirected segments). Example: 0.7..1

            This attribute will not appear for HERE Public Transit v8 and HERE Intermodal Routing v8 requests

            Example of a segment reference in standard representation:
            hrn:here:data::olp-here:rib-2:1363::377894441:here:cm:segment:84905195#+0.7..1

            The segment references can also be provided in a compact representation, to reduce the response size. In the compact representation, some parts are replaced by placeholders, which can be resolved using the refReplacements dictionary in the parent section.
            The placeholder format is \$\d+ and need to be surrounded by columns or string start/end. It can be captured with the following regular expression: (^|:)\$\d+(:|$)

            Example of the segment reference previously mentioned in compact representation:
            $0:377894441:$1:84905195#+0.7..1
            With the corresponding refReplacements:
            "refReplacements": {
              "0": "hrn:here:data::olp-here:rib-2:1363:",
              "1": "here:cm:segment"
            }
          type: string
        refReplacements:
          description: |
            Dictionary of placeholders to replacement strings for the compact representation of map entity references.

            This attribute will not appear for HERE Public Transit v8 and HERE Intermodal Routing v8 requests
          type: object
          additionalProperties:
            type: string
    TransitTransport:
      description: Transit transport information.
      properties:
        mode:
          "$ref": "#/components/schemas/TransitModeOutput"
        name:
          description: Transit line name
          type: string
          example: U2
        headsign:
          description: Transit line headsign
          type: string
        category:
          description: Human readable transport category (such as Bus, Gondola, Tram,
            Train, ...)
          type: string
        color:
          description: Color of the transport polyline and background for the transport
            name.
          allOf:
          - "$ref": "#/components/schemas/Color"
        textColor:
          description: Color of the transport name.
          allOf:
          - "$ref": "#/components/schemas/Color"
        shortName:
          description: Short name of a transit line.
          type: string
          example: U2
        longName:
          description: Long name of a transit line.
          type: string
          example: Pankow - Ruhleben
      required:
      - mode
    WebLinkWithDeviceType:
      description: The URL address to an external resource.
      properties:
        id:
          description: Unique identifier for the web link. It is used to deduplicate
            links defined in multiple sections.
          type: string
        href:
          "$ref": "#/components/schemas/Uri"
        text:
          description: Text describing the url address (e.g. The example website).
          type: string
        hrefText:
          description: 'The interactive (or clickable) portion of the text. If not
            present (default), the entire content of the text attribute will be considered.

'
          type: string
        deviceType:
          description: "Extensible enum: `web` `ios` `android` `...`  \nDevice type
            for which the link is intended\n"
          type: string
          x-extensible-enum:
          - web
          - ios
          - android
      required:
      - id
      - text
    ArriveAction:
      allOf:
      - "$ref": "#/components/schemas/OffsetAction"
    ContinueAction:
      description: |
        An action to be performed at or during a specific portion of a section.

        * `depart`: departure maneuver, such as "Start at"
        * `arrive`: arrival maneuver, such as "Arrive at"
        * `continue`: continue maneuver, such as "Continue on"
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
        offset:
          description: Offset of a coordinate in the section's polyline.
          type: integer
        length:
          description: Estimated length of this action (in meters). Actions extend
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Distance"
        currentRoad:
          description: Attributes of the current road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        nextRoad:
          description: Attributes of the next road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        exitSign:
          description: Attributes of the road exit
          allOf:
          - "$ref": "#/components/schemas/ExitInfo"
        intersectionName:
          description: Name of the intersection where the turn takes place, if available.
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
      required:
      - action
      - duration
    DepartAction:
      allOf:
      - "$ref": "#/components/schemas/OffsetAction"
    DepartureDetails:
      description: Defines a departure where the departure stop is implicit (e.g.
        station board departures)
      properties:
        time:
          description: Expected time of the departure of the event. Format is **RFC
            3339**, section 5.6 as defined by `date-time`.
          allOf:
          - "$ref": "#/components/schemas/Time"
        delay:
          "$ref": "#/components/schemas/DepartureDelay"
        status:
          "$ref": "#/components/schemas/DepartureStatus"
        platform:
          "$ref": "#/components/schemas/DeparturePlatform"
        transport:
          "$ref": "#/components/schemas/TransitTransport"
        agency:
          "$ref": "#/components/schemas/Agency"
      required:
      - time
      - transport
    FarePrice:
      description: Price of a fare
      discriminator:
        propertyName: type
        mapping:
          value: "#/components/schemas/SinglePrice"
          range: "#/components/schemas/RangePrice"
      oneOf:
      - "$ref": "#/components/schemas/SinglePrice"
      - "$ref": "#/components/schemas/RangePrice"
    Passthrough:
      description: Describes a location and time the section is passing through.
      properties:
        place:
          "$ref": "#/components/schemas/Place"
        offset:
          description: Passthrough offsets are the coordinate index in the polyline.
          type: number
      required:
      - place
    PedestrianPostAction:
      oneOf:
      - "$ref": "#/components/schemas/OffsetAction"
      discriminator:
        propertyName: action
        mapping:
          wait: "#/components/schemas/OffsetAction"
    StationPlaceInfo:
      description: A station
      properties:
        name:
          description: Location name
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        id:
          description: Identifier of this station
          type: string
        platform:
          description: Platform name or number for the departure.
          type: string
        code:
          description: Short text or a number that identifies the place for riders.
          type: string
        wheelchairAccessible:
          description: |
            Information about accessibility for people with a disability and who use a wheelchair.

            * `unknown` - Accessibility information is not available.
            * `yes` - There exists some accessible path from outside the station to the specific stop/platform.
            * `limited` - Accessibility is limited or assistance is required.
            * `no` - There exists no accessible path from outside the station to the specific stop/platform.
          allOf:
          - "$ref": "#/components/schemas/WheelchairAccessibility"
        address:
          description: Address of the station.
          allOf:
          - "$ref": "#/components/schemas/Address"
      required:
      - type
      - location
    TimeRestrictedPrice:
      properties:
        type:
          description: |
            Type of price represented by this object. The API customer is responsible for correctly visualizing
            the pricing model. As it is possible to extend the supported price types in the future,
            the price information should be hidden when an unknown type is encountered.

            Available price types are:

              * `restricted` - A single price value valid for a specific time or duration
          type: string
        estimated:
          description: Attribute value is `true` if the fare price is estimated, `false`
            if it is an exact value.
          type: boolean
          default: false
        currency:
          description: Local currency of the price compliant to ISO 4217
          type: string
        unit:
          description: |
            When set, the price is paid for a specific duration.

            Examples:
              * `"unit": 3600` - price for one hour
              * `"unit": 28800` - price for 8 hours
              * `"unit": 86400` - price for one day
          allOf:
          - "$ref": "#/components/schemas/Duration"
        value:
          description: The price value
          type: number
        days:
          description: This price applies only for the selected days
          type: array
          items:
            "$ref": "#/components/schemas/TimeRestrictedWeekdays"
          example:
          - sa
          - su
        minDuration:
          description: The price applies if the duration is more or equal to `minDuration`
          allOf:
          - "$ref": "#/components/schemas/Duration"
          example: 1801
        maxDuration:
          description: The price applies if the duration is less or equal to `maxDuration`
          allOf:
          - "$ref": "#/components/schemas/Duration"
          example: 3600
        fromTime:
          description: The price applies from this time of the day
          allOf:
          - "$ref": "#/components/schemas/PartialTime"
        toTime:
          description: The price applies until this time of the day
          allOf:
          - "$ref": "#/components/schemas/PartialTime"
      required:
      - type
      - currency
      - value
    TransitDeparture:
      description: Transit departure
      properties:
        time:
          description: Expected time of departure of the event. Format is **RFC 3339**,
            section 5.6 as defined by `date-time`.
          allOf:
          - "$ref": "#/components/schemas/Time"
        place:
          description: Departure/arrival location
          allOf:
          - "$ref": "#/components/schemas/StationPlace"
        delay:
          description: The accumulated delay in seconds from the scheduled time of
            the event.
          allOf:
          - "$ref": "#/components/schemas/DepartureDelay"
        status:
          "$ref": "#/components/schemas/DepartureStatus"
      required:
      - place
    TransitPostAction:
      oneOf:
      - "$ref": "#/components/schemas/DeboardAction"
      discriminator:
        propertyName: action
        mapping:
          deboard: "#/components/schemas/DeboardAction"
    TransitPreAction:
      description: An action that must be done prior to `departure`.
      discriminator:
        propertyName: action
        mapping:
          board: "#/components/schemas/BoardAction"
      oneOf:
      - "$ref": "#/components/schemas/BoardAction"
    TurnAction:
      description: |
        An action in which a direction change is made.

        * `ramp`: ramp maneuver, such as "Take the left ramp onto"
        * `roundaboutPass`: Going straight on a roundabout maneuver
        * `roundaboutEnter`: Arriving at a destination roundabout maneuver
        * `uTurn`: u-turn maneuver, such as "Make a right U-turn at"
        * `turn`: turn maneuver, such as "Make a sharp right turn at"
        * `keep`: a maneuver following a fork, such as "Take the middle fork onto"
        * `enterHighway`: a maneuver to enter a highway, used for turn-by-turn guidance only
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
        offset:
          description: Offset of a coordinate in the section's polyline.
          type: integer
        length:
          description: Estimated length of this action (in meters). Actions extend
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Distance"
        currentRoad:
          description: Attributes of the current road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        nextRoad:
          description: Attributes of the next road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        exitSign:
          description: Attributes of the road exit
          allOf:
          - "$ref": "#/components/schemas/ExitInfo"
        intersectionName:
          description: Name of the intersection where the turn takes place, if available.
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        direction:
          "$ref": "#/components/schemas/TurnActionDirection"
        severity:
          "$ref": "#/components/schemas/TurnActionSeverity"
      required:
      - action
      - duration
    ExitAction:
      description: |
        An action to leave a roundabout or highway.

        * `exit`: exit maneuver, such as "Take the left exit to"
        * `roundaboutExit`: roundabout exit maneuver, such as "Take the third exit of the roundabout onto"
      properties:
        action:
          description: |
            The type of the action.

            **NOTE:** The list of possible actions may be extended in the future. The client application should handle such a case gracefully.
          type: string
        duration:
          description: Estimated duration of this action (in seconds). Actions last
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Duration"
        instruction:
          description: Description of the action (e.g. Turn left onto Minna St.).
          type: string
        offset:
          description: Offset of a coordinate in the section's polyline.
          type: integer
        length:
          description: Estimated length of this action (in meters). Actions extend
            until the next action, or the end of the route in case of the last one.
          allOf:
          - "$ref": "#/components/schemas/Distance"
        currentRoad:
          description: Attributes of the current road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        nextRoad:
          description: Attributes of the next road
          allOf:
          - "$ref": "#/components/schemas/RoadInfo"
        exitSign:
          description: Attributes of the road exit
          allOf:
          - "$ref": "#/components/schemas/ExitInfo"
        intersectionName:
          description: Name of the intersection where the turn takes place, if available.
          type: array
          items:
            "$ref": "#/components/schemas/LocalizedString"
        direction:
          "$ref": "#/components/schemas/TurnActionDirection"
        severity:
          "$ref": "#/components/schemas/TurnActionSeverity"
        exit:
          description: Which exit to take next.
          type: integer
          minimum: 1
          maximum: 12
          default: 1
      required:
      - action
      - duration
    Fare:
      description: "`Fare` type contains information about a single fare or ticket
        needed for this section of the route."
      properties:
        id:
          description: Unique Fare id. Used to deduplicate fares that apply to multiple
            sections
          type: string
        name:
          description: Name of a fare
          type: string
        price:
          "$ref": "#/components/schemas/FarePrice"
        convertedPrice:
          "$ref": "#/components/schemas/FarePrice"
        reason:
          "$ref": "#/components/schemas/FareReason"
          default: ride
        paymentMethods:
          description: 'Specifies the payment methods for which this fare is valid.

'
          type: array
          items:
            "$ref": "#/components/schemas/PaymentMethod"
          minItems: 1
          uniqueItems: true
        pass:
          "$ref": "#/components/schemas/FarePass"
      required:
      - id
      - name
      - price
    KeepAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    ParkingLotPlace:
      description: A parking lot
      properties:
        name:
          description: Location name
          type: string
        waypoint:
          description: If present, this place corresponds to the waypoint in the request
            with the same index.
          type: integer
        type:
          description: |
            Place type. Each place type can have extra attributes.

            **NOTE:** The list of possible place types could be extended in the future.
            The client application is expected to handle such a case gracefully.
          type: string
        location:
          description: |
            The position of this location

            This position was used in route calculation. It may be different to the original position provided in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        originalLocation:
          description: If present, the original position of this location provided
            in the request.
          allOf:
          - "$ref": "#/components/schemas/Location"
        id:
          description: Identifier of this parking lot
          type: string
        attributes:
          type: array
          description: Attributes of a parking lot.
          items:
            "$ref": "#/components/schemas/ParkingLotPlaceType"
        rates:
          description: 'List of possible parking rates for this facility. Different
            rates can apply depending on the day, time of the day or parking duration.

'
          type: array
          items:
            "$ref": "#/components/schemas/TimeRestrictedPrice"
      required:
      - type
      - location
    RampAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    RoundaboutEnterAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    RoundaboutPassAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    StationBoard:
      description: It contains a list of departures from this station.
      properties:
        place:
          description: Information about a station or stop.
          allOf:
          - "$ref": "#/components/schemas/StationPlace"
        departures:
          description: A list of departures.
          type: array
          items:
            "$ref": "#/components/schemas/DepartureDetails"
        attributions:
          description: List of required attributions to display.
          type: array
          items:
            "$ref": "#/components/schemas/Attribution"
      required:
      - place
      - departures
    StationInfo:
      description: It contains transit service information for this station.
      properties:
        notices:
          description: |
            Contains a list of issues related to this station.

            Follows a list of possible notice codes:

            * `noDepartureInfo`: Departure information is unavailable or inaccurate for this station/stop.
          type: array
          items:
            "$ref": "#/components/schemas/Notice"
        place:
          description: Information about a station or stop.
          allOf:
          - "$ref": "#/components/schemas/StationPlaceInfo"
        transports:
          description: A list of transit services.
          type: array
          items:
            "$ref": "#/components/schemas/TransitTransport"
        accessPoints:
          description: A list of access points
          type: array
          items:
            "$ref": "#/components/schemas/AccessPointPlace"
      required:
      - place
    TransitStop:
      description: A transit stop of the route
      properties:
        departure:
          "$ref": "#/components/schemas/TransitDeparture"
        duration:
          description: Stop duration. If not set the vehicle departs as soon as people
            are on board.
          type: integer
          default: 0
        attributes:
          description: "**NOTE:** As it is possible that new attributes are supported
            in the future, unknown attributes should be ignored.\n"
          type: array
          items:
            "$ref": "#/components/schemas/TransitStopAttributes"
      required:
      - departure
    UTurnAction:
      allOf:
      - "$ref": "#/components/schemas/TurnAction"
    PedestrianPlace:
      description: Place used in pedestrian routing
      oneOf:
      - "$ref": "#/components/schemas/Place"
      - "$ref": "#/components/schemas/StationPlace"
      - "$ref": "#/components/schemas/AccessPointPlace"
      - "$ref": "#/components/schemas/ParkingLotPlace"
      - "$ref": "#/components/schemas/ChargingStationPlace"
      - "$ref": "#/components/schemas/DockingStationPlace"
      discriminator:
        propertyName: type
        mapping:
          place: "#/components/schemas/Place"
          station: "#/components/schemas/StationPlace"
          accessPoint: "#/components/schemas/AccessPointPlace"
          parkingLot: "#/components/schemas/ParkingLotPlace"
          chargingStation: "#/components/schemas/ChargingStationPlace"
          dockingStation: "#/components/schemas/DockingStationPlace"
    RoundaboutExitAction:
      allOf:
      - "$ref": "#/components/schemas/ExitAction"
    StationBoardResponse:
      description: Station board response.
      properties:
        notices:
          description: |
            Contains a list of issues related to this response.
            Follows a list of possible notice codes:

            * `unknownStations`: The response is incomplete as one or more of the given station IDs were not found.
            * `noDeparturesFound`: No departures information is available given current input parameters
          type: array
          items:
            "$ref": "#/components/schemas/Notice"
        boards:
          description: A list of subsequent station board departures.
          type: array
          items:
            "$ref": "#/components/schemas/StationBoard"
      required:
      - boards
    StationsInfoResponse:
      description: Station info response.
      properties:
        notices:
          description: |
            Contains a list of issues related to this response.

            Follows a list of possible notice codes:

            * `unknownStations`: The response is incomplete as one or more of the given station IDs were not found.
            * `noStationsFound`: No stations information is available given current input parameters
          type: array
          items:
            "$ref": "#/components/schemas/Notice"
        stations:
          description: A list of stations.
          type: array
          items:
            "$ref": "#/components/schemas/StationInfo"
      required:
      - stations
    TransitSection:
      description: A section of the route. It contains departure, arrival, and route
        information.
      properties:
        id:
          description: Unique identifier of the section
          type: string
        type:
          description: Section type used by the client to identify what extension
            to the BaseSection are available.
          type: string
        preActions:
          description: Actions that must be done prior to `departure`.
          type: array
          items:
            "$ref": "#/components/schemas/TransitPreAction"
        actions:
          description: |
            Actions that must be done during the travel portion of the section, i.e., between `departure` and `arrival`.

            *NOTE:* currentRoad and nextRoad are not populated for actions.
          type: array
          items:
            "$ref": "#/components/schemas/OffsetAction"
        language:
          description: Language of the localized strings in the section, if any, in
            BCP47 format.
          type: string
        postActions:
          description: Actions that must be done after `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/TransitPostAction"
        turnByTurnActions:
          description: Actions for turn by turn guidance during the travel portion
            of the section, i.e., between `departure` and `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/OffsetAction"
        departure:
          "$ref": "#/components/schemas/TransitDeparture"
        arrival:
          "$ref": "#/components/schemas/TransitDeparture"
        passthrough:
          description: |
            List of via waypoints this section is passing through.

            Each via waypoint of the request that is a `passThrough=true` waypoint, appears as a
            `Passthrough` in the response. It appears in the section that starts with the closest
            non-passthrough via specified before it or origin.

            The passthrough vias appear in this list in the order they are traversed. They are
            traversed in the order they are specified in the request.
          type: array
          items:
            "$ref": "#/components/schemas/Passthrough"
        summary:
          description: |
            Total value of key attributes (e.g., duration, length) summed up for the entire section, including `preActions`, `postActions`,
            and the travel portion of the section.
          allOf:
          - "$ref": "#/components/schemas/BaseSummary"
        travelSummary:
          description: |
            Total value of key attributes (e.g., duration, length) summed up for just the travel portion of the section,
            between `departure` and `arrival`. `preActions` and `postActions` are excluded.
          allOf:
          - "$ref": "#/components/schemas/BaseSummary"
        polyline:
          "$ref": "#/components/schemas/Polyline"
        notices:
          description: 'Contains a list of issues related to this section of the route.

'
          type: array
          items:
            "$ref": "#/components/schemas/TransitNotice"
        transport:
          "$ref": "#/components/schemas/TransitTransport"
        intermediateStops:
          description: 'Intermediate stops between departure and destination of the
            transit line. It can be missing if this information is not available or
            not requested.

'
          type: array
          items:
            "$ref": "#/components/schemas/TransitStop"
        agency:
          "$ref": "#/components/schemas/Agency"
        attributions:
          description: List of required attributions to display.
          type: array
          items:
            "$ref": "#/components/schemas/Attribution"
        fares:
          description: List of tickets to pay for this section of the route
          type: array
          items:
            "$ref": "#/components/schemas/Fare"
        booking:
          description: "**NOTE:** Attribute booking is deprecated. Please, use bookingLinks
            instead of it.\n"
          deprecated: true
          "$ref": "#/components/schemas/WebLink"
        bookingLinks:
          description: '"Links to external ticket booking services"

'
          type: array
          items:
            "$ref": "#/components/schemas/WebLinkWithDeviceType"
        spans:
          type: array
          description: 'Span attached to a `Section` describing transit content.

'
          items:
            "$ref": "#/components/schemas/TransitSpan"
        incidents:
          description: A list of all incidents that apply to the section.
          type: array
          items:
            "$ref": "#/components/schemas/TransitIncident"
      required:
      - id
      - type
      - departure
      - arrival
    PedestrianAction:
      description: Action attached to a pedestrian section.
      oneOf:
      - "$ref": "#/components/schemas/DepartAction"
      - "$ref": "#/components/schemas/ArriveAction"
      - "$ref": "#/components/schemas/ContinueAction"
      - "$ref": "#/components/schemas/RampAction"
      - "$ref": "#/components/schemas/ExitAction"
      - "$ref": "#/components/schemas/RoundaboutPassAction"
      - "$ref": "#/components/schemas/RoundaboutEnterAction"
      - "$ref": "#/components/schemas/RoundaboutExitAction"
      - "$ref": "#/components/schemas/UTurnAction"
      - "$ref": "#/components/schemas/TurnAction"
      - "$ref": "#/components/schemas/KeepAction"
      discriminator:
        propertyName: action
        mapping:
          depart: "#/components/schemas/DepartAction"
          arrive: "#/components/schemas/ArriveAction"
          continue: "#/components/schemas/ContinueAction"
          ramp: "#/components/schemas/RampAction"
          exit: "#/components/schemas/ExitAction"
          roundaboutPass: "#/components/schemas/RoundaboutPassAction"
          roundaboutEnter: "#/components/schemas/RoundaboutEnterAction"
          roundaboutExit: "#/components/schemas/RoundaboutExitAction"
          uTurn: "#/components/schemas/UTurnAction"
          turn: "#/components/schemas/TurnAction"
          keep: "#/components/schemas/KeepAction"
    PedestrianDeparture:
      description: Departure of pedestrian
      properties:
        time:
          description: Expected time of departure of the event. Format is **RFC 3339**,
            section 5.6 as defined by `date-time`.
          allOf:
          - "$ref": "#/components/schemas/Time"
        place:
          "$ref": "#/components/schemas/PedestrianPlace"
      required:
      - place
    PedestrianSection:
      description: Represent a section of a route
      properties:
        id:
          description: Unique identifier of the section
          type: string
        type:
          description: Section type used by the client to identify what extension
            to the BaseSection are available.
          type: string
        preActions:
          description: Actions that must be done prior to `departure`.
          type: array
          items:
            "$ref": "#/components/schemas/BaseAction"
        actions:
          description: |
            Actions to be performed at or during a specific portion of a section.

            Action offsets are the coordinate index in the polyline.

            *NOTE:* currentRoad and nextRoad are not populated for actions.
          type: array
          items:
            "$ref": "#/components/schemas/PedestrianAction"
        language:
          description: Language of the localized strings in the section, if any, in
            BCP47 format.
          type: string
        postActions:
          description: Actions that must be done after `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/PedestrianPostAction"
        turnByTurnActions:
          description: Actions for turn by turn guidance during the travel portion
            of the section, i.e., between `departure` and `arrival`.
          type: array
          items:
            "$ref": "#/components/schemas/OffsetAction"
        departure:
          "$ref": "#/components/schemas/PedestrianDeparture"
        arrival:
          "$ref": "#/components/schemas/PedestrianDeparture"
        passthrough:
          description: |
            List of via waypoints this section is passing through.

            Each via waypoint of the request that is a `passThrough=true` waypoint, appears as a
            `Passthrough` in the response. It appears in the section that starts with the closest
            non-passthrough via specified before it or origin.

            The passthrough vias appear in this list in the order they are traversed. They are
            traversed in the order they are specified in the request.
          type: array
          items:
            "$ref": "#/components/schemas/Passthrough"
        summary:
          description: |
            Total value of key attributes (e.g. duration, length) summed up for the entire section, including `preActions`, `postActions`,
            and the travel portion of the section.
          allOf:
          - "$ref": "#/components/schemas/PedestrianSummary"
        travelSummary:
          description: |
            Total value of key attributes (e.g., duration, length) summed up for just the travel portion of the section,
            between `departure` and `arrival`. `preActions` and `postActions` are excluded.
          allOf:
          - "$ref": "#/components/schemas/BaseSummary"
        polyline:
          "$ref": "#/components/schemas/Polyline"
        notices:
          description: 'Contains a list of issues related to this section of the route.

'
          type: array
          items:
            "$ref": "#/components/schemas/PedestrianNotice"
        transport:
          "$ref": "#/components/schemas/PedestrianTransport"
        spans:
          description: 'Spans attached to a `Section` describing pedestrian content.

'
          type: array
          items:
            "$ref": "#/components/schemas/PedestrianSpan"
        refReplacements:
          description: 'Dictionary of placeholders to replacement strings for the
            compact representation of map entity references.

'
          type: object
          additionalProperties:
            type: string
      required:
      - id
      - type
      - departure
      - arrival
      - transport
    TransitRouteSection:
      description: A transit or pedestrian section of the route.
      oneOf:
      - "$ref": "#/components/schemas/PedestrianSection"
      - "$ref": "#/components/schemas/TransitSection"
      discriminator:
        propertyName: type
        mapping:
          pedestrian: "#/components/schemas/PedestrianSection"
          transit: "#/components/schemas/TransitSection"
    TransitRoute:
      description: A basic transit routing response. It may include transit and walk
        sections.
      properties:
        id:
          description: Unique identifier of the route
          type: string
        notices:
          description: |
            Contains a list of issues related to this route.
            Follows a list of possible notice codes:

            * `changeOptionViolated`: This route contains more changes than specified by the `changes` parameter.
            * `nonviableRoute`: Based on the real-time situation, one or more changes on the route.
              are not possible. This can happen if real-time re-routing is not available on this area.
          type: array
          items:
            "$ref": "#/components/schemas/Notice"
        sections:
          type: array
          items:
            "$ref": "#/components/schemas/TransitRouteSection"
          description: A list of transit and pedestrian sections of the route.
      required:
      - id
      - sections
    TransitRouteResponse:
      description: Returns a list of routes.
      properties:
        notices:
          description: |
            Contains a list of issues related to this response.
            Follows a list of possible notice codes:

            * `noRouteFound`: Routing between origin and destination is not possible given current input parameters.
            * `noRoutesFound`: (Deprecated) For more information, see noRouteFound.
            * `noTransitRouteFound`: Transit routing between origin and destination is not possible given current input parameters (other types of routes are available).
            * `noCoverage`: Routing is not possible due to missing transit information at this time.
            * `noStationsFound`: Routing is not possible due to missing stations in a given range.
            * `noAllowedTransitModes`: All transit modes are excluded in the request.
          type: array
          items:
            "$ref": "#/components/schemas/Notice"
        routes:
          description: List of possible routes.
          type: array
          items:
            "$ref": "#/components/schemas/TransitRoute"
      required:
      - routes
  responses:
    400ErrorResponse:
      description: API response in case of bad request.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
      content:
        application/json:
          schema:
            allOf:
            - "$ref": "#/components/schemas/ErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/400errorResponseExample"
    401ErrorResponse:
      description: API response in case of unauthorized access.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/AuthErrorResponseSchema"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/401errorResponseExample"
    403ErrorResponse:
      description: API response in case of forbidden access.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/AuthErrorResponseSchema"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/403errorResponseExample"
    500ErrorResponse:
      description: API response in case of internal server error.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
      content:
        application/json:
          schema:
            allOf:
            - "$ref": "#/components/schemas/ErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/500errorResponseExample"
    502ErrorResponse:
      description: API response in case of bad gateway.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
      content:
        application/json:
          schema:
            allOf:
            - "$ref": "#/components/schemas/ErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/502errorResponseExample"
    503ErrorResponse:
      description: API response in case of service unavailable.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
      content:
        application/json:
          schema:
            allOf:
            - "$ref": "#/components/schemas/ErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/503errorResponseExample"
    504ErrorResponse:
      description: API response in case of gateway timeout.
      headers:
        X-Correlation-Id:
          "$ref": "#/components/headers/X-Correlation-Id"
      content:
        application/json:
          schema:
            allOf:
            - "$ref": "#/components/schemas/ErrorResponse"
          examples:
            errorResponseExample:
              "$ref": "#/components/examples/504errorResponseExample"
    HealthResponseFail:
      description: API response in case of failure.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/HealthResponseFailSchema"
        text/plain: {}
    HealthResponseOk:
      description: API response in case of success.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/HealthResponseOKSchema"
    VersionResponseOk:
      description: API response in case of success.
      content:
        application/json:
          schema:
            allOf:
            - "$ref": "#/components/schemas/VersionResponse"
  examples:
    400errorResponseExample:
      value:
        title: 'failed with reason: missing field `destination`'
        status: 400
        code: E600000
        cause: Bad request
        action: ''
        correlationId: ''
    401errorResponseExample:
      value:
        error: Unauthorized
        error_description: No credentials found
    403errorResponseExample:
      value:
        error: Forbidden
        error_description: These credentials do not authorize access.
    500errorResponseExample:
      value:
        title: 'failed with reason: internal server error'
        status: 500
        code: E600103
        cause: Internal Server Error
        action: ''
        correlationId: ''
    502errorResponseExample:
      value:
        title: 'failed with reason: bad gateway'
        status: 502
        code: E600002
        cause: Bad Gateway
        action: ''
        correlationId: ''
    503errorResponseExample:
      value:
        title: 'failed with reason: service unavailable'
        status: 503
        code: E600001
        cause: Service Unavailable
        action: ''
        correlationId: ''
    504errorResponseExample:
      value:
        title: 'failed with reason: gateway timeout'
        status: 504
        code: E600000
        cause: Gateway Timeout
        action: ''
        correlationId: ''
