# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbclasses

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Image(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Image()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsImage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Image
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Image
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Image
    def WebpImage(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Image
    def WebpImageAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # Image
    def WebpImageLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Image
    def WebpImageIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Image
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Image
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(4)
def ImageStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddTimestamp(builder, timestamp): builder.PrependInt64Slot(0, timestamp, 0)
def ImageAddTimestamp(builder, timestamp):
    """This method is deprecated. Please switch to AddTimestamp."""
    return AddTimestamp(builder, timestamp)
def AddWebpImage(builder, webpImage): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(webpImage), 0)
def ImageAddWebpImage(builder, webpImage):
    """This method is deprecated. Please switch to AddWebpImage."""
    return AddWebpImage(builder, webpImage)
def StartWebpImageVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ImageStartWebpImageVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartWebpImageVector(builder, numElems)
def AddWidth(builder, width): builder.PrependInt32Slot(2, width, 0)
def ImageAddWidth(builder, width):
    """This method is deprecated. Please switch to AddWidth."""
    return AddWidth(builder, width)
def AddHeight(builder, height): builder.PrependInt32Slot(3, height, 0)
def ImageAddHeight(builder, height):
    """This method is deprecated. Please switch to AddHeight."""
    return AddHeight(builder, height)
def End(builder): return builder.EndObject()
def ImageEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)