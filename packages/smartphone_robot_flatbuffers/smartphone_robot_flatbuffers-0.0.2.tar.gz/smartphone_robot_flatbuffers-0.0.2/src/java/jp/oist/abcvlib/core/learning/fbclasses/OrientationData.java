// automatically generated by the FlatBuffers compiler, do not modify

package jp.oist.abcvlib.core.learning.fbclasses;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class OrientationData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static OrientationData getRootAsOrientationData(ByteBuffer _bb) { return getRootAsOrientationData(_bb, new OrientationData()); }
  public static OrientationData getRootAsOrientationData(ByteBuffer _bb, OrientationData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OrientationData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long timestamps(int j) { int o = __offset(4); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int timestampsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public LongVector timestampsVector() { return timestampsVector(new LongVector()); }
  public LongVector timestampsVector(LongVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer timestampsAsByteBuffer() { return __vector_as_bytebuffer(4, 8); }
  public ByteBuffer timestampsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 8); }
  public double tiltangle(int j) { int o = __offset(6); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int tiltangleLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector tiltangleVector() { return tiltangleVector(new DoubleVector()); }
  public DoubleVector tiltangleVector(DoubleVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer tiltangleAsByteBuffer() { return __vector_as_bytebuffer(6, 8); }
  public ByteBuffer tiltangleInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 8); }
  public double tiltvelocity(int j) { int o = __offset(8); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int tiltvelocityLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector tiltvelocityVector() { return tiltvelocityVector(new DoubleVector()); }
  public DoubleVector tiltvelocityVector(DoubleVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer tiltvelocityAsByteBuffer() { return __vector_as_bytebuffer(8, 8); }
  public ByteBuffer tiltvelocityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 8); }

  public static int createOrientationData(FlatBufferBuilder builder,
      int timestampsOffset,
      int tiltangleOffset,
      int tiltvelocityOffset) {
    builder.startTable(3);
    OrientationData.addTiltvelocity(builder, tiltvelocityOffset);
    OrientationData.addTiltangle(builder, tiltangleOffset);
    OrientationData.addTimestamps(builder, timestampsOffset);
    return OrientationData.endOrientationData(builder);
  }

  public static void startOrientationData(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addTimestamps(FlatBufferBuilder builder, int timestampsOffset) { builder.addOffset(0, timestampsOffset, 0); }
  public static int createTimestampsVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startTimestampsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addTiltangle(FlatBufferBuilder builder, int tiltangleOffset) { builder.addOffset(1, tiltangleOffset, 0); }
  public static int createTiltangleVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startTiltangleVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addTiltvelocity(FlatBufferBuilder builder, int tiltvelocityOffset) { builder.addOffset(2, tiltvelocityOffset, 0); }
  public static int createTiltvelocityVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startTiltvelocityVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endOrientationData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OrientationData get(int j) { return get(new OrientationData(), j); }
    public OrientationData get(OrientationData obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

