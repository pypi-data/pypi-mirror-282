// automatically generated by the FlatBuffers compiler, do not modify

package jp.oist.abcvlib.core.learning.fbclasses;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class WheelData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static WheelData getRootAsWheelData(ByteBuffer _bb) { return getRootAsWheelData(_bb, new WheelData()); }
  public static WheelData getRootAsWheelData(ByteBuffer _bb, WheelData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public WheelData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public jp.oist.abcvlib.core.learning.fbclasses.IndividualWheelData left() { return left(new jp.oist.abcvlib.core.learning.fbclasses.IndividualWheelData()); }
  public jp.oist.abcvlib.core.learning.fbclasses.IndividualWheelData left(jp.oist.abcvlib.core.learning.fbclasses.IndividualWheelData obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public jp.oist.abcvlib.core.learning.fbclasses.IndividualWheelData right() { return right(new jp.oist.abcvlib.core.learning.fbclasses.IndividualWheelData()); }
  public jp.oist.abcvlib.core.learning.fbclasses.IndividualWheelData right(jp.oist.abcvlib.core.learning.fbclasses.IndividualWheelData obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createWheelData(FlatBufferBuilder builder,
      int leftOffset,
      int rightOffset) {
    builder.startTable(2);
    WheelData.addRight(builder, rightOffset);
    WheelData.addLeft(builder, leftOffset);
    return WheelData.endWheelData(builder);
  }

  public static void startWheelData(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addLeft(FlatBufferBuilder builder, int leftOffset) { builder.addOffset(0, leftOffset, 0); }
  public static void addRight(FlatBufferBuilder builder, int rightOffset) { builder.addOffset(1, rightOffset, 0); }
  public static int endWheelData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public WheelData get(int j) { return get(new WheelData(), j); }
    public WheelData get(WheelData obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

