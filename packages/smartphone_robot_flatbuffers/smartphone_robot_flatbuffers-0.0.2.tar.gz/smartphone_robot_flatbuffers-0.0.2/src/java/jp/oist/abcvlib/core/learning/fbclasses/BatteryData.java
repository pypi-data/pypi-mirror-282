// automatically generated by the FlatBuffers compiler, do not modify

package jp.oist.abcvlib.core.learning.fbclasses;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class BatteryData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static BatteryData getRootAsBatteryData(ByteBuffer _bb) { return getRootAsBatteryData(_bb, new BatteryData()); }
  public static BatteryData getRootAsBatteryData(ByteBuffer _bb, BatteryData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BatteryData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long timestamps(int j) { int o = __offset(4); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int timestampsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public LongVector timestampsVector() { return timestampsVector(new LongVector()); }
  public LongVector timestampsVector(LongVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer timestampsAsByteBuffer() { return __vector_as_bytebuffer(4, 8); }
  public ByteBuffer timestampsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 8); }
  public double voltage(int j) { int o = __offset(6); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int voltageLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector voltageVector() { return voltageVector(new DoubleVector()); }
  public DoubleVector voltageVector(DoubleVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer voltageAsByteBuffer() { return __vector_as_bytebuffer(6, 8); }
  public ByteBuffer voltageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 8); }

  public static int createBatteryData(FlatBufferBuilder builder,
      int timestampsOffset,
      int voltageOffset) {
    builder.startTable(2);
    BatteryData.addVoltage(builder, voltageOffset);
    BatteryData.addTimestamps(builder, timestampsOffset);
    return BatteryData.endBatteryData(builder);
  }

  public static void startBatteryData(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addTimestamps(FlatBufferBuilder builder, int timestampsOffset) { builder.addOffset(0, timestampsOffset, 0); }
  public static int createTimestampsVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startTimestampsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addVoltage(FlatBufferBuilder builder, int voltageOffset) { builder.addOffset(1, voltageOffset, 0); }
  public static int createVoltageVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startVoltageVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endBatteryData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BatteryData get(int j) { return get(new BatteryData(), j); }
    public BatteryData get(BatteryData obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

