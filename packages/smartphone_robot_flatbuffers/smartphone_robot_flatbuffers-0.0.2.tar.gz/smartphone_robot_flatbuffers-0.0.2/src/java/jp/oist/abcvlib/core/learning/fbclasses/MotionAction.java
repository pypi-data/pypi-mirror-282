// automatically generated by the FlatBuffers compiler, do not modify

package jp.oist.abcvlib.core.learning.fbclasses;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class MotionAction extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static MotionAction getRootAsMotionAction(ByteBuffer _bb) { return getRootAsMotionAction(_bb, new MotionAction()); }
  public static MotionAction getRootAsMotionAction(ByteBuffer _bb, MotionAction obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MotionAction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte actionByte() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String actionName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actionNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer actionNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public float leftWheelSpeed() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float rightWheelSpeed() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public boolean leftWheelBrake() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean rightWheelBrake() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createMotionAction(FlatBufferBuilder builder,
      byte action_byte,
      int action_nameOffset,
      float left_wheel_speed,
      float right_wheel_speed,
      boolean left_wheel_brake,
      boolean right_wheel_brake) {
    builder.startTable(6);
    MotionAction.addRightWheelSpeed(builder, right_wheel_speed);
    MotionAction.addLeftWheelSpeed(builder, left_wheel_speed);
    MotionAction.addActionName(builder, action_nameOffset);
    MotionAction.addRightWheelBrake(builder, right_wheel_brake);
    MotionAction.addLeftWheelBrake(builder, left_wheel_brake);
    MotionAction.addActionByte(builder, action_byte);
    return MotionAction.endMotionAction(builder);
  }

  public static void startMotionAction(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addActionByte(FlatBufferBuilder builder, byte actionByte) { builder.addByte(0, actionByte, 0); }
  public static void addActionName(FlatBufferBuilder builder, int actionNameOffset) { builder.addOffset(1, actionNameOffset, 0); }
  public static void addLeftWheelSpeed(FlatBufferBuilder builder, float leftWheelSpeed) { builder.addFloat(2, leftWheelSpeed, 0.0f); }
  public static void addRightWheelSpeed(FlatBufferBuilder builder, float rightWheelSpeed) { builder.addFloat(3, rightWheelSpeed, 0.0f); }
  public static void addLeftWheelBrake(FlatBufferBuilder builder, boolean leftWheelBrake) { builder.addBoolean(4, leftWheelBrake, false); }
  public static void addRightWheelBrake(FlatBufferBuilder builder, boolean rightWheelBrake) { builder.addBoolean(5, rightWheelBrake, false); }
  public static int endMotionAction(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MotionAction get(int j) { return get(new MotionAction(), j); }
    public MotionAction get(MotionAction obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

