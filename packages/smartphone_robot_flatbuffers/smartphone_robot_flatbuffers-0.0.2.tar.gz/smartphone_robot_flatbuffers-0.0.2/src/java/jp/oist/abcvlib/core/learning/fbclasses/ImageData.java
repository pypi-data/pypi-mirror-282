// automatically generated by the FlatBuffers compiler, do not modify

package jp.oist.abcvlib.core.learning.fbclasses;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ImageData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static ImageData getRootAsImageData(ByteBuffer _bb) { return getRootAsImageData(_bb, new ImageData()); }
  public static ImageData getRootAsImageData(ByteBuffer _bb, ImageData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ImageData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public jp.oist.abcvlib.core.learning.fbclasses.Image images(int j) { return images(new jp.oist.abcvlib.core.learning.fbclasses.Image(), j); }
  public jp.oist.abcvlib.core.learning.fbclasses.Image images(jp.oist.abcvlib.core.learning.fbclasses.Image obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int imagesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public jp.oist.abcvlib.core.learning.fbclasses.Image.Vector imagesVector() { return imagesVector(new jp.oist.abcvlib.core.learning.fbclasses.Image.Vector()); }
  public jp.oist.abcvlib.core.learning.fbclasses.Image.Vector imagesVector(jp.oist.abcvlib.core.learning.fbclasses.Image.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createImageData(FlatBufferBuilder builder,
      int imagesOffset) {
    builder.startTable(1);
    ImageData.addImages(builder, imagesOffset);
    return ImageData.endImageData(builder);
  }

  public static void startImageData(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addImages(FlatBufferBuilder builder, int imagesOffset) { builder.addOffset(0, imagesOffset, 0); }
  public static int createImagesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startImagesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endImageData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ImageData get(int j) { return get(new ImageData(), j); }
    public ImageData get(ImageData obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

