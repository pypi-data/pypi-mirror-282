// automatically generated by the FlatBuffers compiler, do not modify

package jp.oist.abcvlib.core.learning.fbclasses;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Episode extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static Episode getRootAsEpisode(ByteBuffer _bb) { return getRootAsEpisode(_bb, new Episode()); }
  public static Episode getRootAsEpisode(ByteBuffer _bb, Episode obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Episode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public jp.oist.abcvlib.core.learning.fbclasses.TimeStep timesteps(int j) { return timesteps(new jp.oist.abcvlib.core.learning.fbclasses.TimeStep(), j); }
  public jp.oist.abcvlib.core.learning.fbclasses.TimeStep timesteps(jp.oist.abcvlib.core.learning.fbclasses.TimeStep obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int timestepsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public jp.oist.abcvlib.core.learning.fbclasses.TimeStep.Vector timestepsVector() { return timestepsVector(new jp.oist.abcvlib.core.learning.fbclasses.TimeStep.Vector()); }
  public jp.oist.abcvlib.core.learning.fbclasses.TimeStep.Vector timestepsVector(jp.oist.abcvlib.core.learning.fbclasses.TimeStep.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int robotid() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createEpisode(FlatBufferBuilder builder,
      int timestepsOffset,
      int robotid) {
    builder.startTable(2);
    Episode.addRobotid(builder, robotid);
    Episode.addTimesteps(builder, timestepsOffset);
    return Episode.endEpisode(builder);
  }

  public static void startEpisode(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addTimesteps(FlatBufferBuilder builder, int timestepsOffset) { builder.addOffset(0, timestepsOffset, 0); }
  public static int createTimestepsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTimestepsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRobotid(FlatBufferBuilder builder, int robotid) { builder.addInt(1, robotid, 0); }
  public static int endEpisode(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEpisodeBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedEpisodeBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Episode get(int j) { return get(new Episode(), j); }
    public Episode get(Episode obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

