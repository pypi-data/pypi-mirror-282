// automatically generated by the FlatBuffers compiler, do not modify

package jp.oist.abcvlib.core.learning.fbclasses;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SoundData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static SoundData getRootAsSoundData(ByteBuffer _bb) { return getRootAsSoundData(_bb, new SoundData()); }
  public static SoundData getRootAsSoundData(ByteBuffer _bb, SoundData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SoundData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public jp.oist.abcvlib.core.learning.fbclasses.AudioTimestamp startTime() { return startTime(new jp.oist.abcvlib.core.learning.fbclasses.AudioTimestamp()); }
  public jp.oist.abcvlib.core.learning.fbclasses.AudioTimestamp startTime(jp.oist.abcvlib.core.learning.fbclasses.AudioTimestamp obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public jp.oist.abcvlib.core.learning.fbclasses.AudioTimestamp endTime() { return endTime(new jp.oist.abcvlib.core.learning.fbclasses.AudioTimestamp()); }
  public jp.oist.abcvlib.core.learning.fbclasses.AudioTimestamp endTime(jp.oist.abcvlib.core.learning.fbclasses.AudioTimestamp obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public double totalTime() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public int sampleRate() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long totalSamples() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public float levels(int j) { int o = __offset(14); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int levelsLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public FloatVector levelsVector() { return levelsVector(new FloatVector()); }
  public FloatVector levelsVector(FloatVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer levelsAsByteBuffer() { return __vector_as_bytebuffer(14, 4); }
  public ByteBuffer levelsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 4); }

  public static int createSoundData(FlatBufferBuilder builder,
      int start_timeOffset,
      int end_timeOffset,
      double total_time,
      int sample_rate,
      long total_samples,
      int levelsOffset) {
    builder.startTable(6);
    SoundData.addTotalSamples(builder, total_samples);
    SoundData.addTotalTime(builder, total_time);
    SoundData.addLevels(builder, levelsOffset);
    SoundData.addSampleRate(builder, sample_rate);
    SoundData.addEndTime(builder, end_timeOffset);
    SoundData.addStartTime(builder, start_timeOffset);
    return SoundData.endSoundData(builder);
  }

  public static void startSoundData(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(0, startTimeOffset, 0); }
  public static void addEndTime(FlatBufferBuilder builder, int endTimeOffset) { builder.addOffset(1, endTimeOffset, 0); }
  public static void addTotalTime(FlatBufferBuilder builder, double totalTime) { builder.addDouble(2, totalTime, 0.0); }
  public static void addSampleRate(FlatBufferBuilder builder, int sampleRate) { builder.addInt(3, sampleRate, 0); }
  public static void addTotalSamples(FlatBufferBuilder builder, long totalSamples) { builder.addLong(4, totalSamples, 0L); }
  public static void addLevels(FlatBufferBuilder builder, int levelsOffset) { builder.addOffset(5, levelsOffset, 0); }
  public static int createLevelsVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startLevelsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSoundData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SoundData get(int j) { return get(new SoundData(), j); }
    public SoundData get(SoundData obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

