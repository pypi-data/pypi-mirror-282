# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbclasses

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Episode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Episode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEpisode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Episode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Episode
    def Timesteps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from jp.oist.abcvlib.core.learning.fbclasses.TimeStep import TimeStep
            obj = TimeStep()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Episode
    def TimestepsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Episode
    def TimestepsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Episode
    def Robotid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(2)
def EpisodeStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddTimesteps(builder, timesteps): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(timesteps), 0)
def EpisodeAddTimesteps(builder, timesteps):
    """This method is deprecated. Please switch to AddTimesteps."""
    return AddTimesteps(builder, timesteps)
def StartTimestepsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EpisodeStartTimestepsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartTimestepsVector(builder, numElems)
def AddRobotid(builder, robotid): builder.PrependInt32Slot(1, robotid, 0)
def EpisodeAddRobotid(builder, robotid):
    """This method is deprecated. Please switch to AddRobotid."""
    return AddRobotid(builder, robotid)
def End(builder): return builder.EndObject()
def EpisodeEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)