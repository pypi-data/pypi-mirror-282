[build-system]
requires = ["setuptools>=42.0"]
build-backend = "setuptools.build_meta"

[project]
name = "pidgan"
dynamic = ["version"]
description = "GAN-based models to flash-simulate the LHCb PID detectors"
readme = "README.md"
requires-python = ">=3.7, <3.13"
license = {text = "GPLv3 License"}
authors = [
  {name = "Matteo Barbetti", email = "matteo.barbetti@cnaf.infn.it"},
  {name = "Lucio Anderlini", email = "lucio.anderlini@fi.infn.it"},
]
keywords = [
  "tensorflow",
  "keras",
  "machine learning",
  "deep learning",
  "generative models",
  "generative adversarial nets",
  "lhcb experiment",
  "lamarr",
  "flash-simulation",
  "particle identification",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: GPU :: NVIDIA CUDA :: 11.2",
  "Environment :: GPU :: NVIDIA CUDA :: 11.8",
  "Environment :: GPU :: NVIDIA CUDA :: 12 :: 12.2",
  # "Environment :: GPU :: NVIDIA CUDA :: 12 :: 12.3",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Physics",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
  "tensorflow>=2.8,<2.17",
  "scikit-learn>=1.0,<1.6",
  "numpy<2.0",
  # "hopaas-client",   # to be released on PyPI
]

[project.optional-dependencies]
hep = [
  "matplotlib>=3.7,<4.0",
  "html-reports>=0.2",
  "scikinC>=0.2.6",
  "pandas",
  "uproot",
  "pyyaml",
  "tqdm",
]
style = [
  "ruff",
]
tests = [
  "pytest>=6.0",
  "pytest-cov",
  "pyyaml",
]

[project.urls]
repository = "https://github.com/mbarbetti/pidgan"

[tool.setuptools.dynamic]
version = {attr = "pidgan.__version__"}

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10
target-version = "py310"

# Enable linting and formatting for .ipynb files.
extend-include = ["*.ipynb"]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Add the `line-too-long` rule to the enforced rule set.
extend-select = ["E501"]

# Ignore `E402` (import violations) in all `__init__.py` files.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
