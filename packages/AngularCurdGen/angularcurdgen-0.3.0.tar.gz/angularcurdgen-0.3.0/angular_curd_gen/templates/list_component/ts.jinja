{% from 'macros/list_filter_params.jinja' import gen_list_filter_params, gen_list_filter_params_only -%}
{% set service_name = model_name+'Service' -%}
{% set models_list_var = models_name+'List' -%}
import {Component, OnInit} from '@angular/core';
import {NzMessageService} from "ng-zorro-antd/message";

import { {{ service_name }}} from '../{{ lower_model_name }}_api.service';
import { {{ model_name }} } from '../{{ lower_model_name }}_interfaces';

@Component({
  selector: 'app-{{ lower_model_name }}-list',
  templateUrl: './{{ lower_model_name }}-list.component.html',
  styleUrls: ['./{{ lower_model_name }}-list.component.css']
})
export class {{ model_name }}ListComponent implements OnInit {
  {{ models_list_var }}: {{ model_name }}[] = [];

  {% for field,field_type in list_filter_fields_type_map.items() %}
  query{{ field| to_camel }}?: {{ cls.map_ts_type(field_type) }}
  {% endfor %}


  constructor(
    private api: {{ service_name }},
    private msg: NzMessageService,
  ) {}

  ngOnInit(): void {
    this.get{{ models_name }}();
  }

  get{{ models_name }}({{ gen_list_filter_params(cls, list_filter_fields_type_map) }}) {
    this.api.get{{ models_name }}({{ gen_list_filter_params_only(list_filter_fields_type_map) }}).subscribe({
      next: ({{ lower_models_name }}) => {
        this.{{ models_name }}List = {{ lower_models_name }};
        if ({{ lower_models_name }}.length) {
            this.msg.success('获取{{ model_readable_name }}列表成功');
        } else {
            this.msg.warning('获取{{ model_readable_name }}列表为空');
        }
      },
    });
  }

  getReset{{ models_name }}() {
    {%- for field,field_type in list_filter_fields_type_map.items() %}
    this.query{{ field| to_camel }} = undefined;
    {%- endfor %}
    this.get{{ models_name }}();
  }

  delete{{ model_name }}(id: number): void {
    this.api.delete{{ model_name }}(id).subscribe({
      next: () => {
        this.{{ models_list_var }} = this.{{ models_list_var }}.filter(({{ lower_model_name }}) => {{ lower_model_name }}.id !== id);
        this.msg.success('删除{{ model_readable_name }}成功');
      }
    });
  }

  giveUpDelete{{ model_name }}(): void {
  }

  {% for field in list_sort_fields %}
  // @ts-ignore
  sort{{ model_name }}{{ field|to_camel }}(a, b) {
      return a.{{ field }} - b.{{ field }}
  }
  {% endfor %}
}
