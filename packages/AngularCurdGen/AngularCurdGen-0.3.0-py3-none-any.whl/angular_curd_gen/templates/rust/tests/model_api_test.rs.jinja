use axum::{
    body::Body,
    http::{Request, StatusCode},
};
use {{ app_name }}::create_app;
use tower::util::ServiceExt;
use http_body_util::BodyExt;

#[tokio::test]
async fn test_get_{{ lower_models_name }}() {
    let app = create_app().await;

    // 200 list
    let response = app
        .oneshot(
            Request::builder()
                .method("GET")
                .uri("/{{ app_name }}/{{ lower_models_name }}")
                .header("content-type", "application/json")
                .body(Body::empty())
                .unwrap(),
        )
        .await
        .unwrap();

    assert_eq!(response.status(), StatusCode::OK);
    let body = response.into_body().collect().await.unwrap().to_bytes();
    assert!(!body.is_empty());
}


#[tokio::test]
async fn test_create_{{ lower_model_name }}() {
    let app = create_app().await;
    let json = serde_json::json!(
        {
            {% for form_field,type in model_create_fields_type_map.items() -%}
            {% set py_type=cls.extract_py_type(type) -%}
            {% if py_type in ["int","float"] -%}
                "{{ form_field }}": 1,
            {% elif py_type=='bool' -%}
                "{{ form_field }}": true,
            {% else -%}
                "{{ form_field }}": format!("test_{}", chrono::Local::now().timestamp()),
            {% endif %}
    {%- endfor -%}
    }
    );
    let response = app
        .oneshot(
            Request::builder()
                .method("POST")
                .uri("/{{ app_name }}/{{ lower_models_name }}")
                .header("content-type", "application/json")
                .body(Body::from(json.to_string()))
                .unwrap(),
        )
        .await
        .unwrap();

    assert_eq!(response.status(), StatusCode::CREATED);
}

#[tokio::test]
async fn test_get_{{ lower_model_name }}() {
    let app = create_app().await;

    let response = app
        .oneshot(
            Request::builder()
                .method("GET")
                .uri("/{{ app_name }}/{{ lower_models_name }}/{{ db_first_id }}")
                .header("content-type", "application/json")
                .body(Body::empty())
                .unwrap(),
        )
        .await
        .unwrap();

    assert_eq!(response.status(), StatusCode::OK);
}

#[tokio::test]
async fn test_update_{{ lower_model_name }}() {
    let app = create_app().await;
    let json = serde_json::json!(
        {
            {% for form_field,type in model_edit_fields_type_map.items() -%}
            {% set py_type=cls.extract_py_type(type) -%}
            {% if py_type in ["int","float"] -%}
                "{{ form_field }}": 1,
            {% elif py_type=='bool' -%}
                "{{ form_field }}": true,
            {% else -%}
                "{{ form_field }}": format!("test_{}", chrono::Local::now().timestamp()),
            {% endif %}
    {%- endfor -%}
    }
    );
    let response = app
        .oneshot(
            Request::builder()
                .method("PUT")
                .uri("/{{ app_name }}/{{ lower_models_name }}/{{ db_first_id }}")
                .header("content-type", "application/json")
                .body(Body::from(json.to_string()))
                .unwrap(),
        )
        .await
        .unwrap();

    assert_eq!(response.status(), StatusCode::OK);
}

#[tokio::test]
async fn test_delete_{{ lower_model_name }}() {
    let app = create_app().await;

    let response = app
        .oneshot(
            Request::builder()
                .method("DELETE")
                .uri("/{{ app_name }}/{{ lower_models_name }}/{{ db_last_id }}")
                .header("content-type", "application/json")
                .body(Body::empty())
                .unwrap(),
        )
        .await
        .unwrap();

    assert_eq!(response.status(), StatusCode::NO_CONTENT);
}