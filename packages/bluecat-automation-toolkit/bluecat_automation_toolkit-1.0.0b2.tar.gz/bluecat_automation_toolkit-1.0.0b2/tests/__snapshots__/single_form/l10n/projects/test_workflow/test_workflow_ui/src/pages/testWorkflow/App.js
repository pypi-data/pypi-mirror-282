/*
This file was generated by BlueCat Automation Toolkit (BATK).
Portions which reproduce template contents from BATK are Copyright 2023 BlueCat Networks Inc.
Other contents are owned by their authors.
 */
import { useEffect, useState } from 'react';
import {
    doGet,
    doPost,
    FormButtons,
    FormLayout,
    processErrorMessages,
    replaceKeys,
    PageToolkit,
    PageBody,
    PageContent,
    usePageError,
    usePageMessages,
    usePageModalSpinner,
    useTrigger,
} from '@bluecateng/limani';
import { Form, validateNotEmpty } from '@bluecateng/auto-forms';
import { FormFields } from './FormFields';
import { t } from '@bluecateng/l10n.macro';
import setLanguage from '../../functions/setLanguage';
import './App.less';

const BE_FE = new Map([
    ['configuration', 'configuration'],
    ['view', 'view'],
    ['zone', 'zone'],
    ['name', 'name'],
    ['text', 'text'],
]);

const Content = () => {
    const { addMessages, addSuccessMessage } = usePageMessages();
    const { setBusy } = usePageModalSpinner();
    const { setError } = usePageError();
    const [triggerLoad, toggleTriggerLoad] = useTrigger();
    const [initialFormData, setInitialFormData] = useState(null);

    useEffect(() => {
        doGet('/test_workflow/configurations')
            .then((data) => {
                setInitialFormData({
                    configurations: data.configurations,
                    configuration: '',
                    view: '',
                    zone: '',
                    name: '',
                    text: '',
                });
            })
            .catch((error) => {
                setError(error);
            });
    }, [triggerLoad]);

    const extraValidation = (errors, { configuration, view, zone }) => ({
        ...errors,
        configuration: validateNotEmpty(t`Please select a configuration.`)(configuration?.name),
        view: validateNotEmpty(t`Please select a view.`)(view?.name),
        zone: validateNotEmpty(t`Please select a zone.`)(zone?.name),
    });


    const handleSubmit = (values, { setErrors }) => {
        setBusy(true);
        const payload = new FormData();
        payload.append('zone_name', values.zone.name);
        payload.append('zone_id', values.zone.id);
        payload.append('name', values.name);
        payload.append('text', values.text);

        doPost('/test_workflow', payload)
            .then((data) => {
                addSuccessMessage(data.message);
                toggleTriggerLoad();
            })
            .catch((error) => {
                const { page: pageErrors, fields: fieldsErrors } = processErrorMessages(
                    error,
                    Array.from(BE_FE.keys()),
                    true,
                );
                setErrors(replaceKeys(fieldsErrors, BE_FE));
                addMessages(pageErrors.map((text) => ({ type: 'error', text: text })));
            })
            .finally(() => setBusy(false));
    };

    return (
        <>
            {initialFormData && (
                <PageBody>
                    <PageContent pageTitle={t`test_workflow`}>
                        <FormLayout>
                            <Form
                                className='WorkflowForm'
                                initialValues={initialFormData}
                                rules={{}}
                                extraValidation={extraValidation}
                                onSubmit={handleSubmit}>
                                <FormFields initialFormData={initialFormData} />
                                <FormButtons />
                            </Form>
                        </FormLayout>
                    </PageContent>
                </PageBody>
            )}
        </>
    );
};

export default function App() {
    return (
        <PageToolkit onLanguageChange={setLanguage}>
            <Content />
        </PageToolkit>
    );
}
