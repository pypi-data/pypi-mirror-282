/*
Copyright 4000 Tester2

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

This file was generated by BlueCat Automation Toolkit (BATK).
Portions which reproduce template contents from BATK are Copyright 2023 BlueCat Networks Inc.
Other contents are owned by their authors.
 */
import { useEffect, useState } from 'react';
import {
    doGet,
    doPost,
    FormButtons,
    FormLayout,
    processErrorMessages,
    replaceKeys,
    SimplePage,
    usePageError,
    usePageMessages,
    usePageModalSpinner,
    useTrigger,
} from '@bluecateng/limani';
import { Form, validateNotEmpty } from '@bluecateng/auto-forms';
import { FormFields } from './FormFields';
import './App.less';

const BE_FE = new Map([
    ['configuration', 'configuration'],
    ['view', 'view'],
    ['zone', 'zone'],
    ['name', 'name'],
    ['text', 'text'],
]);

const Content = () => {
    const { addMessages, addSuccessMessage } = usePageMessages();
    const { setBusy } = usePageModalSpinner();
    const { setError } = usePageError();
    const [triggerLoad, toggleTriggerLoad] = useTrigger();
    const [initialFormData, setInitialFormData] = useState(null);

    useEffect(() => {
        doGet('/test_name_2/configurations')
            .then((data) => {
                setInitialFormData({
                    configurations: data.configurations,
                    configuration: '',
                    view: '',
                    zone: '',
                    name: '',
                    text: '',
                });
            })
            .catch((error) => {
                setError(error);
            });
    }, [triggerLoad]);

    const extraValidation = (errors, { configuration, view, zone }) => ({
        ...errors,
        configuration: validateNotEmpty('Please select a configuration.')(configuration?.name),
        view: validateNotEmpty('Please select a view.')(view?.name),
        zone: validateNotEmpty('Please select a zone.')(zone?.name),
    });


    const handleSubmit = (values, { setErrors }) => {
        setBusy(true);
        const payload = new FormData();
        payload.append('zone_name', values.zone.name);
        payload.append('zone_id', values.zone.id);
        payload.append('name', values.name);
        payload.append('text', values.text);

        doPost('/test_name_2', payload)
            .then((data) => {
                addSuccessMessage(data.message);
                toggleTriggerLoad();
            })
            .catch((error) => {
                const { page: pageErrors, fields: fieldsErrors } = processErrorMessages(
                    error,
                    Array.from(BE_FE.keys()),
                    true,
                );
                setErrors(replaceKeys(fieldsErrors, BE_FE));
                addMessages(pageErrors.map((text) => ({ type: 'error', text: text })));
            })
            .finally(() => setBusy(false));
    };

    return (
        <>
            {initialFormData && (
                <FormLayout>
                    <Form
                        className='WorkflowForm'
                        initialValues={initialFormData}
                        rules={{}}
                        extraValidation={extraValidation}
                        onSubmit={handleSubmit}>
                        <FormFields initialFormData={initialFormData} />
                        <FormButtons />
                    </Form>
                </FormLayout>
            )}
        </>
    );
};

export default function App() {
    return (
        <SimplePage pageTitle='Workflow title 2'>
            <Content />
        </SimplePage>
    );
}
