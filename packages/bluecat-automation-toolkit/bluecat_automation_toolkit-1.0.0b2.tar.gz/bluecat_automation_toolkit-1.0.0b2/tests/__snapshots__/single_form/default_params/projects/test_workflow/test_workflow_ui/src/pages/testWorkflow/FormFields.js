/*
This file was generated by BlueCat Automation Toolkit (BATK).
Portions which reproduce template contents from BATK are Copyright 2023 BlueCat Networks Inc.
Other contents are owned by their authors.
 */
import { useCallback, useEffect, useState } from 'react';
import { FormTextInput } from '@bluecateng/pelagos-forms';
import { useFormField } from '@bluecateng/auto-forms';
import { doPost, resetForm } from '@bluecateng/limani';
import FormComboBoxField from '../../components/FormComboBoxField';

export const FormFields = ({ initialFormData }) => {
    resetForm(initialFormData);

    const { value: configurations } = useFormField('configurations');
    const {
        value: selectedConfiguration,
        setError: setSelectedConfigurationError,
        error: selectedConfigurationError,
    } = useFormField('configuration');
    const {
        value: selectedView,
        setValue: setSelectedView,
        error: selectedViewError,
        setError: setSelectedViewError,
    } = useFormField('view');
    const {
        value: selectedZone,
        setValue: setSelectedZone,
        error: selectedZoneError,
        setError: setSelectedZoneError,
    } = useFormField('zone');
    const [views, setViews] = useState([]);
    const [zones, setZones] = useState([]);

    const checkAllFieldsHasValue = useCallback(() => {
        return !(selectedConfiguration && selectedView && selectedZone);
    }, [selectedZone, selectedConfiguration, selectedView]);

    // This is to remove the errors set from extraValidation on the form when the submit button is pressed
    useEffect(() => {
        if (selectedConfiguration && selectedConfigurationError) {
            setSelectedConfigurationError(null);
        }
        if (selectedView && selectedViewError) {
            setSelectedViewError(null);
        }
        if (selectedZone && selectedZoneError) {
            setSelectedZoneError(null);
        }
    }, [selectedConfiguration, selectedView, selectedZone]);

    useEffect(() => {
        if (selectedConfiguration) {
            setSelectedView('');
            const configurationID =
                configurations.find((value) => {
                    return value.name === selectedConfiguration.name;
                })?.id ?? '';
            const payload = new FormData();
            payload.append('configuration', configurationID);
            doPost('/test_workflow/views', payload).then((data) => {
                setViews(data.views.length === 0 ? [] : data.views);
            });
        } else {
            setSelectedView('');
            setSelectedZone('');
            setViews([]);
        }
    }, [selectedConfiguration]);

    useEffect(() => {
        if (selectedView && selectedConfiguration) {
            setSelectedZone('');
            const viewID = views.find((value) => {
                return value.name === selectedView.name;
            }).id;
            const payload = new FormData();
            payload.append('view', viewID);

            doPost('/test_workflow/zones', payload).then((data) => {
                setZones(data.zones.length === 0 ? [] : data.zones);
            });
        } else {
            setZones([]);
        }
    }, [selectedView, selectedConfiguration]);

    return (
        <div className='WorkflowForm__fields FormFields--standardPadding'>
            <FormComboBoxField
                id='configuration'
                name='configuration'
                label={'Configuration'}
                values={configurations}
                noMatchText={'No matching configuration was found'}
                placeholder={'Start typing to search for a Configuration'}
                required={true}
            />

            <FormComboBoxField
                id='view'
                name='view'
                label={'View'}
                values={views}
                disabled={!selectedConfiguration}
                noMatchText={'No matching view was found'}
                placeholder={'Start typing to search for a View'}
                required={true}
            />

            <FormComboBoxField
                id='zone'
                name='zone'
                label={'Zone'}
                values={zones}
                disabled={!selectedView}
                noMatchText={'No matching zone was found'}
                placeholder={'Start typing to search for a Zone'}
                required={true}
            />

            <FormTextInput
                label={'Name'}
                name='name'
                disabled={checkAllFieldsHasValue()}
            />

            <FormTextInput
                label={'Text'}
                name='text'
                disabled={checkAllFieldsHasValue()} />
        </div>
    );
};
