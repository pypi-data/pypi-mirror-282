# Gitlab ci
variables:
  APP_NAME: {{  project_name }}
  APP_NAME_SLUG: {{  project_slug }}
  CI_DOCKER_TAG: ci
  TAG: ${CI_DOCKER_TAG}
  DOCKER_REGISTRY_CI_IMAGE: ${CI_REGISTRY_IMAGE}
  DOCKER_REGISTRY: ${DOCKER_REGISTRY}
  DOCKER_REGISTRY_USER: ${DOCKER_REGISTRY_USER}
  DOCKER_REGISTRY_PASSWORD: ${DOCKER_REGISTRY_PASSWORD}
  DOCKER_TARGET_CI: ${APP_NAME_SLUG}-dev
  XDG_CACHE_HOME: ${CI_PROJECT_DIR}/.cache/

cache:
  policy: pull-push
  untracked: false
  when: on_success
  paths:
    - ".venv/"
    - "${XDG_CACHE_HOME}"




### Stages ###
stages:
  - build
  - test
  - release
  - pages

{% include "utils.gitlab-ci.yml" %}

#################################### Jobs ####################################

build-ci:
  stage: build
  variables:
    DOCKER_REGISTRY_IMAGE: ${DOCKER_REGISTRY_CI_IMAGE}
    TAG: ${CI_DOCKER_TAG}
    TARGET: ${DOCKER_TARGET_CI}
  <<: *build_job
  <<: *ci_build_rules


build:
  stage: build
  image: 
    name: ${DOCKER_REGISTRY_CI_IMAGE}:${TAG}
    pull_policy: "always"
  variables:
    TAG: ${CI_DOCKER_TAG}
    GIT_FETCH_EXTRA_FLAGS: --prune --quiet --tags
  before_script:
    - make install-all
  script:
    - export VERSION=$(git describe --tags --abbrev=1 | sed 's/\(.*\)-.*/\1/')
    - echo "VERSION=${VERSION}" >> variables.env
    - poetry version $VERSION
    - poetry run make build
  artifacts:
    untracked: false
    when: on_success
    access: all
    expire_in: "1 days"
    paths:
      - "dist/*"
    reports:
      dotenv: variables.env
  <<: *ci_rules


docs:
  image: 
    name: ${DOCKER_REGISTRY_CI_IMAGE}:${TAG}
    pull_policy: "always"
  stage: build
  before_script:
    - make install-all
  script:
    - source .venv/bin/activate
    - make docs
  artifacts:
    untracked: false
    when: on_success
    access: all
    expire_in: "1 days"
    paths:
      - "docs/build/*"
  <<: *ci_rules


pytests:
  image: ${IMAGE}
  stage: test
  before_script:
    - ./scripts/install_full_pkg.sh
  script:
    - ./scripts/tests.sh
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml
  parallel:
    matrix:
    {% for version in python_test_versions %}
    - IMAGE: python:{{ version }}-alpine{% endfor %}
  needs:
    - job: build
  <<: *ci_build_rules


{% include "coverage.gitlab-ci.yml" %}


verify:
  image: ${DOCKER_REGISTRY_CI_IMAGE}:${TAG}
  stage: test
  before_script:
    - make install-all
  script:
    - poetry run make verify
  <<: *merge_request


publish:
  image: 
    name: ${DOCKER_REGISTRY_CI_IMAGE}:${TAG}
    pull_policy: "always"
  stage: release
  variables:
    TAG: ${CI_DOCKER_TAG}
  before_script:
    - make install-all
    - echo $VERSION
  script:
    - poetry run make release
  needs:
    - job: build
      artifacts: true
  <<: *default_manual

{% include "release.gitlab-ci.yml" %}


pages:
  image: ${DOCKER_REGISTRY_CI_IMAGE}:${TAG}
  stage: pages
  variables:
    TAG: ${CI_TAG}
  script:
    - rm -r public/* || true
    - make docs
    - mkdir public
    - cp -r docs/build/dirhtml/* public/
  artifacts:
    paths:
        - public/
  <<: *default_branch