from collections.abc import Sequence
from typing import Annotated, overload

import dspedal.framework
from numpy.typing import ArrayLike


class Axis16:
    def __init__(self) -> None: ...

    @property
    def tdata(self) -> Signal16: ...

    @property
    def tvalid(self) -> Signal8: ...

    @property
    def tready(self) -> Signal8: ...

class Axis32:
    def __init__(self) -> None: ...

    @property
    def tdata(self) -> Signal32: ...

    @property
    def tvalid(self) -> Signal8: ...

    @property
    def tready(self) -> Signal8: ...

class Axis8:
    def __init__(self) -> None: ...

    @property
    def tdata(self) -> Signal8: ...

    @property
    def tvalid(self) -> Signal8: ...

    @property
    def tready(self) -> Signal8: ...

class AxisRx16(Model):
    @overload
    def __init__(self, clk: Signal8, rst: Signal8, s_axis_tdata: Signal16, s_axis_tvalid: Signal8, s_axis_tready: Signal8) -> None: ...

    @overload
    def __init__(self, clk: Signal8, rst: Signal8, s_axis: Axis16) -> None: ...

    def size(self) -> int: ...

    def __len__(self) -> int: ...

    def read(self) -> Annotated[ArrayLike, dict(dtype='uint16', shape=(None))]: ...

    @property
    def tready(self) -> int: ...

    @tready.setter
    def tready(self, value: int) -> None: ...

class AxisRx32(Model):
    @overload
    def __init__(self, clk: Signal8, rst: Signal8, s_axis_tdata: Signal32, s_axis_tvalid: Signal8, s_axis_tready: Signal8) -> None: ...

    @overload
    def __init__(self, clk: Signal8, rst: Signal8, s_axis: Axis32) -> None: ...

    def size(self) -> int: ...

    def __len__(self) -> int: ...

    def read(self) -> Annotated[ArrayLike, dict(dtype='uint32', shape=(None))]: ...

    @property
    def tready(self) -> int: ...

    @tready.setter
    def tready(self, value: int) -> None: ...

class AxisRx8(Model):
    @overload
    def __init__(self, clk: Signal8, rst: Signal8, s_axis_tdata: Signal8, s_axis_tvalid: Signal8, s_axis_tready: Signal8) -> None: ...

    @overload
    def __init__(self, clk: Signal8, rst: Signal8, s_axis: Axis8) -> None: ...

    def size(self) -> int: ...

    def __len__(self) -> int: ...

    def read(self) -> Annotated[ArrayLike, dict(dtype='uint8', shape=(None))]: ...

    @property
    def tready(self) -> int: ...

    @tready.setter
    def tready(self, value: int) -> None: ...

class AxisTx16(Model):
    @overload
    def __init__(self, clk: Signal8, rst: Signal8, m_axis_tdata: Signal16, m_axis_tvalid: Signal8, m_axis_tready: Signal8) -> None: ...

    @overload
    def __init__(self, clk: Signal8, rst: Signal8, m_axis: Axis16) -> None: ...

    @overload
    def write(self, value: int) -> None: ...

    @overload
    def write(self, tx_data: Sequence[int]) -> None: ...

class AxisTx32(Model):
    @overload
    def __init__(self, clk: Signal8, rst: Signal8, m_axis_tdata: Signal32, m_axis_tvalid: Signal8, m_axis_tready: Signal8) -> None: ...

    @overload
    def __init__(self, clk: Signal8, rst: Signal8, m_axis: Axis32) -> None: ...

    @overload
    def write(self, value: int) -> None: ...

    @overload
    def write(self, tx_data: Sequence[int]) -> None: ...

class AxisTx8(Model):
    @overload
    def __init__(self, clk: Signal8, rst: Signal8, m_axis_tdata: Signal8, m_axis_tvalid: Signal8, m_axis_tready: Signal8) -> None: ...

    @overload
    def __init__(self, clk: Signal8, rst: Signal8, m_axis: Axis8) -> None: ...

    @overload
    def write(self, value: int) -> None: ...

    @overload
    def write(self, tx_data: Sequence[int]) -> None: ...

class Clock(Signal8):
    def __init__(self, period: int) -> None: ...

    @property
    def period(self) -> int: ...

class Context:
    def __init__(self) -> None: ...

    def clear(self) -> None: ...

    def register_model(self, model: Model) -> None: ...

    def time_inc(self, time_step: int) -> None: ...

    def time(self) -> int: ...

class Dff16(Signal16):
    def __init__(self, clk: Signal8, initial: int = 0) -> None: ...

    @property
    def d(self) -> int: ...

    @d.setter
    def d(self, value: int) -> None: ...

    @property
    def q(self) -> int: ...

class Dff32(Signal32):
    def __init__(self, clk: Signal8, initial: int = 0) -> None: ...

    @property
    def d(self) -> int: ...

    @d.setter
    def d(self, value: int) -> None: ...

    @property
    def q(self) -> int: ...

class Dff8(Signal8):
    def __init__(self, clk: Signal8, initial: int = 0) -> None: ...

    @property
    def d(self) -> int: ...

    @d.setter
    def d(self, value: int) -> None: ...

    @property
    def q(self) -> int: ...

class Model:
    def __init__(self) -> None: ...

    @property
    def context(self) -> Context: ...

    def eval_step(self) -> None: ...

    def eval_end_step(self) -> None: ...

class Signal16:
    def __init__(self, initial: int = 0) -> None: ...

    def posedge(self) -> bool: ...

    def negedge(self) -> bool: ...

    def changed(self) -> bool: ...

    @property
    def d(self) -> int: ...

    @d.setter
    def d(self, value: int) -> None: ...

    @property
    def q(self) -> int: ...

class Signal32:
    def __init__(self, initial: int = 0) -> None: ...

    def posedge(self) -> bool: ...

    def negedge(self) -> bool: ...

    def changed(self) -> bool: ...

    @property
    def d(self) -> int: ...

    @d.setter
    def d(self, value: int) -> None: ...

    @property
    def q(self) -> int: ...

class Signal8:
    def __init__(self, initial: int = 0) -> None: ...

    def posedge(self) -> bool: ...

    def negedge(self) -> bool: ...

    def changed(self) -> bool: ...

    @property
    def d(self) -> int: ...

    @d.setter
    def d(self, value: int) -> None: ...

    @property
    def q(self) -> int: ...

class Simulator:
    def __init__(self) -> None: ...

    def eval(self) -> None: ...

    def advance(self, time_inc: int) -> None: ...

    def reset(self, rst: Signal8, duration: int = 100) -> None: ...

class VcdTracer:
    def __init__(self, trace_name: str, levels: int, options: int = 0) -> None: ...

    def close(self) -> None: ...

def clear_context() -> None: ...

def get_context() -> dspedal.framework.Context: ...

def set_context(context: dspedal.framework.Context) -> None: ...
