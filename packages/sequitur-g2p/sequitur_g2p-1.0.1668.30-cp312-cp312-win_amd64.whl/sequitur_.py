# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sequitur_
else:
    import _sequitur_

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class MultigramInventory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def size(self):
        return _sequitur_.MultigramInventory_size(self)

    def index(self, arg2):
        return _sequitur_.MultigramInventory_index(self, arg2)

    def symbol(self, arg2):
        return _sequitur_.MultigramInventory_symbol(self, arg2)

    def memoryUsed(self):
        return _sequitur_.MultigramInventory_memoryUsed(self)

    def __init__(self):
        _sequitur_.MultigramInventory_swiginit(self, _sequitur_.new_MultigramInventory())
    __swig_destroy__ = _sequitur_.delete_MultigramInventory

# Register MultigramInventory in _sequitur_:
_sequitur_.MultigramInventory_swigregister(MultigramInventory)
align = _sequitur_.align

class SequenceModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sequitur_.SequenceModel_swiginit(self, _sequitur_.new_SequenceModel())
    __swig_destroy__ = _sequitur_.delete_SequenceModel

    def setInitAndTerm(self, arg2, arg3):
        return _sequitur_.SequenceModel_setInitAndTerm(self, arg2, arg3)

    def set(self, arg2):
        return _sequitur_.SequenceModel_set(self, arg2)

    def get(self):
        return _sequitur_.SequenceModel_get(self)

    def getNode(self, arg2):
        return _sequitur_.SequenceModel_getNode(self, arg2)

    def init(self):
        return _sequitur_.SequenceModel_init(self)

    def term(self):
        return _sequitur_.SequenceModel_term(self)

    def initial(self):
        return _sequitur_.SequenceModel_initial(self)

    def advanced(self, arg2, arg3):
        return _sequitur_.SequenceModel_advanced(self, arg2, arg3)

    def shortened(self, arg2):
        return _sequitur_.SequenceModel_shortened(self, arg2)

    def historyAsTuple(self, arg2):
        return _sequitur_.SequenceModel_historyAsTuple(self, arg2)

    def probability(self, arg2, arg3):
        return _sequitur_.SequenceModel_probability(self, arg2, arg3)

    def memoryUsed(self):
        return _sequitur_.SequenceModel_memoryUsed(self)

# Register SequenceModel in _sequitur_:
_sequitur_.SequenceModel_swigregister(SequenceModel)
class EstimationGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def memoryUsed(self):
        return _sequitur_.EstimationGraph_memoryUsed(self)

    def __init__(self):
        _sequitur_.EstimationGraph_swiginit(self, _sequitur_.new_EstimationGraph())
    __swig_destroy__ = _sequitur_.delete_EstimationGraph

# Register EstimationGraph in _sequitur_:
_sequitur_.EstimationGraph_swigregister(EstimationGraph)
class EstimationGraphBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setSequenceModel(self, arg2, arg3):
        return _sequitur_.EstimationGraphBuilder_setSequenceModel(self, arg2, arg3)

    def clearSizeTemplates(self):
        return _sequitur_.EstimationGraphBuilder_clearSizeTemplates(self)

    def addSizeTemplate(self, left, right):
        return _sequitur_.EstimationGraphBuilder_addSizeTemplate(self, left, right)
    emergeNewMultigrams = _sequitur_.EstimationGraphBuilder_emergeNewMultigrams
    suppressNewMultigrams = _sequitur_.EstimationGraphBuilder_suppressNewMultigrams
    anonymizeNewMultigrams = _sequitur_.EstimationGraphBuilder_anonymizeNewMultigrams

    def setEmergenceMode(self, arg2):
        return _sequitur_.EstimationGraphBuilder_setEmergenceMode(self, arg2)

    def create(self, left, right):
        return _sequitur_.EstimationGraphBuilder_create(self, left, right)

    def update(self, arg2):
        return _sequitur_.EstimationGraphBuilder_update(self, arg2)

    def memoryUsed(self):
        return _sequitur_.EstimationGraphBuilder_memoryUsed(self)

    def __init__(self):
        _sequitur_.EstimationGraphBuilder_swiginit(self, _sequitur_.new_EstimationGraphBuilder())
    __swig_destroy__ = _sequitur_.delete_EstimationGraphBuilder

# Register EstimationGraphBuilder in _sequitur_:
_sequitur_.EstimationGraphBuilder_swigregister(EstimationGraphBuilder)
class SequenceModelEstimator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def makeSequenceModel(self, target, vocabularySize, discountArray):
        return _sequitur_.SequenceModelEstimator_makeSequenceModel(self, target, vocabularySize, discountArray)

    def __init__(self):
        _sequitur_.SequenceModelEstimator_swiginit(self, _sequitur_.new_SequenceModelEstimator())
    __swig_destroy__ = _sequitur_.delete_SequenceModelEstimator

# Register SequenceModelEstimator in _sequitur_:
_sequitur_.SequenceModelEstimator_swigregister(SequenceModelEstimator)
class EvidenceStore(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sequitur_.EvidenceStore_swiginit(self, _sequitur_.new_EvidenceStore())

    def setSequenceModel(self, arg2):
        return _sequitur_.EvidenceStore_setSequenceModel(self, arg2)

    def asList(self):
        return _sequitur_.EvidenceStore_asList(self)

    def size(self):
        return _sequitur_.EvidenceStore_size(self)

    def maximumHistoryLength(self):
        return _sequitur_.EvidenceStore_maximumHistoryLength(self)

    def maximum(self):
        return _sequitur_.EvidenceStore_maximum(self)

    def total(self):
        return _sequitur_.EvidenceStore_total(self)

    def makeSequenceModelEstimator(self):
        return _sequitur_.EvidenceStore_makeSequenceModelEstimator(self)

    def memoryUsed(self):
        return _sequitur_.EvidenceStore_memoryUsed(self)
    __swig_destroy__ = _sequitur_.delete_EvidenceStore

# Register EvidenceStore in _sequitur_:
_sequitur_.EvidenceStore_swigregister(EvidenceStore)
class Accumulator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sequitur_.Accumulator_swiginit(self, _sequitur_.new_Accumulator())

    def setTarget(self, arg2):
        return _sequitur_.Accumulator_setTarget(self, arg2)

    def accumulate(self, arg2, weight):
        return _sequitur_.Accumulator_accumulate(self, arg2, weight)

    def logLik(self, arg2):
        return _sequitur_.Accumulator_logLik(self, arg2)
    __swig_destroy__ = _sequitur_.delete_Accumulator

# Register Accumulator in _sequitur_:
_sequitur_.Accumulator_swigregister(Accumulator)
class ViterbiAccumulator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sequitur_.ViterbiAccumulator_swiginit(self, _sequitur_.new_ViterbiAccumulator())

    def setTarget(self, arg2):
        return _sequitur_.ViterbiAccumulator_setTarget(self, arg2)

    def accumulate(self, arg2, weight):
        return _sequitur_.ViterbiAccumulator_accumulate(self, arg2, weight)

    def logLik(self, arg2):
        return _sequitur_.ViterbiAccumulator_logLik(self, arg2)

    def segment(self, eg):
        return _sequitur_.ViterbiAccumulator_segment(self, eg)
    __swig_destroy__ = _sequitur_.delete_ViterbiAccumulator

# Register ViterbiAccumulator in _sequitur_:
_sequitur_.ViterbiAccumulator_swigregister(ViterbiAccumulator)
class OneForAllAccumulator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sequitur_.OneForAllAccumulator_swiginit(self, _sequitur_.new_OneForAllAccumulator())

    def setTarget(self, arg2):
        return _sequitur_.OneForAllAccumulator_setTarget(self, arg2)

    def accumulate(self, arg2, weight):
        return _sequitur_.OneForAllAccumulator_accumulate(self, arg2, weight)
    __swig_destroy__ = _sequitur_.delete_OneForAllAccumulator

# Register OneForAllAccumulator in _sequitur_:
_sequitur_.OneForAllAccumulator_swigregister(OneForAllAccumulator)
class Translator_NBestContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sequitur_.delete_Translator_NBestContext

# Register Translator_NBestContext in _sequitur_:
_sequitur_.Translator_NBestContext_swigregister(Translator_NBestContext)
class Translator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sequitur_.Translator_swiginit(self, _sequitur_.new_Translator())

    def setMultigramInventory(self, arg2):
        return _sequitur_.Translator_setMultigramInventory(self, arg2)

    def setSequenceModel(self, arg2):
        return _sequitur_.Translator_setSequenceModel(self, arg2)

    def stackUsage(self):
        return _sequitur_.Translator_stackUsage(self)

    def setStackLimit(self, arg2):
        return _sequitur_.Translator_setStackLimit(self, arg2)

    def nBestInit(self, left):
        return _sequitur_.Translator_nBestInit(self, left)

    def nBestBestLogLik(self, arg2):
        return _sequitur_.Translator_nBestBestLogLik(self, arg2)

    def nBestTotalLogLik(self, arg2):
        return _sequitur_.Translator_nBestTotalLogLik(self, arg2)

    def __call__(self, left):
        return _sequitur_.Translator___call__(self, left)

    def nBestNext(self, nbc):
        return _sequitur_.Translator_nBestNext(self, nbc)
    __swig_destroy__ = _sequitur_.delete_Translator

# Register Translator in _sequitur_:
_sequitur_.Translator_swigregister(Translator)

