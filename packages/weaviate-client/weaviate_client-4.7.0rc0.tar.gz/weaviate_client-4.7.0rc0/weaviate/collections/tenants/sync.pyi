from typing import Dict, List, Optional, Sequence, Union
from weaviate.collections.classes.tenants import Tenant, TenantInput
from weaviate.collections.tenants.tenants import _TenantsBase, TenantInputType, TenantOutputType

class _Tenants(_TenantsBase):
    def create(self, tenants: Union[TenantInputType, Sequence[TenantInputType]]) -> None: ...
    def remove(self, tenants: Union[TenantInputType, Sequence[TenantInputType]]) -> None: ...
    def get(self) -> Dict[str, TenantOutputType]: ...
    def get_by_names(self, tenants: Sequence[TenantInputType]) -> Dict[str, TenantOutputType]: ...
    def get_by_name(self, tenant: TenantInputType) -> Optional[TenantOutputType]: ...
    def update(
        self, tenants: Union[Tenant, TenantInput, Sequence[Union[Tenant, TenantInput]]]
    ) -> None: ...
    def exists(self, tenant: TenantInputType) -> bool: ...
