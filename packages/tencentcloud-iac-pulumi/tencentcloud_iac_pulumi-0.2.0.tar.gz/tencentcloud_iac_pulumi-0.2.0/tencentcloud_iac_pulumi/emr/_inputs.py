# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ClusterPlacementInfoArgs',
    'ClusterResourceSpecArgs',
    'ClusterResourceSpecCommonResourceSpecArgs',
    'ClusterResourceSpecCoreResourceSpecArgs',
    'ClusterResourceSpecMasterResourceSpecArgs',
    'ClusterResourceSpecTaskResourceSpecArgs',
    'GetAutoScaleRecordsFilterArgs',
]

@pulumi.input_type
class ClusterPlacementInfoArgs:
    def __init__(__self__, *,
                 zone: pulumi.Input[str],
                 project_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] zone: Zone.
        :param pulumi.Input[int] project_id: Project id.
        """
        pulumi.set(__self__, "zone", zone)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        Zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class ClusterResourceSpecArgs:
    def __init__(__self__, *,
                 common_count: Optional[pulumi.Input[int]] = None,
                 common_resource_spec: Optional[pulumi.Input['ClusterResourceSpecCommonResourceSpecArgs']] = None,
                 core_count: Optional[pulumi.Input[int]] = None,
                 core_resource_spec: Optional[pulumi.Input['ClusterResourceSpecCoreResourceSpecArgs']] = None,
                 master_count: Optional[pulumi.Input[int]] = None,
                 master_resource_spec: Optional[pulumi.Input['ClusterResourceSpecMasterResourceSpecArgs']] = None,
                 task_count: Optional[pulumi.Input[int]] = None,
                 task_resource_spec: Optional[pulumi.Input['ClusterResourceSpecTaskResourceSpecArgs']] = None):
        """
        :param pulumi.Input[int] common_count: The number of common node.
        :param pulumi.Input[int] core_count: The number of core node.
        :param pulumi.Input[int] master_count: The number of master node.
        :param pulumi.Input[int] task_count: The number of core node.
        """
        if common_count is not None:
            pulumi.set(__self__, "common_count", common_count)
        if common_resource_spec is not None:
            pulumi.set(__self__, "common_resource_spec", common_resource_spec)
        if core_count is not None:
            pulumi.set(__self__, "core_count", core_count)
        if core_resource_spec is not None:
            pulumi.set(__self__, "core_resource_spec", core_resource_spec)
        if master_count is not None:
            pulumi.set(__self__, "master_count", master_count)
        if master_resource_spec is not None:
            pulumi.set(__self__, "master_resource_spec", master_resource_spec)
        if task_count is not None:
            pulumi.set(__self__, "task_count", task_count)
        if task_resource_spec is not None:
            pulumi.set(__self__, "task_resource_spec", task_resource_spec)

    @property
    @pulumi.getter(name="commonCount")
    def common_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of common node.
        """
        return pulumi.get(self, "common_count")

    @common_count.setter
    def common_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "common_count", value)

    @property
    @pulumi.getter(name="commonResourceSpec")
    def common_resource_spec(self) -> Optional[pulumi.Input['ClusterResourceSpecCommonResourceSpecArgs']]:
        return pulumi.get(self, "common_resource_spec")

    @common_resource_spec.setter
    def common_resource_spec(self, value: Optional[pulumi.Input['ClusterResourceSpecCommonResourceSpecArgs']]):
        pulumi.set(self, "common_resource_spec", value)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of core node.
        """
        return pulumi.get(self, "core_count")

    @core_count.setter
    def core_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "core_count", value)

    @property
    @pulumi.getter(name="coreResourceSpec")
    def core_resource_spec(self) -> Optional[pulumi.Input['ClusterResourceSpecCoreResourceSpecArgs']]:
        return pulumi.get(self, "core_resource_spec")

    @core_resource_spec.setter
    def core_resource_spec(self, value: Optional[pulumi.Input['ClusterResourceSpecCoreResourceSpecArgs']]):
        pulumi.set(self, "core_resource_spec", value)

    @property
    @pulumi.getter(name="masterCount")
    def master_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of master node.
        """
        return pulumi.get(self, "master_count")

    @master_count.setter
    def master_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "master_count", value)

    @property
    @pulumi.getter(name="masterResourceSpec")
    def master_resource_spec(self) -> Optional[pulumi.Input['ClusterResourceSpecMasterResourceSpecArgs']]:
        return pulumi.get(self, "master_resource_spec")

    @master_resource_spec.setter
    def master_resource_spec(self, value: Optional[pulumi.Input['ClusterResourceSpecMasterResourceSpecArgs']]):
        pulumi.set(self, "master_resource_spec", value)

    @property
    @pulumi.getter(name="taskCount")
    def task_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of core node.
        """
        return pulumi.get(self, "task_count")

    @task_count.setter
    def task_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task_count", value)

    @property
    @pulumi.getter(name="taskResourceSpec")
    def task_resource_spec(self) -> Optional[pulumi.Input['ClusterResourceSpecTaskResourceSpecArgs']]:
        return pulumi.get(self, "task_resource_spec")

    @task_resource_spec.setter
    def task_resource_spec(self, value: Optional[pulumi.Input['ClusterResourceSpecTaskResourceSpecArgs']]):
        pulumi.set(self, "task_resource_spec", value)


@pulumi.input_type
class ClusterResourceSpecCommonResourceSpecArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[int]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 root_size: Optional[pulumi.Input[int]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 storage_type: Optional[pulumi.Input[int]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if root_size is not None:
            pulumi.set(__self__, "root_size", root_size)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "root_size")

    @root_size.setter
    def root_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_size", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_type", value)


@pulumi.input_type
class ClusterResourceSpecCoreResourceSpecArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[int]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 root_size: Optional[pulumi.Input[int]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 storage_type: Optional[pulumi.Input[int]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if root_size is not None:
            pulumi.set(__self__, "root_size", root_size)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "root_size")

    @root_size.setter
    def root_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_size", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_type", value)


@pulumi.input_type
class ClusterResourceSpecMasterResourceSpecArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[int]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 root_size: Optional[pulumi.Input[int]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 storage_type: Optional[pulumi.Input[int]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if root_size is not None:
            pulumi.set(__self__, "root_size", root_size)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "root_size")

    @root_size.setter
    def root_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_size", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_type", value)


@pulumi.input_type
class ClusterResourceSpecTaskResourceSpecArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[int]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 root_size: Optional[pulumi.Input[int]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 storage_type: Optional[pulumi.Input[int]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if root_size is not None:
            pulumi.set(__self__, "root_size", root_size)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "root_size")

    @root_size.setter
    def root_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_size", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_type", value)


@pulumi.input_type
class GetAutoScaleRecordsFilterArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key. Note: This field may return null, indicating that no valid value can be obtained.
        :param str value: Value. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


