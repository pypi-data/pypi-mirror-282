# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ClusterPlacementInfo',
    'ClusterResourceSpec',
    'ClusterResourceSpecCommonResourceSpec',
    'ClusterResourceSpecCoreResourceSpec',
    'ClusterResourceSpecMasterResourceSpec',
    'ClusterResourceSpecTaskResourceSpec',
    'GetAutoScaleRecordsFilterResult',
    'GetAutoScaleRecordsRecordListResult',
    'GetCvmQuotaEksQuotaSetResult',
    'GetCvmQuotaPostPaidQuotaSetResult',
    'GetCvmQuotaSpotPaidQuotaSetResult',
    'GetInstanceClusterResult',
    'GetNodesNodeResult',
    'GetNodesNodeCdbNodeInfoResult',
    'GetNodesNodeMcMultiDiskResult',
    'GetNodesNodeTagResult',
]

@pulumi.output_type
class ClusterPlacementInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPlacementInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPlacementInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPlacementInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 zone: str,
                 project_id: Optional[int] = None):
        """
        :param str zone: Zone.
        :param int project_id: Project id.
        """
        pulumi.set(__self__, "zone", zone)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Zone.
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class ClusterResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonCount":
            suggest = "common_count"
        elif key == "commonResourceSpec":
            suggest = "common_resource_spec"
        elif key == "coreCount":
            suggest = "core_count"
        elif key == "coreResourceSpec":
            suggest = "core_resource_spec"
        elif key == "masterCount":
            suggest = "master_count"
        elif key == "masterResourceSpec":
            suggest = "master_resource_spec"
        elif key == "taskCount":
            suggest = "task_count"
        elif key == "taskResourceSpec":
            suggest = "task_resource_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_count: Optional[int] = None,
                 common_resource_spec: Optional['outputs.ClusterResourceSpecCommonResourceSpec'] = None,
                 core_count: Optional[int] = None,
                 core_resource_spec: Optional['outputs.ClusterResourceSpecCoreResourceSpec'] = None,
                 master_count: Optional[int] = None,
                 master_resource_spec: Optional['outputs.ClusterResourceSpecMasterResourceSpec'] = None,
                 task_count: Optional[int] = None,
                 task_resource_spec: Optional['outputs.ClusterResourceSpecTaskResourceSpec'] = None):
        """
        :param int common_count: The number of common node.
        :param int core_count: The number of core node.
        :param int master_count: The number of master node.
        :param int task_count: The number of core node.
        """
        if common_count is not None:
            pulumi.set(__self__, "common_count", common_count)
        if common_resource_spec is not None:
            pulumi.set(__self__, "common_resource_spec", common_resource_spec)
        if core_count is not None:
            pulumi.set(__self__, "core_count", core_count)
        if core_resource_spec is not None:
            pulumi.set(__self__, "core_resource_spec", core_resource_spec)
        if master_count is not None:
            pulumi.set(__self__, "master_count", master_count)
        if master_resource_spec is not None:
            pulumi.set(__self__, "master_resource_spec", master_resource_spec)
        if task_count is not None:
            pulumi.set(__self__, "task_count", task_count)
        if task_resource_spec is not None:
            pulumi.set(__self__, "task_resource_spec", task_resource_spec)

    @property
    @pulumi.getter(name="commonCount")
    def common_count(self) -> Optional[int]:
        """
        The number of common node.
        """
        return pulumi.get(self, "common_count")

    @property
    @pulumi.getter(name="commonResourceSpec")
    def common_resource_spec(self) -> Optional['outputs.ClusterResourceSpecCommonResourceSpec']:
        return pulumi.get(self, "common_resource_spec")

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> Optional[int]:
        """
        The number of core node.
        """
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="coreResourceSpec")
    def core_resource_spec(self) -> Optional['outputs.ClusterResourceSpecCoreResourceSpec']:
        return pulumi.get(self, "core_resource_spec")

    @property
    @pulumi.getter(name="masterCount")
    def master_count(self) -> Optional[int]:
        """
        The number of master node.
        """
        return pulumi.get(self, "master_count")

    @property
    @pulumi.getter(name="masterResourceSpec")
    def master_resource_spec(self) -> Optional['outputs.ClusterResourceSpecMasterResourceSpec']:
        return pulumi.get(self, "master_resource_spec")

    @property
    @pulumi.getter(name="taskCount")
    def task_count(self) -> Optional[int]:
        """
        The number of core node.
        """
        return pulumi.get(self, "task_count")

    @property
    @pulumi.getter(name="taskResourceSpec")
    def task_resource_spec(self) -> Optional['outputs.ClusterResourceSpecTaskResourceSpec']:
        return pulumi.get(self, "task_resource_spec")


@pulumi.output_type
class ClusterResourceSpecCommonResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "memSize":
            suggest = "mem_size"
        elif key == "rootSize":
            suggest = "root_size"
        elif key == "storageType":
            suggest = "storage_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterResourceSpecCommonResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterResourceSpecCommonResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterResourceSpecCommonResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: Optional[int] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 mem_size: Optional[int] = None,
                 root_size: Optional[int] = None,
                 spec: Optional[str] = None,
                 storage_type: Optional[int] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if root_size is not None:
            pulumi.set(__self__, "root_size", root_size)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[int]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[int]:
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[int]:
        return pulumi.get(self, "root_size")

    @property
    @pulumi.getter
    def spec(self) -> Optional[str]:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[int]:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class ClusterResourceSpecCoreResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "memSize":
            suggest = "mem_size"
        elif key == "rootSize":
            suggest = "root_size"
        elif key == "storageType":
            suggest = "storage_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterResourceSpecCoreResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterResourceSpecCoreResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterResourceSpecCoreResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: Optional[int] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 mem_size: Optional[int] = None,
                 root_size: Optional[int] = None,
                 spec: Optional[str] = None,
                 storage_type: Optional[int] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if root_size is not None:
            pulumi.set(__self__, "root_size", root_size)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[int]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[int]:
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[int]:
        return pulumi.get(self, "root_size")

    @property
    @pulumi.getter
    def spec(self) -> Optional[str]:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[int]:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class ClusterResourceSpecMasterResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "memSize":
            suggest = "mem_size"
        elif key == "rootSize":
            suggest = "root_size"
        elif key == "storageType":
            suggest = "storage_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterResourceSpecMasterResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterResourceSpecMasterResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterResourceSpecMasterResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: Optional[int] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 mem_size: Optional[int] = None,
                 root_size: Optional[int] = None,
                 spec: Optional[str] = None,
                 storage_type: Optional[int] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if root_size is not None:
            pulumi.set(__self__, "root_size", root_size)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[int]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[int]:
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[int]:
        return pulumi.get(self, "root_size")

    @property
    @pulumi.getter
    def spec(self) -> Optional[str]:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[int]:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class ClusterResourceSpecTaskResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "memSize":
            suggest = "mem_size"
        elif key == "rootSize":
            suggest = "root_size"
        elif key == "storageType":
            suggest = "storage_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterResourceSpecTaskResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterResourceSpecTaskResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterResourceSpecTaskResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: Optional[int] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 mem_size: Optional[int] = None,
                 root_size: Optional[int] = None,
                 spec: Optional[str] = None,
                 storage_type: Optional[int] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if root_size is not None:
            pulumi.set(__self__, "root_size", root_size)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[int]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[int]:
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[int]:
        return pulumi.get(self, "root_size")

    @property
    @pulumi.getter
    def spec(self) -> Optional[str]:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[int]:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetAutoScaleRecordsFilterResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key. Note: This field may return null, indicating that no valid value can be obtained.
        :param str value: Value. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutoScaleRecordsRecordListResult(dict):
    def __init__(__self__, *,
                 action_status: str,
                 action_time: str,
                 compensate_count: int,
                 compensate_flag: int,
                 end_time: str,
                 expect_scale_num: int,
                 scale_action: str,
                 scale_info: str,
                 spec_info: str,
                 strategy_name: str,
                 strategy_type: int):
        """
        :param str action_status: `SUCCESS`, `FAILED`, `PART_SUCCESS`, `IN_PROCESS`.
        :param str action_time: Process Trigger Time.
        :param int compensate_count: Compensation Times Note: This field may return null, indicating that no valid value can be obtained.
        :param int compensate_flag: Compensation and expansion, 0 represents no start, 1 represents start. Note: This field may return null, indicating that no valid value can be obtained.
        :param str end_time: Process End Time.
        :param int expect_scale_num: Effective only when ScaleAction is SCALE_OUT.
        :param str scale_action: `SCALE_OUT` and `SCALE_IN` respectively represent expanding and shrinking capacity.
        :param str scale_info: Scalability-related Description.
        :param str spec_info: Specification information used when expanding capacity.
        :param str strategy_name: Rule name of expanding and shrinking capacity.
        :param int strategy_type: Strategy Type, 1 for Load scaling, 2 for Time scaling.
        """
        pulumi.set(__self__, "action_status", action_status)
        pulumi.set(__self__, "action_time", action_time)
        pulumi.set(__self__, "compensate_count", compensate_count)
        pulumi.set(__self__, "compensate_flag", compensate_flag)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "expect_scale_num", expect_scale_num)
        pulumi.set(__self__, "scale_action", scale_action)
        pulumi.set(__self__, "scale_info", scale_info)
        pulumi.set(__self__, "spec_info", spec_info)
        pulumi.set(__self__, "strategy_name", strategy_name)
        pulumi.set(__self__, "strategy_type", strategy_type)

    @property
    @pulumi.getter(name="actionStatus")
    def action_status(self) -> str:
        """
        `SUCCESS`, `FAILED`, `PART_SUCCESS`, `IN_PROCESS`.
        """
        return pulumi.get(self, "action_status")

    @property
    @pulumi.getter(name="actionTime")
    def action_time(self) -> str:
        """
        Process Trigger Time.
        """
        return pulumi.get(self, "action_time")

    @property
    @pulumi.getter(name="compensateCount")
    def compensate_count(self) -> int:
        """
        Compensation Times Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "compensate_count")

    @property
    @pulumi.getter(name="compensateFlag")
    def compensate_flag(self) -> int:
        """
        Compensation and expansion, 0 represents no start, 1 represents start. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "compensate_flag")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Process End Time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="expectScaleNum")
    def expect_scale_num(self) -> int:
        """
        Effective only when ScaleAction is SCALE_OUT.
        """
        return pulumi.get(self, "expect_scale_num")

    @property
    @pulumi.getter(name="scaleAction")
    def scale_action(self) -> str:
        """
        `SCALE_OUT` and `SCALE_IN` respectively represent expanding and shrinking capacity.
        """
        return pulumi.get(self, "scale_action")

    @property
    @pulumi.getter(name="scaleInfo")
    def scale_info(self) -> str:
        """
        Scalability-related Description.
        """
        return pulumi.get(self, "scale_info")

    @property
    @pulumi.getter(name="specInfo")
    def spec_info(self) -> str:
        """
        Specification information used when expanding capacity.
        """
        return pulumi.get(self, "spec_info")

    @property
    @pulumi.getter(name="strategyName")
    def strategy_name(self) -> str:
        """
        Rule name of expanding and shrinking capacity.
        """
        return pulumi.get(self, "strategy_name")

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> int:
        """
        Strategy Type, 1 for Load scaling, 2 for Time scaling.
        """
        return pulumi.get(self, "strategy_type")


@pulumi.output_type
class GetCvmQuotaEksQuotaSetResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 memory: int,
                 node_type: str,
                 number: int):
        """
        :param int cpu: Cpu cores.
        :param int memory: Memory quantity (unit: GB).
        :param str node_type: The specifications of the marketable resource are as follows: `TASK`, `CORE`, `MASTER`, `ROUTER`.
        :param int number: Specifies the maximum number of resources that can be applied for.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "number", number)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        Cpu cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        Memory quantity (unit: GB).
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        The specifications of the marketable resource are as follows: `TASK`, `CORE`, `MASTER`, `ROUTER`.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def number(self) -> int:
        """
        Specifies the maximum number of resources that can be applied for.
        """
        return pulumi.get(self, "number")


@pulumi.output_type
class GetCvmQuotaPostPaidQuotaSetResult(dict):
    def __init__(__self__, *,
                 remaining_quota: int,
                 total_quota: int,
                 used_quota: int,
                 zone: str):
        """
        :param int remaining_quota: Residual quota Note: This field may return null, indicating that a valid value cannot be obtained.
        :param int total_quota: Total quota Note: This field may return null, indicating that a valid value cannot be obtained.
        :param int used_quota: Used quota Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str zone: Available area Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        pulumi.set(__self__, "remaining_quota", remaining_quota)
        pulumi.set(__self__, "total_quota", total_quota)
        pulumi.set(__self__, "used_quota", used_quota)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="remainingQuota")
    def remaining_quota(self) -> int:
        """
        Residual quota Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "remaining_quota")

    @property
    @pulumi.getter(name="totalQuota")
    def total_quota(self) -> int:
        """
        Total quota Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "total_quota")

    @property
    @pulumi.getter(name="usedQuota")
    def used_quota(self) -> int:
        """
        Used quota Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "used_quota")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Available area Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetCvmQuotaSpotPaidQuotaSetResult(dict):
    def __init__(__self__, *,
                 remaining_quota: int,
                 total_quota: int,
                 used_quota: int,
                 zone: str):
        """
        :param int remaining_quota: Residual quota Note: This field may return null, indicating that a valid value cannot be obtained.
        :param int total_quota: Total quota Note: This field may return null, indicating that a valid value cannot be obtained.
        :param int used_quota: Used quota Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str zone: Available area Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        pulumi.set(__self__, "remaining_quota", remaining_quota)
        pulumi.set(__self__, "total_quota", total_quota)
        pulumi.set(__self__, "used_quota", used_quota)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="remainingQuota")
    def remaining_quota(self) -> int:
        """
        Residual quota Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "remaining_quota")

    @property
    @pulumi.getter(name="totalQuota")
    def total_quota(self) -> int:
        """
        Total quota Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "total_quota")

    @property
    @pulumi.getter(name="usedQuota")
    def used_quota(self) -> int:
        """
        Used quota Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "used_quota")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Available area Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetInstanceClusterResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 charge_type: int,
                 cluster_id: str,
                 cluster_name: str,
                 ftitle: str,
                 id: int,
                 master_ip: str,
                 project_id: int,
                 region_id: int,
                 status: int,
                 zone: str,
                 zone_id: int):
        """
        :param str add_time: Add time of instance.
        :param int charge_type: Charge type of instance.
        :param str cluster_id: Cluster id of instance.
        :param str cluster_name: Cluster name of instance.
        :param str ftitle: Title of instance.
        :param int id: Id of instance.
        :param str master_ip: Master ip of instance.
        :param int project_id: Fetch all instances which owner same project. Default 0 meaning use default project id.
        :param int region_id: Region id of instance.
        :param int status: Status of instance.
        :param str zone: Zone of instance.
        :param int zone_id: Zone id of instance.
        """
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "ftitle", ftitle)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "master_ip", master_ip)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        """
        Add time of instance.
        """
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> int:
        """
        Charge type of instance.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Cluster id of instance.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster name of instance.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def ftitle(self) -> str:
        """
        Title of instance.
        """
        return pulumi.get(self, "ftitle")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Id of instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="masterIp")
    def master_ip(self) -> str:
        """
        Master ip of instance.
        """
        return pulumi.get(self, "master_ip")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Fetch all instances which owner same project. Default 0 meaning use default project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        Region id of instance.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Status of instance.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Zone of instance.
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        """
        Zone id of instance.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetNodesNodeResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 apply_time: str,
                 auto_flag: int,
                 cdb_ip: str,
                 cdb_node_infos: Sequence['outputs.GetNodesNodeCdbNodeInfoResult'],
                 cdb_port: int,
                 charge_type: int,
                 cpu_num: int,
                 destroyable: int,
                 device_class: str,
                 disk_size: str,
                 dynamic_pod_spec: str,
                 emr_resource_id: str,
                 expire_time: str,
                 flag: int,
                 free_time: str,
                 hardware_resource_type: str,
                 hw_disk_size: int,
                 hw_disk_size_desc: str,
                 hw_mem_size: int,
                 hw_mem_size_desc: str,
                 ip: str,
                 is_auto_renew: int,
                 is_dynamic_spec: int,
                 mc_multi_disks: Sequence['outputs.GetNodesNodeMcMultiDiskResult'],
                 mem_desc: str,
                 mem_size: int,
                 mutable: int,
                 name_tag: str,
                 order_no: str,
                 region_id: int,
                 root_size: int,
                 serial_no: str,
                 services: str,
                 spec: str,
                 storage_type: int,
                 support_modify_pay_mode: int,
                 tags: Sequence['outputs.GetNodesNodeTagResult'],
                 wan_ip: str,
                 zone_id: int):
        """
        :param int app_id: User APPID.
        :param str apply_time: Application time.
        :param int auto_flag: Whether it is an autoscaling node, 0 is a normal node, and 1 is an autoscaling node.
        :param str cdb_ip: Database IP.
        :param Sequence['GetNodesNodeCdbNodeInfoArgs'] cdb_node_infos: Database information.
        :param int cdb_port: Database port.
        :param int charge_type: The type of payment.
        :param int cpu_num: Number of node cores.
        :param int destroyable: Whether this node is destroyable, 1 can be destroyed, 0 is not destroyable.
        :param str device_class: Device identity.
        :param str disk_size: Hard disk size.
        :param str dynamic_pod_spec: Floating specification value json string.
        :param str emr_resource_id: Node resource ID.
        :param str expire_time: Expiration time.
        :param int flag: Node type. 0: common node; 1: master node; 2: core node; 3: task node.
        :param str free_time: Release time.
        :param str hardware_resource_type: Resource type: Support all/host/pod, default is all.
        :param int hw_disk_size: Hard disk capacity.
        :param str hw_disk_size_desc: Hard disk capacity description.
        :param int hw_mem_size: Memory capacity.
        :param str hw_mem_size_desc: Memory capacity description.
        :param str ip: Intranet IP.
        :param int is_auto_renew: Renewal logo.
        :param int is_dynamic_spec: Floating specifications, 1 yes, 0 no.
        :param Sequence['GetNodesNodeMcMultiDiskArgs'] mc_multi_disks: Multi-cloud disk.
        :param str mem_desc: Node memory description.
        :param int mem_size: Node memory.
        :param int mutable: Supports variations.
        :param str name_tag: Node description.
        :param str order_no: Machine instance ID.
        :param int region_id: The node is located in the region.
        :param int root_size: The size of the system disk.
        :param str serial_no: Serial number.
        :param str services: Node deployment service.
        :param str spec: Node specifications.
        :param int storage_type: Disk type.
        :param int support_modify_pay_mode: Whether to support change billing type 1 Yes and 0 No.
        :param Sequence['GetNodesNodeTagArgs'] tags: The label of the node binding.
        :param str wan_ip: The master node is bound to the Internet IP address.
        :param int zone_id: Zone where the node is located.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "apply_time", apply_time)
        pulumi.set(__self__, "auto_flag", auto_flag)
        pulumi.set(__self__, "cdb_ip", cdb_ip)
        pulumi.set(__self__, "cdb_node_infos", cdb_node_infos)
        pulumi.set(__self__, "cdb_port", cdb_port)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "cpu_num", cpu_num)
        pulumi.set(__self__, "destroyable", destroyable)
        pulumi.set(__self__, "device_class", device_class)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "dynamic_pod_spec", dynamic_pod_spec)
        pulumi.set(__self__, "emr_resource_id", emr_resource_id)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "flag", flag)
        pulumi.set(__self__, "free_time", free_time)
        pulumi.set(__self__, "hardware_resource_type", hardware_resource_type)
        pulumi.set(__self__, "hw_disk_size", hw_disk_size)
        pulumi.set(__self__, "hw_disk_size_desc", hw_disk_size_desc)
        pulumi.set(__self__, "hw_mem_size", hw_mem_size)
        pulumi.set(__self__, "hw_mem_size_desc", hw_mem_size_desc)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "is_auto_renew", is_auto_renew)
        pulumi.set(__self__, "is_dynamic_spec", is_dynamic_spec)
        pulumi.set(__self__, "mc_multi_disks", mc_multi_disks)
        pulumi.set(__self__, "mem_desc", mem_desc)
        pulumi.set(__self__, "mem_size", mem_size)
        pulumi.set(__self__, "mutable", mutable)
        pulumi.set(__self__, "name_tag", name_tag)
        pulumi.set(__self__, "order_no", order_no)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "root_size", root_size)
        pulumi.set(__self__, "serial_no", serial_no)
        pulumi.set(__self__, "services", services)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "support_modify_pay_mode", support_modify_pay_mode)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "wan_ip", wan_ip)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        """
        User APPID.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="applyTime")
    def apply_time(self) -> str:
        """
        Application time.
        """
        return pulumi.get(self, "apply_time")

    @property
    @pulumi.getter(name="autoFlag")
    def auto_flag(self) -> int:
        """
        Whether it is an autoscaling node, 0 is a normal node, and 1 is an autoscaling node.
        """
        return pulumi.get(self, "auto_flag")

    @property
    @pulumi.getter(name="cdbIp")
    def cdb_ip(self) -> str:
        """
        Database IP.
        """
        return pulumi.get(self, "cdb_ip")

    @property
    @pulumi.getter(name="cdbNodeInfos")
    def cdb_node_infos(self) -> Sequence['outputs.GetNodesNodeCdbNodeInfoResult']:
        """
        Database information.
        """
        return pulumi.get(self, "cdb_node_infos")

    @property
    @pulumi.getter(name="cdbPort")
    def cdb_port(self) -> int:
        """
        Database port.
        """
        return pulumi.get(self, "cdb_port")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> int:
        """
        The type of payment.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="cpuNum")
    def cpu_num(self) -> int:
        """
        Number of node cores.
        """
        return pulumi.get(self, "cpu_num")

    @property
    @pulumi.getter
    def destroyable(self) -> int:
        """
        Whether this node is destroyable, 1 can be destroyed, 0 is not destroyable.
        """
        return pulumi.get(self, "destroyable")

    @property
    @pulumi.getter(name="deviceClass")
    def device_class(self) -> str:
        """
        Device identity.
        """
        return pulumi.get(self, "device_class")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> str:
        """
        Hard disk size.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="dynamicPodSpec")
    def dynamic_pod_spec(self) -> str:
        """
        Floating specification value json string.
        """
        return pulumi.get(self, "dynamic_pod_spec")

    @property
    @pulumi.getter(name="emrResourceId")
    def emr_resource_id(self) -> str:
        """
        Node resource ID.
        """
        return pulumi.get(self, "emr_resource_id")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        Expiration time.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def flag(self) -> int:
        """
        Node type. 0: common node; 1: master node; 2: core node; 3: task node.
        """
        return pulumi.get(self, "flag")

    @property
    @pulumi.getter(name="freeTime")
    def free_time(self) -> str:
        """
        Release time.
        """
        return pulumi.get(self, "free_time")

    @property
    @pulumi.getter(name="hardwareResourceType")
    def hardware_resource_type(self) -> str:
        """
        Resource type: Support all/host/pod, default is all.
        """
        return pulumi.get(self, "hardware_resource_type")

    @property
    @pulumi.getter(name="hwDiskSize")
    def hw_disk_size(self) -> int:
        """
        Hard disk capacity.
        """
        return pulumi.get(self, "hw_disk_size")

    @property
    @pulumi.getter(name="hwDiskSizeDesc")
    def hw_disk_size_desc(self) -> str:
        """
        Hard disk capacity description.
        """
        return pulumi.get(self, "hw_disk_size_desc")

    @property
    @pulumi.getter(name="hwMemSize")
    def hw_mem_size(self) -> int:
        """
        Memory capacity.
        """
        return pulumi.get(self, "hw_mem_size")

    @property
    @pulumi.getter(name="hwMemSizeDesc")
    def hw_mem_size_desc(self) -> str:
        """
        Memory capacity description.
        """
        return pulumi.get(self, "hw_mem_size_desc")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Intranet IP.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="isAutoRenew")
    def is_auto_renew(self) -> int:
        """
        Renewal logo.
        """
        return pulumi.get(self, "is_auto_renew")

    @property
    @pulumi.getter(name="isDynamicSpec")
    def is_dynamic_spec(self) -> int:
        """
        Floating specifications, 1 yes, 0 no.
        """
        return pulumi.get(self, "is_dynamic_spec")

    @property
    @pulumi.getter(name="mcMultiDisks")
    def mc_multi_disks(self) -> Sequence['outputs.GetNodesNodeMcMultiDiskResult']:
        """
        Multi-cloud disk.
        """
        return pulumi.get(self, "mc_multi_disks")

    @property
    @pulumi.getter(name="memDesc")
    def mem_desc(self) -> str:
        """
        Node memory description.
        """
        return pulumi.get(self, "mem_desc")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> int:
        """
        Node memory.
        """
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter
    def mutable(self) -> int:
        """
        Supports variations.
        """
        return pulumi.get(self, "mutable")

    @property
    @pulumi.getter(name="nameTag")
    def name_tag(self) -> str:
        """
        Node description.
        """
        return pulumi.get(self, "name_tag")

    @property
    @pulumi.getter(name="orderNo")
    def order_no(self) -> str:
        """
        Machine instance ID.
        """
        return pulumi.get(self, "order_no")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        The node is located in the region.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> int:
        """
        The size of the system disk.
        """
        return pulumi.get(self, "root_size")

    @property
    @pulumi.getter(name="serialNo")
    def serial_no(self) -> str:
        """
        Serial number.
        """
        return pulumi.get(self, "serial_no")

    @property
    @pulumi.getter
    def services(self) -> str:
        """
        Node deployment service.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def spec(self) -> str:
        """
        Node specifications.
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> int:
        """
        Disk type.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="supportModifyPayMode")
    def support_modify_pay_mode(self) -> int:
        """
        Whether to support change billing type 1 Yes and 0 No.
        """
        return pulumi.get(self, "support_modify_pay_mode")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNodesNodeTagResult']:
        """
        The label of the node binding.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="wanIp")
    def wan_ip(self) -> str:
        """
        The master node is bound to the Internet IP address.
        """
        return pulumi.get(self, "wan_ip")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        """
        Zone where the node is located.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetNodesNodeCdbNodeInfoResult(dict):
    def __init__(__self__, *,
                 apply_time: str,
                 expire_flag: bool,
                 expire_time: str,
                 instance_name: str,
                 ip: str,
                 is_auto_renew: int,
                 mem_size: int,
                 pay_type: int,
                 port: int,
                 region_id: int,
                 serial_no: str,
                 service: str,
                 status: int,
                 volume: int,
                 zone_id: int):
        """
        :param str apply_time: Application time.
        :param bool expire_flag: Expired id.
        :param str expire_time: Expiration time.
        :param str instance_name: DB instance.
        :param str ip: Intranet IP.
        :param int is_auto_renew: Renewal logo.
        :param int mem_size: Node memory.
        :param int pay_type: The type of payment.
        :param int port: Database port.
        :param int region_id: The node is located in the region.
        :param str serial_no: Serial number.
        :param str service: The service identity.
        :param int status: Database status.
        :param int volume: The size of the cloud disk.
        :param int zone_id: Zone where the node is located.
        """
        pulumi.set(__self__, "apply_time", apply_time)
        pulumi.set(__self__, "expire_flag", expire_flag)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "is_auto_renew", is_auto_renew)
        pulumi.set(__self__, "mem_size", mem_size)
        pulumi.set(__self__, "pay_type", pay_type)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "serial_no", serial_no)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "volume", volume)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="applyTime")
    def apply_time(self) -> str:
        """
        Application time.
        """
        return pulumi.get(self, "apply_time")

    @property
    @pulumi.getter(name="expireFlag")
    def expire_flag(self) -> bool:
        """
        Expired id.
        """
        return pulumi.get(self, "expire_flag")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        Expiration time.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        DB instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Intranet IP.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="isAutoRenew")
    def is_auto_renew(self) -> int:
        """
        Renewal logo.
        """
        return pulumi.get(self, "is_auto_renew")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> int:
        """
        Node memory.
        """
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> int:
        """
        The type of payment.
        """
        return pulumi.get(self, "pay_type")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Database port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        The node is located in the region.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="serialNo")
    def serial_no(self) -> str:
        """
        Serial number.
        """
        return pulumi.get(self, "serial_no")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        The service identity.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Database status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def volume(self) -> int:
        """
        The size of the cloud disk.
        """
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        """
        Zone where the node is located.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetNodesNodeMcMultiDiskResult(dict):
    def __init__(__self__, *,
                 count: int,
                 type: int,
                 volume: int):
        """
        :param int count: The number of cloud disks of this type.
        :param int type: Disk type.
        :param int volume: The size of the cloud disk.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The number of cloud disks of this type.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def type(self) -> int:
        """
        Disk type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def volume(self) -> int:
        """
        The size of the cloud disk.
        """
        return pulumi.get(self, "volume")


@pulumi.output_type
class GetNodesNodeTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Tag key.
        :param str tag_value: Tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")


