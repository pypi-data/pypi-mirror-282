import pytest
from swimlane_connector_utilities import *


@pytest.mark.parametrize('filename,filedata,result',
                         [("myfile.txt",
                           "asdf",
                           {'base64': 'YXNkZg==', 'filename': 'myfile.txt'}),
                          ("newfile.exe",
                           base64.b64decode("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".encode()),
                           {'base64': 'iVBORw0KGgoAAAANSUhEUgAAAAgAAAAGCAYAAAD+Bd/7AAAMRGlDQ1BJQ0MgUHJvZmlsZQAASImVVwdYU8kWnltSIaEEEJASehOlSJcSQotUqYKNkAQSSogJQcTusqjg2kUEbOiqiKJrAcSOvSyKvT8UUVHWRVdsqLxJgXX1e+997+Sbe/975pz/lMwtA4BWDVciyUW1AcgTF0jjw4OZ41PTmKROgMAfHZgCApcnk7Di4qIAlMHzP+XdTWgL5ZqzguvH+f8qOnyBjAcAEgdxBl/Gy4N4PwB4CU8iLQCA6A31VtMKJAo8EWI9KUwQYokCZ6lwiQJnqHCl0iYxng3xTgDImlyuNAsAejPUMwt5WZCHfhtiFzFfJAZAiwxxAE/I5UMcAfGIvLx8BYZ2wD7jG56sf3BmDHFyuVlDWFWLUsghIpkklzv9/2zH/5a8XPlgDFs4NIXSiHhFzbBvt3PyIxVYE+IecUZMLMS6EH8Q8ZX2EKNUoTwiSWWPmvBkbNgzYACxC58bEgmxCcRh4tyYKLU+I1MUxoEYrhC0SFTASVT7LhTIQhPUnDXS/PjYQZwpZbPUvg1cqTKuwv6UPCeJpea/LRRwBvnfFgsTU1Q5Y9RCUXIMxHSIDWQ5CZEqG8y6WMiOGbSRyuMV+VtD7CsQhwer+LHJmdKweLW9NE82WC+2UCjixKhxVYEwMULNs5PHVeZvCHGzQMxKGuQRyMZHDdbCF4SEqmrHrgjESep6sQ5JQXC82veNJDdObY9TBbnhCr0lxCaywgS1Lx5QABekih+PkRTEJaryxDOyuWPjVPngRSAKsEEIYAI5HBkgH2QDUVtPUw+8Us2EAS6QgiwgAM5qzaBHinJGDI8JoBj8AZEAyIb8gpWzAlAI9V+GtKqjM8hUzhYqPXLAU4jzQCTIhddypZd4KFoyeAI1oh+i82CuuXAo5n7UsaAmSq2RD/IytQYtiaHEEGIEMYzogBvjAbgfHgWPQXC44d64z2C2f9sTnhLaCY8JNwgdhDtTRPOl39XDBNGgA0YIU9ec8W3NuC1k9cCDcX/ID7lxA9wYOOOjYSQWHghje0AtW525ovrvuf9RwzddV9tRXCgoZRgliGL/vSfdke4xxKLo6bcdUuWaMdRX9tDM9/HZ33SaD8+R31tiC7F92FnsBHYeO4w1ASZ2DGvGLmFHFHhoFT1RrqLBaPHKfHIgj+iHeFx1TEUnZS71Lt0un1VzBYIixfMRsPMl06WiLGEBkwWf/AImR8wbOYLp5uLqA4DiPaJ6TPVeVr4fECOdv3XziACMyRkYGDj4ty76HAD7DwFAvfW3zh4+n+l3ADi3jieXFqp0uOJAAFSgBe8oI2AGrIA9rMcNeAI/EARCwVgQCxJBKpgMuyyE61kKpoGZYB4oBeVgGVgNqsAGsBlsB7vAXtAEDoMT4Ay4CK6AG+AeXD1d4CXoBe9AP4IgJISGMBAjxByxQZwQN8QbCUBCkSgkHklF0pEsRIzIkZnIT0g5sgKpQjYhdchvyEHkBHIeaUfuII+QbuQN8gnFUE1UDzVFbdFRqDfKQiPRRHQSmoVORYvREnQJWonWojvRRvQEehG9gXagL9E+DGAamAFmgTlj3hgbi8XSsExMis3GyrAKrBZrwFrg/3wN68B6sI84EWfgTNwZruAIPAnn4VPx2fhivArfjjfip/Br+CO8F/9KoBFMCE4EXwKHMJ6QRZhGKCVUELYSDhBOw7upi/COSCQaEO2IXvBuTCVmE2cQFxPXEXcTjxPbiZ3EPhKJZERyIvmTYklcUgGplLSWtJN0jHSV1EX6QNYgm5PdyGHkNLKYPJ9cQd5BPkq+Sn5G7qdoU2wovpRYCp8ynbKUsoXSQrlM6aL0U3WodlR/aiI1mzqPWkltoJ6m3qf+paGhYanhozFOQ6QxV6NSY4/GOY1HGh81dTUdNdmaEzXlmks0t2ke17yj+ReNRrOlBdHSaAW0JbQ62knaQ9oHOoM+ks6h8+lz6NX0RvpV+istipaNFktrslaxVoXWPq3LWj3aFG1bbbY2V3u2drX2Qe1b2n06DB1XnVidPJ3FOjt0zus81yXp2uqG6vJ1S3Q3657U7WRgDCsGm8Fj/MTYwjjN6NIj6tnpcfSy9cr1dum16fXq6+qP1k/WL9Kv1j+i32GAGdgacAxyDZYa7DW4afBpmOkw1jDBsEXDGoZdHfbecLhhkKHAsMxwt+ENw09GTKNQoxyj5UZNRg+McWNH43HG04zXG5827hmuN9xvOG942fC9w++aoCaOJvEmM0w2m1wy6TM1Mw03lZiuNT1p2mNmYBZklm22yuyoWbc5wzzAXGS+yvyY+QumPpPFzGVWMk8xey1MLCIs5BabLNos+i3tLJMs51vutnxgRbXytsq0WmXVatVrbW4dbT3Tut76rg3FxttGaLPG5qzNe1s72xTbBbZNts/tDO04dsV29Xb37Wn2gfZT7WvtrzsQHbwdchzWOVxxRB09HIWO1Y6XnVAnTyeR0zqn9hGEET4jxCNqR9xy1nRmORc61zs/GmkwMmrk/JFNI1+Nsh6VNmr5qLOjvrp4uOS6bHG556rrOtZ1vmuL6xs3RzeeW7XbdXeae5j7HPdm99ejnUYLRq8ffduD4RHtscCj1eOLp5en1LPBs9vL2ivdq8brlreed5z3Yu9zPgSfYJ85Pod9Pvp6+hb47vX908/ZL8dvh9/zMXZjBGO2jOn0t/Tn+m/y7whgBqQHbAzoCLQI5AbWBj4OsgriB20NesZyYGWzdrJeBbsES4MPBL9n+7JnsY+HYCHhIWUhbaG6oUmhVaEPwyzDssLqw3rDPcJnhB+PIERERiyPuMUx5fA4dZzesV5jZ409FakZmRBZFfk4yjFKGtUSjUaPjV4ZfT/GJkYc0xQLYjmxK2MfxNnFTY07NI44Lm5c9bin8a7xM+PPJjASpiTsSHiXGJy4NPFekn2SPKk1WSt5YnJd8vuUkJQVKR3jR42fNf5iqnGqKLU5jZSWnLY1rW9C6ITVE7omekwsnXhzkt2koknnJxtPzp18ZIrWFO6UfemE9JT0HemfubHcWm5fBiejJqOXx+at4b3kB/FX8bsF/oIVgmeZ/pkrMp9n+WetzOoWBgorhD0itqhK9Do7IntD9vuc2JxtOQO5Kbm788h56XkHxbriHPGpfLP8ovx2iZOkVNIx1Xfq6qm90kjpVhkimyRrLtCDH+yX5Pbyn+WPCgMKqws/TEuetq9Ip0hcdGm64/RF058VhxX/OgOfwZvROtNi5ryZj2axZm2ajczOmN06x2pOyZyuueFzt8+jzsuZ9/t8l/kr5r/9KeWnlhLTkrklnT+H/1xfSi+Vlt5a4Ldgw0J8oWhh2yL3RWsXfS3jl10odymvKP+8mLf4wi+uv1T+MrAkc0nbUs+l65cRl4mX3VweuHz7Cp0VxSs6V0avbFzFXFW26u3qKavPV4yu2LCGuka+pqMyqrJ5rfXaZWs/VwmrblQHV++uMalZVPN+HX/d1fVB6xs2mG4o3/Bpo2jj7U3hmxprbWsrNhM3F25+uiV5y9lfvX+t22q8tXzrl23ibR3b47efqvOqq9thsmNpPVovr+/eOXHnlV0hu5obnBs27TbYXb4H7JHvefFb+m8390bubd3nva9hv83+mgOMA2WNSOP0xt4mYVNHc2pz+8GxB1tb/FoOHBp5aNthi8PVR/SPLD1KPVpydOBY8bG+45LjPSeyTnS2Tmm9d3L8yeunxp1qOx15+tyZsDMnz7LOHjvnf+7wed/zBy94X2i66Hmx8ZLHpQO/e/x+oM2zrfGy1+XmKz5XWtrHtB+9Gnj1xLWQa2euc65fvBFzo/1m0s3btybe6rjNv/38Tu6d13cL7/bfm3ufcL/sgfaDiocmD2v/5fCv3R2eHUcehTy69Djh8b1OXufLJ7Inn7tKntKeVjwzf1b33O354e6w7isvJrzoeil52d9T+ofOHzWv7F/t/zPoz0u943u7XktfD7xZ/JfRX9vejn7b2hfX9/Bd3rv+92UfjD5s/+j98eynlE/P+qd9Jn2u/OLwpeVr5Nf7A3kDAxKulKv8FMDgQDMzAXizDQBaKgCMK/D7YYJqn6cURLU3VSLwn7BqL6gUTwAa4Enxuc4+DsAeOGznQm54jg0CIDEIoO7uQ0Mtskx3NxUXvR4AksXAwJt8AChwfA4fGOiPGxj4UgOTvQ7A0eeq/aVCiHBvsNFFga6a7wPfy78BkyB/LUpcrf8AAAAJcEhZcwAAFiUAABYlAUlSJPAAAAGZaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA1LjQuMCI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIj4KICAgICAgICAgPGV4aWY6UGl4ZWxYRGltZW5zaW9uPjg8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+NjwvZXhpZjpQaXhlbFlEaW1lbnNpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgpW5h8pAAAAHGlET1QAAAACAAAAAAAAAAMAAAAoAAAAAwAAAAMAAACVlt/NTwAAAGFJREFUGBkUzEEOgjAQQNHf0nZGmMpCWXgpFl4IrkQ8mZoYYwxjXfzVS364rjf/eOa7g0jCtDCNipVEDJEwL5s/Xjvu0KtwtAOXU6VKR4ituR3uzzfyx2FgNONsiqSMR+cHAAD//9B83lEAAABSSURBVBXMwQ3CQBBD0T/GOxsUpT0aQKKWHFNPbikMJoN8/E+O135WhdnWlWdOFpssmGm+/Ij3cZVC6NHBgzkGlhgWoSA+f0D1hBtkv8xs5EANb2GuJcQ2QIgxAAAAAElFTkSuQmCC', 'filename': 'newfile.exe'})])
def test_create_attachment(filename, filedata, result):

    assert create_attachment(filename, filedata) == [result]
    swa = SwimlaneAttachments()
    swa.add_attachment(filename, filedata)
    swa.add_attachment(filename, filedata)

    assert swa.get_attachments() == [result, result]

@pytest.mark.parametrize("data", [
    # username, password, should_fail
    ("admin", "pw", False),
    ("admin", "invalid", True)
])
@pytest.mark.parametrize("auth_in_init", [True, False])
def test_testconn_base(data, auth_in_init):
    class BaseIntegration(object):
        def __init__(self, context):
            self.username = context.asset["username"]
            self.password = context.asset["password"]
            if auth_in_init:
                self.auth()

        def auth(self):
            if self.username != "admin" or self.password != "pw":
                raise Exception("This is an API exception!")

    if auth_in_init:
        SwMain = create_test_conn(BaseIntegration)
    else:
        SwMain = create_test_conn(BaseIntegration, "auth")

    username, password, should_fail = data

    class Context(object):
        asset = {
            "username": username,
            "password": password,
        }

    result = SwMain(Context).execute()

    if should_fail:
        assert not result["successful"]
        assert result["errorMessage"]  # Assert that there is an error message
    else:
        assert result["successful"]
