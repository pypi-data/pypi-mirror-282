# coding: utf-8

"""
    Swagger Blended Hub API Explorer

    A collection of Swagger documentation for the Blended Hub APIs.

    OpenAPI spec version: 1.0.0
    Contact: api@blended.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ValidatorDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, hash=None, name=None, account=None, slug=None, label=None, library=None):
        """
        ValidatorDetail - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'hash': 'str',
            'name': 'str',
            'account': 'str',
            'slug': 'str',
            'label': 'str',
            'library': 'bool'
        }

        self.attribute_map = {
            'hash': 'hash',
            'name': 'name',
            'account': 'account',
            'slug': 'slug',
            'label': 'label',
            'library': 'library'
        }

        self._hash = hash
        self._name = name
        self._account = account
        self._slug = slug
        self._label = label
        self._library = library

    @property
    def hash(self):
        """
        Gets the hash of this ValidatorDetail.


        :return: The hash of this ValidatorDetail.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """
        Sets the hash of this ValidatorDetail.


        :param hash: The hash of this ValidatorDetail.
        :type: str
        """

        self._hash = hash

    @property
    def name(self):
        """
        Gets the name of this ValidatorDetail.


        :return: The name of this ValidatorDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ValidatorDetail.


        :param name: The name of this ValidatorDetail.
        :type: str
        """

        self._name = name

    @property
    def account(self):
        """
        Gets the account of this ValidatorDetail.


        :return: The account of this ValidatorDetail.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this ValidatorDetail.


        :param account: The account of this ValidatorDetail.
        :type: str
        """

        self._account = account

    @property
    def slug(self):
        """
        Gets the slug of this ValidatorDetail.


        :return: The slug of this ValidatorDetail.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """
        Sets the slug of this ValidatorDetail.


        :param slug: The slug of this ValidatorDetail.
        :type: str
        """

        self._slug = slug

    @property
    def label(self):
        """
        Gets the label of this ValidatorDetail.


        :return: The label of this ValidatorDetail.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this ValidatorDetail.


        :param label: The label of this ValidatorDetail.
        :type: str
        """

        self._label = label

    @property
    def library(self):
        """
        Gets the library of this ValidatorDetail.


        :return: The library of this ValidatorDetail.
        :rtype: bool
        """
        return self._library

    @library.setter
    def library(self, library):
        """
        Sets the library of this ValidatorDetail.


        :param library: The library of this ValidatorDetail.
        :type: bool
        """

        self._library = library

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
