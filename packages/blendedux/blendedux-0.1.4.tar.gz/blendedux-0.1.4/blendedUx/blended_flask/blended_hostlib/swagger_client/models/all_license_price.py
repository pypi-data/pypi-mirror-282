# coding: utf-8

"""
    Swagger Blended Hub API Explorer

    A collection of Swagger documentation for the Blended Hub APIs.

    OpenAPI spec version: 1.0.0
    Contact: api@blended.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AllLicensePrice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, license_name=None, license_type=None, price=None, total_price=None, listed=None, get_or_purchased=None):
        """
        AllLicensePrice - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'license_name': 'str',
            'license_type': 'str',
            'price': 'float',
            'total_price': 'float',
            'listed': 'bool',
            'get_or_purchased': 'str'
        }

        self.attribute_map = {
            'license_name': 'license_name',
            'license_type': 'license_type',
            'price': 'price',
            'total_price': 'total_price',
            'listed': 'listed',
            'get_or_purchased': 'get_or_purchased'
        }

        self._license_name = license_name
        self._license_type = license_type
        self._price = price
        self._total_price = total_price
        self._listed = listed
        self._get_or_purchased = get_or_purchased

    @property
    def license_name(self):
        """
        Gets the license_name of this AllLicensePrice.
        Name of License of pacakge

        :return: The license_name of this AllLicensePrice.
        :rtype: str
        """
        return self._license_name

    @license_name.setter
    def license_name(self, license_name):
        """
        Sets the license_name of this AllLicensePrice.
        Name of License of pacakge

        :param license_name: The license_name of this AllLicensePrice.
        :type: str
        """

        self._license_name = license_name

    @property
    def license_type(self):
        """
        Gets the license_type of this AllLicensePrice.
        Type of License of pacakge. Ex: MIT, BCL, etc.

        :return: The license_type of this AllLicensePrice.
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """
        Sets the license_type of this AllLicensePrice.
        Type of License of pacakge. Ex: MIT, BCL, etc.

        :param license_type: The license_type of this AllLicensePrice.
        :type: str
        """

        self._license_type = license_type

    @property
    def price(self):
        """
        Gets the price of this AllLicensePrice.
        price of license

        :return: The price of this AllLicensePrice.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this AllLicensePrice.
        price of license

        :param price: The price of this AllLicensePrice.
        :type: float
        """

        self._price = price

    @property
    def total_price(self):
        """
        Gets the total_price of this AllLicensePrice.
        total price of license including bundles

        :return: The total_price of this AllLicensePrice.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """
        Sets the total_price of this AllLicensePrice.
        total price of license including bundles

        :param total_price: The total_price of this AllLicensePrice.
        :type: float
        """

        self._total_price = total_price

    @property
    def listed(self):
        """
        Gets the listed of this AllLicensePrice.
        Allow listed flag of license

        :return: The listed of this AllLicensePrice.
        :rtype: bool
        """
        return self._listed

    @listed.setter
    def listed(self, listed):
        """
        Sets the listed of this AllLicensePrice.
        Allow listed flag of license

        :param listed: The listed of this AllLicensePrice.
        :type: bool
        """

        self._listed = listed

    @property
    def get_or_purchased(self):
        """
        Gets the get_or_purchased of this AllLicensePrice.
        Name of License of pacakge

        :return: The get_or_purchased of this AllLicensePrice.
        :rtype: str
        """
        return self._get_or_purchased

    @get_or_purchased.setter
    def get_or_purchased(self, get_or_purchased):
        """
        Sets the get_or_purchased of this AllLicensePrice.
        Name of License of pacakge

        :param get_or_purchased: The get_or_purchased of this AllLicensePrice.
        :type: str
        """

        self._get_or_purchased = get_or_purchased

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
