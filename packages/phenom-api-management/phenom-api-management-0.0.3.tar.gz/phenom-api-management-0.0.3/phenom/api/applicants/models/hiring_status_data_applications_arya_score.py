# coding: utf-8

"""
    applicants-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class HiringStatusDataApplicationsAryaScore(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'candidate_score': 'str',
        'score': 'float',
        'created_date': 'float',
        'updated_date': 'float',
        'source': 'str',
        'title_score': 'float',
        'skills_score': 'float',
        'location_score': 'float',
        'location_distance': 'float',
        'experience_score': 'float'
    }

    attribute_map = {
        'candidate_score': 'candidateScore',
        'score': 'score',
        'created_date': 'createdDate',
        'updated_date': 'updatedDate',
        'source': 'source',
        'title_score': 'titleScore',
        'skills_score': 'skillsScore',
        'location_score': 'locationScore',
        'location_distance': 'locationDistance',
        'experience_score': 'experienceScore'
    }

    def __init__(self, candidate_score=None, score=None, created_date=None, updated_date=None, source=None, title_score=None, skills_score=None, location_score=None, location_distance=None, experience_score=None):  # noqa: E501
        """HiringStatusDataApplicationsAryaScore - a model defined in Swagger"""  # noqa: E501
        self._candidate_score = None
        self._score = None
        self._created_date = None
        self._updated_date = None
        self._source = None
        self._title_score = None
        self._skills_score = None
        self._location_score = None
        self._location_distance = None
        self._experience_score = None
        self.discriminator = None
        if candidate_score is not None:
            self.candidate_score = candidate_score
        if score is not None:
            self.score = score
        if created_date is not None:
            self.created_date = created_date
        if updated_date is not None:
            self.updated_date = updated_date
        if source is not None:
            self.source = source
        if title_score is not None:
            self.title_score = title_score
        if skills_score is not None:
            self.skills_score = skills_score
        if location_score is not None:
            self.location_score = location_score
        if location_distance is not None:
            self.location_distance = location_distance
        if experience_score is not None:
            self.experience_score = experience_score

    @property
    def candidate_score(self):
        """Gets the candidate_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501


        :return: The candidate_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :rtype: str
        """
        return self._candidate_score

    @candidate_score.setter
    def candidate_score(self, candidate_score):
        """Sets the candidate_score of this HiringStatusDataApplicationsAryaScore.


        :param candidate_score: The candidate_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :type: str
        """

        self._candidate_score = candidate_score

    @property
    def score(self):
        """Gets the score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501


        :return: The score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this HiringStatusDataApplicationsAryaScore.


        :param score: The score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def created_date(self):
        """Gets the created_date of this HiringStatusDataApplicationsAryaScore.  # noqa: E501


        :return: The created_date of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :rtype: float
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this HiringStatusDataApplicationsAryaScore.


        :param created_date: The created_date of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :type: float
        """

        self._created_date = created_date

    @property
    def updated_date(self):
        """Gets the updated_date of this HiringStatusDataApplicationsAryaScore.  # noqa: E501


        :return: The updated_date of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :rtype: float
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this HiringStatusDataApplicationsAryaScore.


        :param updated_date: The updated_date of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :type: float
        """

        self._updated_date = updated_date

    @property
    def source(self):
        """Gets the source of this HiringStatusDataApplicationsAryaScore.  # noqa: E501


        :return: The source of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this HiringStatusDataApplicationsAryaScore.


        :param source: The source of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def title_score(self):
        """Gets the title_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501


        :return: The title_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :rtype: float
        """
        return self._title_score

    @title_score.setter
    def title_score(self, title_score):
        """Sets the title_score of this HiringStatusDataApplicationsAryaScore.


        :param title_score: The title_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :type: float
        """

        self._title_score = title_score

    @property
    def skills_score(self):
        """Gets the skills_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501


        :return: The skills_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :rtype: float
        """
        return self._skills_score

    @skills_score.setter
    def skills_score(self, skills_score):
        """Sets the skills_score of this HiringStatusDataApplicationsAryaScore.


        :param skills_score: The skills_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :type: float
        """

        self._skills_score = skills_score

    @property
    def location_score(self):
        """Gets the location_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501


        :return: The location_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :rtype: float
        """
        return self._location_score

    @location_score.setter
    def location_score(self, location_score):
        """Sets the location_score of this HiringStatusDataApplicationsAryaScore.


        :param location_score: The location_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :type: float
        """

        self._location_score = location_score

    @property
    def location_distance(self):
        """Gets the location_distance of this HiringStatusDataApplicationsAryaScore.  # noqa: E501


        :return: The location_distance of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :rtype: float
        """
        return self._location_distance

    @location_distance.setter
    def location_distance(self, location_distance):
        """Sets the location_distance of this HiringStatusDataApplicationsAryaScore.


        :param location_distance: The location_distance of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :type: float
        """

        self._location_distance = location_distance

    @property
    def experience_score(self):
        """Gets the experience_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501


        :return: The experience_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :rtype: float
        """
        return self._experience_score

    @experience_score.setter
    def experience_score(self, experience_score):
        """Sets the experience_score of this HiringStatusDataApplicationsAryaScore.


        :param experience_score: The experience_score of this HiringStatusDataApplicationsAryaScore.  # noqa: E501
        :type: float
        """

        self._experience_score = experience_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HiringStatusDataApplicationsAryaScore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HiringStatusDataApplicationsAryaScore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
