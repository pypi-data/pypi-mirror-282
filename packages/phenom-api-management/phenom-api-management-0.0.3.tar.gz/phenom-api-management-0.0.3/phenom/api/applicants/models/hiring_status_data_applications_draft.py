# coding: utf-8

"""
    applicants-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class HiringStatusDataApplicationsDraft(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_date': 'float',
        'document_updated_date': 'float',
        'hiring_status': 'HiringStatusDataApplicationsHiringStatus',
        'is_confidential': 'bool',
        'job_category': 'str',
        'job_id': 'str',
        'job_seeker_source': 'list[str]',
        'job_title': 'str',
        'ref_num': 'str',
        'sourced': 'list[HiringStatusDataApplicationsSourced]',
        'status': 'str',
        'status_priority': 'float',
        'updated_date': 'float',
        'user_id': 'str',
        'arya_score': 'HiringStatusDataApplicationsAryaScore'
    }

    attribute_map = {
        'created_date': 'createdDate',
        'document_updated_date': 'documentUpdatedDate',
        'hiring_status': 'hiringStatus',
        'is_confidential': 'isConfidential',
        'job_category': 'jobCategory',
        'job_id': 'jobId',
        'job_seeker_source': 'jobSeekerSource',
        'job_title': 'jobTitle',
        'ref_num': 'refNum',
        'sourced': 'sourced',
        'status': 'status',
        'status_priority': 'statusPriority',
        'updated_date': 'updatedDate',
        'user_id': 'userId',
        'arya_score': 'aryaScore'
    }

    def __init__(self, created_date=None, document_updated_date=None, hiring_status=None, is_confidential=None, job_category=None, job_id=None, job_seeker_source=None, job_title=None, ref_num=None, sourced=None, status=None, status_priority=None, updated_date=None, user_id=None, arya_score=None):  # noqa: E501
        """HiringStatusDataApplicationsDraft - a model defined in Swagger"""  # noqa: E501
        self._created_date = None
        self._document_updated_date = None
        self._hiring_status = None
        self._is_confidential = None
        self._job_category = None
        self._job_id = None
        self._job_seeker_source = None
        self._job_title = None
        self._ref_num = None
        self._sourced = None
        self._status = None
        self._status_priority = None
        self._updated_date = None
        self._user_id = None
        self._arya_score = None
        self.discriminator = None
        if created_date is not None:
            self.created_date = created_date
        if document_updated_date is not None:
            self.document_updated_date = document_updated_date
        if hiring_status is not None:
            self.hiring_status = hiring_status
        if is_confidential is not None:
            self.is_confidential = is_confidential
        if job_category is not None:
            self.job_category = job_category
        if job_id is not None:
            self.job_id = job_id
        if job_seeker_source is not None:
            self.job_seeker_source = job_seeker_source
        if job_title is not None:
            self.job_title = job_title
        if ref_num is not None:
            self.ref_num = ref_num
        if sourced is not None:
            self.sourced = sourced
        if status is not None:
            self.status = status
        if status_priority is not None:
            self.status_priority = status_priority
        if updated_date is not None:
            self.updated_date = updated_date
        if user_id is not None:
            self.user_id = user_id
        if arya_score is not None:
            self.arya_score = arya_score

    @property
    def created_date(self):
        """Gets the created_date of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The created_date of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: float
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this HiringStatusDataApplicationsDraft.


        :param created_date: The created_date of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: float
        """

        self._created_date = created_date

    @property
    def document_updated_date(self):
        """Gets the document_updated_date of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The document_updated_date of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: float
        """
        return self._document_updated_date

    @document_updated_date.setter
    def document_updated_date(self, document_updated_date):
        """Sets the document_updated_date of this HiringStatusDataApplicationsDraft.


        :param document_updated_date: The document_updated_date of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: float
        """

        self._document_updated_date = document_updated_date

    @property
    def hiring_status(self):
        """Gets the hiring_status of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The hiring_status of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: HiringStatusDataApplicationsHiringStatus
        """
        return self._hiring_status

    @hiring_status.setter
    def hiring_status(self, hiring_status):
        """Sets the hiring_status of this HiringStatusDataApplicationsDraft.


        :param hiring_status: The hiring_status of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: HiringStatusDataApplicationsHiringStatus
        """

        self._hiring_status = hiring_status

    @property
    def is_confidential(self):
        """Gets the is_confidential of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The is_confidential of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: bool
        """
        return self._is_confidential

    @is_confidential.setter
    def is_confidential(self, is_confidential):
        """Sets the is_confidential of this HiringStatusDataApplicationsDraft.


        :param is_confidential: The is_confidential of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: bool
        """

        self._is_confidential = is_confidential

    @property
    def job_category(self):
        """Gets the job_category of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The job_category of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: str
        """
        return self._job_category

    @job_category.setter
    def job_category(self, job_category):
        """Sets the job_category of this HiringStatusDataApplicationsDraft.


        :param job_category: The job_category of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: str
        """

        self._job_category = job_category

    @property
    def job_id(self):
        """Gets the job_id of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The job_id of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this HiringStatusDataApplicationsDraft.


        :param job_id: The job_id of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def job_seeker_source(self):
        """Gets the job_seeker_source of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The job_seeker_source of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._job_seeker_source

    @job_seeker_source.setter
    def job_seeker_source(self, job_seeker_source):
        """Sets the job_seeker_source of this HiringStatusDataApplicationsDraft.


        :param job_seeker_source: The job_seeker_source of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: list[str]
        """

        self._job_seeker_source = job_seeker_source

    @property
    def job_title(self):
        """Gets the job_title of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The job_title of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this HiringStatusDataApplicationsDraft.


        :param job_title: The job_title of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def ref_num(self):
        """Gets the ref_num of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The ref_num of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: str
        """
        return self._ref_num

    @ref_num.setter
    def ref_num(self, ref_num):
        """Sets the ref_num of this HiringStatusDataApplicationsDraft.


        :param ref_num: The ref_num of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: str
        """

        self._ref_num = ref_num

    @property
    def sourced(self):
        """Gets the sourced of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The sourced of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: list[HiringStatusDataApplicationsSourced]
        """
        return self._sourced

    @sourced.setter
    def sourced(self, sourced):
        """Sets the sourced of this HiringStatusDataApplicationsDraft.


        :param sourced: The sourced of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: list[HiringStatusDataApplicationsSourced]
        """

        self._sourced = sourced

    @property
    def status(self):
        """Gets the status of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The status of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HiringStatusDataApplicationsDraft.


        :param status: The status of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_priority(self):
        """Gets the status_priority of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The status_priority of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: float
        """
        return self._status_priority

    @status_priority.setter
    def status_priority(self, status_priority):
        """Sets the status_priority of this HiringStatusDataApplicationsDraft.


        :param status_priority: The status_priority of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: float
        """

        self._status_priority = status_priority

    @property
    def updated_date(self):
        """Gets the updated_date of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The updated_date of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: float
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this HiringStatusDataApplicationsDraft.


        :param updated_date: The updated_date of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: float
        """

        self._updated_date = updated_date

    @property
    def user_id(self):
        """Gets the user_id of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The user_id of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this HiringStatusDataApplicationsDraft.


        :param user_id: The user_id of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def arya_score(self):
        """Gets the arya_score of this HiringStatusDataApplicationsDraft.  # noqa: E501


        :return: The arya_score of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :rtype: HiringStatusDataApplicationsAryaScore
        """
        return self._arya_score

    @arya_score.setter
    def arya_score(self, arya_score):
        """Sets the arya_score of this HiringStatusDataApplicationsDraft.


        :param arya_score: The arya_score of this HiringStatusDataApplicationsDraft.  # noqa: E501
        :type: HiringStatusDataApplicationsAryaScore
        """

        self._arya_score = arya_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HiringStatusDataApplicationsDraft, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HiringStatusDataApplicationsDraft):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
