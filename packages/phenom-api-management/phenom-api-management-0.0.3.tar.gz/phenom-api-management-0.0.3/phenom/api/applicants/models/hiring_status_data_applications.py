# coding: utf-8

"""
    applicants-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class HiringStatusDataApplications(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'draft': 'list[HiringStatusDataApplicationsDraft]',
        'close': 'list[HiringStatusDataApplicationsDraft]',
        'open': 'list[HiringStatusDataApplicationsDraft]'
    }

    attribute_map = {
        'draft': 'draft',
        'close': 'close',
        'open': 'open'
    }

    def __init__(self, draft=None, close=None, open=None):  # noqa: E501
        """HiringStatusDataApplications - a model defined in Swagger"""  # noqa: E501
        self._draft = None
        self._close = None
        self._open = None
        self.discriminator = None
        if draft is not None:
            self.draft = draft
        if close is not None:
            self.close = close
        if open is not None:
            self.open = open

    @property
    def draft(self):
        """Gets the draft of this HiringStatusDataApplications.  # noqa: E501


        :return: The draft of this HiringStatusDataApplications.  # noqa: E501
        :rtype: list[HiringStatusDataApplicationsDraft]
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this HiringStatusDataApplications.


        :param draft: The draft of this HiringStatusDataApplications.  # noqa: E501
        :type: list[HiringStatusDataApplicationsDraft]
        """

        self._draft = draft

    @property
    def close(self):
        """Gets the close of this HiringStatusDataApplications.  # noqa: E501


        :return: The close of this HiringStatusDataApplications.  # noqa: E501
        :rtype: list[HiringStatusDataApplicationsDraft]
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this HiringStatusDataApplications.


        :param close: The close of this HiringStatusDataApplications.  # noqa: E501
        :type: list[HiringStatusDataApplicationsDraft]
        """

        self._close = close

    @property
    def open(self):
        """Gets the open of this HiringStatusDataApplications.  # noqa: E501


        :return: The open of this HiringStatusDataApplications.  # noqa: E501
        :rtype: list[HiringStatusDataApplicationsDraft]
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this HiringStatusDataApplications.


        :param open: The open of this HiringStatusDataApplications.  # noqa: E501
        :type: list[HiringStatusDataApplicationsDraft]
        """

        self._open = open

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HiringStatusDataApplications, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HiringStatusDataApplications):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
