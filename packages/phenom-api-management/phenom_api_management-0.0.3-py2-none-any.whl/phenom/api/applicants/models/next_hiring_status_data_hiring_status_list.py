# coding: utf-8

"""
    applicants-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class NextHiringStatusDataHiringStatusList(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'hs_priority': 'float',
        'is_rejected': 'bool',
        'is_visible': 'bool',
        'is_default': 'bool',
        'status_code': 'str',
        'transition_statuses': 'list[NextHiringStatusDataTransitionStatuses1]',
        'step': 'str'
    }

    attribute_map = {
        'name': 'name',
        'hs_priority': 'hsPriority',
        'is_rejected': 'isRejected',
        'is_visible': 'isVisible',
        'is_default': 'isDefault',
        'status_code': 'statusCode',
        'transition_statuses': 'transitionStatuses',
        'step': 'step'
    }

    def __init__(self, name=None, hs_priority=None, is_rejected=None, is_visible=None, is_default=None, status_code=None, transition_statuses=None, step=None):  # noqa: E501
        """NextHiringStatusDataHiringStatusList - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._hs_priority = None
        self._is_rejected = None
        self._is_visible = None
        self._is_default = None
        self._status_code = None
        self._transition_statuses = None
        self._step = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if hs_priority is not None:
            self.hs_priority = hs_priority
        if is_rejected is not None:
            self.is_rejected = is_rejected
        if is_visible is not None:
            self.is_visible = is_visible
        if is_default is not None:
            self.is_default = is_default
        if status_code is not None:
            self.status_code = status_code
        if transition_statuses is not None:
            self.transition_statuses = transition_statuses
        if step is not None:
            self.step = step

    @property
    def name(self):
        """Gets the name of this NextHiringStatusDataHiringStatusList.  # noqa: E501


        :return: The name of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NextHiringStatusDataHiringStatusList.


        :param name: The name of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def hs_priority(self):
        """Gets the hs_priority of this NextHiringStatusDataHiringStatusList.  # noqa: E501


        :return: The hs_priority of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :rtype: float
        """
        return self._hs_priority

    @hs_priority.setter
    def hs_priority(self, hs_priority):
        """Sets the hs_priority of this NextHiringStatusDataHiringStatusList.


        :param hs_priority: The hs_priority of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :type: float
        """

        self._hs_priority = hs_priority

    @property
    def is_rejected(self):
        """Gets the is_rejected of this NextHiringStatusDataHiringStatusList.  # noqa: E501


        :return: The is_rejected of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :rtype: bool
        """
        return self._is_rejected

    @is_rejected.setter
    def is_rejected(self, is_rejected):
        """Sets the is_rejected of this NextHiringStatusDataHiringStatusList.


        :param is_rejected: The is_rejected of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :type: bool
        """

        self._is_rejected = is_rejected

    @property
    def is_visible(self):
        """Gets the is_visible of this NextHiringStatusDataHiringStatusList.  # noqa: E501


        :return: The is_visible of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this NextHiringStatusDataHiringStatusList.


        :param is_visible: The is_visible of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :type: bool
        """

        self._is_visible = is_visible

    @property
    def is_default(self):
        """Gets the is_default of this NextHiringStatusDataHiringStatusList.  # noqa: E501


        :return: The is_default of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this NextHiringStatusDataHiringStatusList.


        :param is_default: The is_default of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def status_code(self):
        """Gets the status_code of this NextHiringStatusDataHiringStatusList.  # noqa: E501


        :return: The status_code of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this NextHiringStatusDataHiringStatusList.


        :param status_code: The status_code of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :type: str
        """

        self._status_code = status_code

    @property
    def transition_statuses(self):
        """Gets the transition_statuses of this NextHiringStatusDataHiringStatusList.  # noqa: E501


        :return: The transition_statuses of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :rtype: list[NextHiringStatusDataTransitionStatuses1]
        """
        return self._transition_statuses

    @transition_statuses.setter
    def transition_statuses(self, transition_statuses):
        """Sets the transition_statuses of this NextHiringStatusDataHiringStatusList.


        :param transition_statuses: The transition_statuses of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :type: list[NextHiringStatusDataTransitionStatuses1]
        """

        self._transition_statuses = transition_statuses

    @property
    def step(self):
        """Gets the step of this NextHiringStatusDataHiringStatusList.  # noqa: E501


        :return: The step of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this NextHiringStatusDataHiringStatusList.


        :param step: The step of this NextHiringStatusDataHiringStatusList.  # noqa: E501
        :type: str
        """

        self._step = step

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NextHiringStatusDataHiringStatusList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NextHiringStatusDataHiringStatusList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
