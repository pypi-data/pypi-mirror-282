# coding: utf-8

"""
    applicants-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ApplicantsDataContacts(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original_number': 'str',
        'phone_number_org': 'list[str]',
        'phone_number': 'str',
        'phone_number_without_country_code': 'str',
        'country_code': 'str',
        'standardized_date': 'float',
        'type': 'str',
        'status': 'str',
        'field_id': 'str'
    }

    attribute_map = {
        'original_number': 'originalNumber',
        'phone_number_org': 'phoneNumber_org',
        'phone_number': 'phoneNumber',
        'phone_number_without_country_code': 'phoneNumberWithoutCountryCode',
        'country_code': 'countryCode',
        'standardized_date': 'standardizedDate',
        'type': 'type',
        'status': 'status',
        'field_id': 'fieldID'
    }

    def __init__(self, original_number=None, phone_number_org=None, phone_number=None, phone_number_without_country_code=None, country_code=None, standardized_date=None, type=None, status=None, field_id=None):  # noqa: E501
        """ApplicantsDataContacts - a model defined in Swagger"""  # noqa: E501
        self._original_number = None
        self._phone_number_org = None
        self._phone_number = None
        self._phone_number_without_country_code = None
        self._country_code = None
        self._standardized_date = None
        self._type = None
        self._status = None
        self._field_id = None
        self.discriminator = None
        if original_number is not None:
            self.original_number = original_number
        if phone_number_org is not None:
            self.phone_number_org = phone_number_org
        if phone_number is not None:
            self.phone_number = phone_number
        if phone_number_without_country_code is not None:
            self.phone_number_without_country_code = phone_number_without_country_code
        if country_code is not None:
            self.country_code = country_code
        if standardized_date is not None:
            self.standardized_date = standardized_date
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if field_id is not None:
            self.field_id = field_id

    @property
    def original_number(self):
        """Gets the original_number of this ApplicantsDataContacts.  # noqa: E501


        :return: The original_number of this ApplicantsDataContacts.  # noqa: E501
        :rtype: str
        """
        return self._original_number

    @original_number.setter
    def original_number(self, original_number):
        """Sets the original_number of this ApplicantsDataContacts.


        :param original_number: The original_number of this ApplicantsDataContacts.  # noqa: E501
        :type: str
        """

        self._original_number = original_number

    @property
    def phone_number_org(self):
        """Gets the phone_number_org of this ApplicantsDataContacts.  # noqa: E501


        :return: The phone_number_org of this ApplicantsDataContacts.  # noqa: E501
        :rtype: list[str]
        """
        return self._phone_number_org

    @phone_number_org.setter
    def phone_number_org(self, phone_number_org):
        """Sets the phone_number_org of this ApplicantsDataContacts.


        :param phone_number_org: The phone_number_org of this ApplicantsDataContacts.  # noqa: E501
        :type: list[str]
        """

        self._phone_number_org = phone_number_org

    @property
    def phone_number(self):
        """Gets the phone_number of this ApplicantsDataContacts.  # noqa: E501


        :return: The phone_number of this ApplicantsDataContacts.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ApplicantsDataContacts.


        :param phone_number: The phone_number of this ApplicantsDataContacts.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_without_country_code(self):
        """Gets the phone_number_without_country_code of this ApplicantsDataContacts.  # noqa: E501


        :return: The phone_number_without_country_code of this ApplicantsDataContacts.  # noqa: E501
        :rtype: str
        """
        return self._phone_number_without_country_code

    @phone_number_without_country_code.setter
    def phone_number_without_country_code(self, phone_number_without_country_code):
        """Sets the phone_number_without_country_code of this ApplicantsDataContacts.


        :param phone_number_without_country_code: The phone_number_without_country_code of this ApplicantsDataContacts.  # noqa: E501
        :type: str
        """

        self._phone_number_without_country_code = phone_number_without_country_code

    @property
    def country_code(self):
        """Gets the country_code of this ApplicantsDataContacts.  # noqa: E501


        :return: The country_code of this ApplicantsDataContacts.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ApplicantsDataContacts.


        :param country_code: The country_code of this ApplicantsDataContacts.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def standardized_date(self):
        """Gets the standardized_date of this ApplicantsDataContacts.  # noqa: E501


        :return: The standardized_date of this ApplicantsDataContacts.  # noqa: E501
        :rtype: float
        """
        return self._standardized_date

    @standardized_date.setter
    def standardized_date(self, standardized_date):
        """Sets the standardized_date of this ApplicantsDataContacts.


        :param standardized_date: The standardized_date of this ApplicantsDataContacts.  # noqa: E501
        :type: float
        """

        self._standardized_date = standardized_date

    @property
    def type(self):
        """Gets the type of this ApplicantsDataContacts.  # noqa: E501


        :return: The type of this ApplicantsDataContacts.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApplicantsDataContacts.


        :param type: The type of this ApplicantsDataContacts.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this ApplicantsDataContacts.  # noqa: E501


        :return: The status of this ApplicantsDataContacts.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApplicantsDataContacts.


        :param status: The status of this ApplicantsDataContacts.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def field_id(self):
        """Gets the field_id of this ApplicantsDataContacts.  # noqa: E501


        :return: The field_id of this ApplicantsDataContacts.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this ApplicantsDataContacts.


        :param field_id: The field_id of this ApplicantsDataContacts.  # noqa: E501
        :type: str
        """

        self._field_id = field_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicantsDataContacts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicantsDataContacts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
