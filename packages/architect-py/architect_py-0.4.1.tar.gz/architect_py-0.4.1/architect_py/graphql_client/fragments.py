# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import MinOrderQuantityUnit, OrderStateFlags


class CandleFields(BaseModel):
    time: Any
    open: Any
    high: Any
    low: Any
    close: Any
    volume: Any


class ProductFields(BaseModel):
    typename__: str = Field(alias="__typename")
    id: Any
    name: str
    kind: str
    mark_usd: Optional[Any] = Field(alias="markUsd")


class MarketFields(BaseModel):
    typename__: str = Field(alias="__typename")
    venue: "MarketFieldsVenue"
    exchange_symbol: str = Field(alias="exchangeSymbol")
    id: Any
    kind: Union[
        "MarketFieldsKindExchangeMarketKind",
        "MarketFieldsKindPoolMarketKind",
        "MarketFieldsKindUnknownMarketKind",
    ] = Field(discriminator="typename__")
    name: str
    tick_size: Any = Field(alias="tickSize")
    step_size: Any = Field(alias="stepSize")
    min_order_quantity: Any = Field(alias="minOrderQuantity")
    min_order_quantity_unit: MinOrderQuantityUnit = Field(alias="minOrderQuantityUnit")
    route: "MarketFieldsRoute"
    is_favorite: bool = Field(alias="isFavorite")


class MarketFieldsVenue(BaseModel):
    id: Any
    name: Any


class MarketFieldsKindExchangeMarketKind(BaseModel):
    typename__: Literal["ExchangeMarketKind"] = Field(alias="__typename")
    base: "MarketFieldsKindExchangeMarketKindBase"
    quote: "MarketFieldsKindExchangeMarketKindQuote"


class MarketFieldsKindExchangeMarketKindBase(ProductFields):
    pass


class MarketFieldsKindExchangeMarketKindQuote(ProductFields):
    pass


class MarketFieldsKindPoolMarketKind(BaseModel):
    typename__: Literal["PoolMarketKind"] = Field(alias="__typename")
    products: List["MarketFieldsKindPoolMarketKindProducts"]


class MarketFieldsKindPoolMarketKindProducts(ProductFields):
    pass


class MarketFieldsKindUnknownMarketKind(BaseModel):
    typename__: Literal["UnknownMarketKind"] = Field(alias="__typename")


class MarketFieldsRoute(BaseModel):
    id: Any
    name: Any


class MarketSnapshotFields(BaseModel):
    typename__: str = Field(alias="__typename")
    market_id: Any = Field(alias="marketId")
    market: Optional["MarketSnapshotFieldsMarket"]
    high_24_h: Optional[Any] = Field(alias="high24h")
    last_price: Optional[Any] = Field(alias="lastPrice")
    low_24_h: Optional[Any] = Field(alias="low24h")
    volume_24_h: Optional[Any] = Field(alias="volume24h")
    open_24_h: Optional[Any] = Field(alias="open24h")
    bid_price: Optional[Any] = Field(alias="bidPrice")
    ask_price: Optional[Any] = Field(alias="askPrice")


class MarketSnapshotFieldsMarket(BaseModel):
    name: str


class OrderLogFields(BaseModel):
    typename__: str = Field(alias="__typename")
    timestamp: Any
    order: "OrderLogFieldsOrder"
    order_state: List[OrderStateFlags] = Field(alias="orderState")
    filled_qty: Any = Field(alias="filledQty")
    avg_fill_price: Optional[Any] = Field(alias="avgFillPrice")
    reject_reason: Optional[str] = Field(alias="rejectReason")


class OrderLogFieldsOrder(BaseModel):
    id: Any
    market: "OrderLogFieldsOrderMarket"
    dir: Any
    quantity: Any


class OrderLogFieldsOrderMarket(MarketFields):
    pass


CandleFields.model_rebuild()
ProductFields.model_rebuild()
MarketFields.model_rebuild()
MarketSnapshotFields.model_rebuild()
OrderLogFields.model_rebuild()
