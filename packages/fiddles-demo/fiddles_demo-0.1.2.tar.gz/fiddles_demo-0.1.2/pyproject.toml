[tool.poetry]
name = "fiddles-demo"
version = "0.1.2"
description = "Fiddles demo repo"
authors = ["Joaquin Dominguez <joaquin.dominguez@proton.me>"]
readme = "README.md"
packages = [{include = "fiddles_demo", from = "src"}]
package-mode = true
repository = "https://gitlab.com/j-dominguez9/fiddles_demo"

[tool.poetry.dependencies]
python = "^3.12"


[tool.poetry.group.dev.dependencies]
pyright = "^1.1.369"
flake8 = "^7.1.0"
ruff = "^0.5.0"
black = "^24.4.2"
isort = "^5.13.2"
pytest = "^8.2.2"
pre-commit = "^3.7.1"


[tool.ruff]
# Set the maximum line length to 79.
line-length = 79
indent-width = 4
exclude = [".venv", ".env", ".git", "tests", "eval"]

[tool.ruff.lint]
# Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that
# overlap with the use of a formatter, like Black, but we can override this behavior by
# explicitly adding the rule.
extend-select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ERA", # flake8-eradicate/eradicate
    "I",   # isort
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PGH", # pygrep
    "RUF", # ruff checks
    "SIM", # flake8-simplify
    # "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
]
fixable = ["ALL"]
ignore = ["SIM117"]

[tool.ruff.lint.isort]
force-single-line = true
lines-after-imports = 2
known-first-party = ["translation-agent"]

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["E402", "F401"]
"**/{tests,docs,tools}/*" = ["E402"]


[tool.mypy]
files = "src, tests"
mypy_path = "src"
namespace_packages = true
explicit_package_bases = true
show_error_codes = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
exclude = ["tests"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
