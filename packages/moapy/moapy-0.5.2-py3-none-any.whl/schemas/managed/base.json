{
    "imported_modules": [
        "moapy.ReportUtil",
        "moapy.__init__",
        "moapy.baseformidasapi",
        "moapy.calculator_asd",
        "moapy.dgncodeutil",
        "moapy.geometry",
        "moapy.midasutil",
        "moapy.midasutil_server",
        "moapy.symbol",
        "moapy.unit_converter",
        "moapy.vector",
        "moapy.project.__init__",
        "moapy.project.baseplate_KDS41_30_2022.__init__",
        "moapy.steel.__init__",
        "moapy.steel.steelutil"
    ],
    "failed_modules": [
        [
            "moapy.engineers",
            "No module named 'base.midasapi'"
        ],
        [
            "moapy.meshutil",
            "No module named 'calculator_asd'"
        ],
        [
            "moapy.midasapi",
            "No module named 'base.midasutil'"
        ],
        [
            "moapy.midasutil_web",
            "No module named 'js'"
        ],
        [
            "moapy.section_property",
            "No module named 'sectionproperties'"
        ],
        [
            "moapy.test",
            "No module named 'engineers'"
        ],
        [
            "moapy.testmesh",
            "No module named 'trimesh'"
        ],
        [
            "moapy.project.baseplate_KDS41_30_2022.baseplate_KDS41_30_2022_calc",
            "No module named 'base.steel'"
        ],
        [
            "moapy.project.baseplate_KDS41_30_2022.baseplate_KDS41_30_2022_report",
            "No module named 'base.ReportUtil'"
        ],
        [
            "moapy.project.sectionproperty.report_sectionproperty",
            "No module named 'base.midasutil_web'"
        ]
    ],
    "functions": {
        "moapy.ReportUtil": [
            {
                "path": "mdutils.mdutils.MdUtils.___update_file_data",
                "name": "___update_file_data",
                "description": "",
                "parameters": {}
            },
            {
                "name": "__add_new_item_table_of_content",
                "cause": "issubclass() arg 1 must be a class"
            },
            {
                "path": "moapy.ReportUtil.CReportUtil.__init__",
                "name": "__init__",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.ReportUtil.CReportUtil.add_chapter",
                "name": "add_chapter",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.ReportUtil.CReportUtil.add_formula",
                "name": "add_formula",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.ReportUtil.CReportUtil.add_image",
                "name": "add_image",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.ReportUtil.CReportUtil.add_line",
                "name": "add_line",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.ReportUtil.CReportUtil.add_line_fvu",
                "name": "add_line_fvu",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.ReportUtil.CReportUtil.add_line_svu",
                "name": "add_line_svu",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.ReportUtil.CReportUtil.add_paragraph",
                "name": "add_paragraph",
                "description": "",
                "parameters": {}
            },
            {
                "path": "mdutils.mdutils.MdUtils.create_marker",
                "name": "create_marker",
                "description": "This will add a marker to ``file_data_text`` and returns the marker result in order to be used whenever\n    you need.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "text_marker": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "text_marker"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.create_md_file",
                "name": "create_md_file",
                "description": "It creates a new Markdown file.\n:return: return an instance of a MarkDownFile.",
                "parameters": {}
            },
            {
                "path": "moapy.ReportUtil.CReportUtil.get_md_text",
                "name": "get_md_text",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.ReportUtil.CReportUtil.get_str_unit",
                "name": "get_str_unit",
                "description": "",
                "parameters": {}
            },
            {
                "path": "mdutils.mdutils.MdUtils.insert_code",
                "name": "insert_code",
                "description": "This method allows to insert a peace of code on a markdown file.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "language": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "code",
                        "language"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_checkbox_list",
                "name": "new_checkbox_list",
                "description": "Add checkbox list in MarkDown file.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "items": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "string"
                            }
                        },
                        "checked": {
                            "type": "boolean",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "items",
                        "checked"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_header",
                "name": "new_header",
                "description": "Add a new header to the Markdown file.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "level": {
                            "type": "integer",
                            "description": "No description provided"
                        },
                        "title": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "style": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "add_table_of_contents": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "header_id": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "level",
                        "title",
                        "style",
                        "add_table_of_contents",
                        "header_id"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_inline_image",
                "name": "new_inline_image",
                "description": "Add inline images in a markdown file. For example ``[MyImage](../MyImage.jpg)``.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "path": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "text",
                        "path"
                    ]
                }
            },
            {
                "name": "new_inline_link",
                "cause": "issubclass() arg 1 must be a class"
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_line",
                "name": "new_line",
                "description": "Add a new line to Markdown file. The text is saved to the global variable file_data_text.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "bold_italics_code": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "color": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "align": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "wrap_width": {
                            "type": "integer",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "text",
                        "bold_italics_code",
                        "color",
                        "align",
                        "wrap_width"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_list",
                "name": "new_list",
                "description": "Add unordered or ordered list in MarkDown file.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "items": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "string"
                            }
                        },
                        "marked_with": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "items",
                        "marked_with"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_paragraph",
                "name": "new_paragraph",
                "description": "Add a new paragraph to Markdown file. The text is saved to the global variable file_data_text.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "bold_italics_code": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "color": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "align": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "wrap_width": {
                            "type": "integer",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "text",
                        "bold_italics_code",
                        "color",
                        "align",
                        "wrap_width"
                    ]
                }
            },
            {
                "name": "new_reference_image",
                "cause": "issubclass() arg 1 must be a class"
            },
            {
                "name": "new_reference_link",
                "cause": "issubclass() arg 1 must be a class"
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_table",
                "name": "new_table",
                "description": "This method takes a list of strings and creates a table.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "columns": {
                            "type": "integer",
                            "description": "No description provided"
                        },
                        "rows": {
                            "type": "integer",
                            "description": "No description provided"
                        },
                        "text": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "string"
                            }
                        },
                        "text_align": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "marker": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "columns",
                        "rows",
                        "text",
                        "text_align",
                        "marker"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_table_of_contents",
                "name": "new_table_of_contents",
                "description": "Table of contents can be created if Headers of 'atx' style have been defined.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "table_title": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "depth": {
                            "type": "integer",
                            "description": "No description provided"
                        },
                        "marker": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "table_title",
                        "depth",
                        "marker"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.place_text_using_marker",
                "name": "place_text_using_marker",
                "description": "It replace a previous marker created with ``create_marker`` with a text string.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "marker": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "text",
                        "marker"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.read_md_file",
                "name": "read_md_file",
                "description": "Reads a Markdown file and save it to global class `file_data_text`.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "file_name": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "file_name"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.write",
                "name": "write",
                "description": "Write text in ``file_Data_text`` string.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "bold_italics_code": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "color": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "align": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "marker": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "wrap_width": {
                            "type": "integer",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "text",
                        "bold_italics_code",
                        "color",
                        "align",
                        "marker",
                        "wrap_width"
                    ]
                }
            },
            {
                "path": "enum.Enum.__new__",
                "name": "__new__",
                "description": "Create and return a new object.  See help(type) for accurate signature.",
                "parameters": {}
            },
            {
                "path": "mdutils.mdutils.MdUtils.___update_file_data",
                "name": "___update_file_data",
                "description": "",
                "parameters": {}
            },
            {
                "name": "__add_new_item_table_of_content",
                "cause": "issubclass() arg 1 must be a class"
            },
            {
                "path": "mdutils.mdutils.MdUtils.__init__",
                "name": "__init__",
                "description": ":param file_name: it is the name of the Markdown file.\n:type file_name: str\n:param title: it is the title of the Markdown file. It is written with Setext-style.\n:type title: str\n:param author: it is the author fo the Markdown file.\n:type author: str",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "file_name": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "title": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "author": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "file_name",
                        "title",
                        "author"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.create_marker",
                "name": "create_marker",
                "description": "This will add a marker to ``file_data_text`` and returns the marker result in order to be used whenever\n    you need.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "text_marker": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "text_marker"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.create_md_file",
                "name": "create_md_file",
                "description": "It creates a new Markdown file.\n:return: return an instance of a MarkDownFile.",
                "parameters": {}
            },
            {
                "path": "mdutils.mdutils.MdUtils.get_md_text",
                "name": "get_md_text",
                "description": "Instead of writing the markdown text into a file it returns it as a string.",
                "parameters": {}
            },
            {
                "path": "mdutils.mdutils.MdUtils.insert_code",
                "name": "insert_code",
                "description": "This method allows to insert a peace of code on a markdown file.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "language": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "code",
                        "language"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_checkbox_list",
                "name": "new_checkbox_list",
                "description": "Add checkbox list in MarkDown file.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "items": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "string"
                            }
                        },
                        "checked": {
                            "type": "boolean",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "items",
                        "checked"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_header",
                "name": "new_header",
                "description": "Add a new header to the Markdown file.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "level": {
                            "type": "integer",
                            "description": "No description provided"
                        },
                        "title": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "style": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "add_table_of_contents": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "header_id": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "level",
                        "title",
                        "style",
                        "add_table_of_contents",
                        "header_id"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_inline_image",
                "name": "new_inline_image",
                "description": "Add inline images in a markdown file. For example ``[MyImage](../MyImage.jpg)``.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "path": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "text",
                        "path"
                    ]
                }
            },
            {
                "name": "new_inline_link",
                "cause": "issubclass() arg 1 must be a class"
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_line",
                "name": "new_line",
                "description": "Add a new line to Markdown file. The text is saved to the global variable file_data_text.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "bold_italics_code": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "color": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "align": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "wrap_width": {
                            "type": "integer",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "text",
                        "bold_italics_code",
                        "color",
                        "align",
                        "wrap_width"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_list",
                "name": "new_list",
                "description": "Add unordered or ordered list in MarkDown file.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "items": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "string"
                            }
                        },
                        "marked_with": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "items",
                        "marked_with"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_paragraph",
                "name": "new_paragraph",
                "description": "Add a new paragraph to Markdown file. The text is saved to the global variable file_data_text.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "bold_italics_code": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "color": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "align": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "wrap_width": {
                            "type": "integer",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "text",
                        "bold_italics_code",
                        "color",
                        "align",
                        "wrap_width"
                    ]
                }
            },
            {
                "name": "new_reference_image",
                "cause": "issubclass() arg 1 must be a class"
            },
            {
                "name": "new_reference_link",
                "cause": "issubclass() arg 1 must be a class"
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_table",
                "name": "new_table",
                "description": "This method takes a list of strings and creates a table.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "columns": {
                            "type": "integer",
                            "description": "No description provided"
                        },
                        "rows": {
                            "type": "integer",
                            "description": "No description provided"
                        },
                        "text": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "string"
                            }
                        },
                        "text_align": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "marker": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "columns",
                        "rows",
                        "text",
                        "text_align",
                        "marker"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.new_table_of_contents",
                "name": "new_table_of_contents",
                "description": "Table of contents can be created if Headers of 'atx' style have been defined.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "table_title": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "depth": {
                            "type": "integer",
                            "description": "No description provided"
                        },
                        "marker": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "table_title",
                        "depth",
                        "marker"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.place_text_using_marker",
                "name": "place_text_using_marker",
                "description": "It replace a previous marker created with ``create_marker`` with a text string.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "marker": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "text",
                        "marker"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.read_md_file",
                "name": "read_md_file",
                "description": "Reads a Markdown file and save it to global class `file_data_text`.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "file_name": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "file_name"
                    ]
                }
            },
            {
                "path": "mdutils.mdutils.MdUtils.write",
                "name": "write",
                "description": "Write text in ``file_Data_text`` string.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "bold_italics_code": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "color": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "align": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "marker": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "wrap_width": {
                            "type": "integer",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "text",
                        "bold_italics_code",
                        "color",
                        "align",
                        "marker",
                        "wrap_width"
                    ]
                }
            },
            {
                "path": "moapy.ReportUtil.find_data",
                "name": "find_data",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.ReportUtil.get_data_from_file",
                "name": "get_data_from_file",
                "description": "",
                "parameters": {}
            }
        ],
        "moapy.__init__": [],
        "moapy.baseformidasapi": [
            {
                "path": "moapy.baseformidasapi.MidasAPI.db_create",
                "name": "db_create",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.db_create_item",
                "name": "db_create_item",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.db_delete",
                "name": "db_delete",
                "description": "_summary_",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.db_get_max_id",
                "name": "db_get_max_id",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.db_get_min_id",
                "name": "db_get_min_id",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.db_get_next_id",
                "name": "db_get_next_id",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.db_read",
                "name": "db_read",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.db_read_item",
                "name": "db_read_item",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.db_update",
                "name": "db_update",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.db_update_item",
                "name": "db_update_item",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.doc_anal",
                "name": "doc_anal",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.doc_open",
                "name": "doc_open",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.get_subitem_next_id",
                "name": "get_subitem_next_id",
                "description": "Get the next ID of the subitem list",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "subitem_list": {
                            "type": "object",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "subitem_list"
                    ]
                }
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.post_steelcodecheck",
                "name": "post_steelcodecheck",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.select_by_subkey",
                "name": "select_by_subkey",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.MidasAPI.view_select_get",
                "name": "view_select_get",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.get_nodes",
                "name": "get_nodes",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.midas_util.ERROR_DICT",
                "name": "ERROR_DICT",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.midas_util.delete",
                "name": "delete",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.midas_util.get",
                "name": "get",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.midas_util.is_json",
                "name": "is_json",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.midas_util.post",
                "name": "post",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.midas_util.put",
                "name": "put",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.baseformidasapi.midas_util.response_handler",
                "name": "response_handler",
                "description": "",
                "parameters": {}
            }
        ],
        "moapy.calculator_asd": [
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.__init__",
                "name": "__init__",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.add_concrete",
                "name": "add_concrete",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.add_concrete_at_index",
                "name": "add_concrete_at_index",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.add_rebar",
                "name": "add_rebar",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.calc",
                "name": "calc",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.calc_axial_only",
                "name": "calc_axial_only",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.calc_centroid",
                "name": "calc_centroid",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.calc_comp_only",
                "name": "calc_comp_only",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.calc_moment_angle",
                "name": "calc_moment_angle",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.calc_neutralaxis",
                "name": "calc_neutralaxis",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.calc_rotation_angle",
                "name": "calc_rotation_angle",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.calc_strain_rebar",
                "name": "calc_strain_rebar",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.calc_tens_only",
                "name": "calc_tens_only",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.calc_xmax",
                "name": "calc_xmax",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.create_section",
                "name": "create_section",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.eq0",
                "name": "eq0",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.get_radian_tolerance",
                "name": "get_radian_tolerance",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.get_sigma2",
                "name": "get_sigma2",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.get_sigma_each_load_new",
                "name": "get_sigma_each_load_new",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.initialize",
                "name": "initialize",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.rotate_section",
                "name": "rotate_section",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.safe_div",
                "name": "safe_div",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.set_block_size",
                "name": "set_block_size",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.set_comp_bar_mode",
                "name": "set_comp_bar_mode",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.set_concrete_block_no",
                "name": "set_concrete_block_no",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.solve_concrete",
                "name": "solve_concrete",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.calculator_asd.CalculatorASDEngine.solve_rebar",
                "name": "solve_rebar",
                "description": "",
                "parameters": {}
            }
        ],
        "moapy.dgncodeutil": [
            {
                "path": "enum.Enum.__new__",
                "name": "__new__",
                "description": "Create and return a new object.  See help(type) for accurate signature.",
                "parameters": {}
            },
            {
                "path": "moapy.dgncodeutil.get_dgn_unit_by_code",
                "name": "get_dgn_unit_by_code",
                "description": "Returns the design unit (US or SI) based on the given design code.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "dgn_code": {
                            "type": "object",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "dgn_code"
                    ]
                }
            },
            {
                "name": "get_dgnunit_type",
                "cause": "cannot access local variable 'params_desc' where it is not associated with a value"
            }
        ],
        "moapy.geometry": [
            {
                "path": "moapy.geometry.GeometryCalculation.area_calc",
                "name": "area_calc",
                "description": "",
                "parameters": {}
            },
            {
                "name": "get_closed_plan",
                "cause": "issubclass() arg 1 must be a class"
            },
            {
                "path": "moapy.geometry.GeometryCalculation.rotate_3d_point",
                "name": "rotate_3d_point",
                "description": "Rotate a point in 3D space around each axis by the given angles\n:param point: Initial coordinates [x, y, z]\n:param angles: Rotation angles [θx, θy, θz] (Degrees)\n:return: Rotated coordinates [x', y', z']",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "point": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "angles": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "order": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "point",
                        "angles",
                        "order"
                    ]
                }
            },
            {
                "path": "moapy.geometry.GeometryCalculation.y_cen_calc",
                "name": "y_cen_calc",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.geometry.GeometryCalculation.y_inertia_calc",
                "name": "y_inertia_calc",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.geometry.GeometryCalculation.yz_inertia_calc",
                "name": "yz_inertia_calc",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.geometry.GeometryCalculation.z_cen_calc",
                "name": "z_cen_calc",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.geometry.GeometryCalculation.z_inertia_calc",
                "name": "z_inertia_calc",
                "description": "",
                "parameters": {}
            }
        ],
        "moapy.midasutil": [
            {
                "path": "enum.Enum.__new__",
                "name": "__new__",
                "description": "Create and return a new object.  See help(type) for accurate signature.",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil.midas_util.ERROR_DICT",
                "name": "ERROR_DICT",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil.midas_util.delete",
                "name": "delete",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil.midas_util.get",
                "name": "get",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil.midas_util.get_MAPI_Key",
                "name": "get_MAPI_Key",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil.midas_util.get_base_url",
                "name": "get_base_url",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil.midas_util.get_reg_val",
                "name": "get_reg_val",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil.midas_util.is_json",
                "name": "is_json",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil.midas_util.post",
                "name": "post",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil.midas_util.put",
                "name": "put",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil.midas_util.response_handler",
                "name": "response_handler",
                "description": "",
                "parameters": {}
            }
        ],
        "moapy.midasutil_server": [
            {
                "path": "enum.Enum.__new__",
                "name": "__new__",
                "description": "Create and return a new object.  See help(type) for accurate signature.",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil_server.midas_util.ERROR_DICT",
                "name": "ERROR_DICT",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil_server.midas_util.delete",
                "name": "delete",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil_server.midas_util.get",
                "name": "get",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil_server.midas_util.get_MAPI_Key",
                "name": "get_MAPI_Key",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil_server.midas_util.get_base_url",
                "name": "get_base_url",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil_server.midas_util.is_json",
                "name": "is_json",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil_server.midas_util.post",
                "name": "post",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil_server.midas_util.put",
                "name": "put",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.midasutil_server.midas_util.response_handler",
                "name": "response_handler",
                "description": "",
                "parameters": {}
            }
        ],
        "moapy.symbol": [],
        "moapy.unit_converter": [
            {
                "path": "unittest.case.TestCase.__call__",
                "name": "__call__",
                "description": "Call self as a function.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.__eq__",
                "name": "__eq__",
                "description": "Return self==value.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.__hash__",
                "name": "__hash__",
                "description": "Return hash(self).",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.__init__",
                "name": "__init__",
                "description": "Create an instance of the class that will use the named test\nmethod when executed. Raises a ValueError if the instance does\nnot have a method with the specified name.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.__repr__",
                "name": "__repr__",
                "description": "Return repr(self).",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.__str__",
                "name": "__str__",
                "description": "Return str(self).",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase._addDuration",
                "name": "_addDuration",
                "description": "",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase._addExpectedFailure",
                "name": "_addExpectedFailure",
                "description": "",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase._addUnexpectedSuccess",
                "name": "_addUnexpectedSuccess",
                "description": "",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase._baseAssertEqual",
                "name": "_baseAssertEqual",
                "description": "The default assertEqual implementation, not type specific.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase._callCleanup",
                "name": "_callCleanup",
                "description": "",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase._callSetUp",
                "name": "_callSetUp",
                "description": "",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase._callTearDown",
                "name": "_callTearDown",
                "description": "",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase._callTestMethod",
                "name": "_callTestMethod",
                "description": "",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase._formatMessage",
                "name": "_formatMessage",
                "description": "Honour the longMessage attribute when generating failure messages.\nIf longMessage is False this means:\n* Use only an explicit message if it is provided\n* Otherwise use the standard message for the assert",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase._getAssertEqualityFunc",
                "name": "_getAssertEqualityFunc",
                "description": "Get a detailed comparison function for the types of the two args.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase._truncateMessage",
                "name": "_truncateMessage",
                "description": "",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.addCleanup",
                "name": "addCleanup",
                "description": "Add a function, with arguments, to be called when the test is\ncompleted. Functions added are called on a LIFO basis and are\ncalled after tearDown on test failure or success.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.addTypeEqualityFunc",
                "name": "addTypeEqualityFunc",
                "description": "Add a type specific assertEqual style function to compare a type.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertAlmostEqual",
                "name": "assertAlmostEqual",
                "description": "Fail if the two objects are unequal as determined by their\ndifference rounded to the given number of decimal places\n(default 7) and comparing to zero, or by comparing that the\ndifference between the two objects is more than the given\ndelta.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertCountEqual",
                "name": "assertCountEqual",
                "description": "Asserts that two iterables have the same elements, the same number of\ntimes, without regard to order.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertDictEqual",
                "name": "assertDictEqual",
                "description": "",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertEqual",
                "name": "assertEqual",
                "description": "Fail if the two objects are unequal as determined by the '=='\noperator.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertFalse",
                "name": "assertFalse",
                "description": "Check that the expression is false.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertGreater",
                "name": "assertGreater",
                "description": "Just like self.assertTrue(a > b), but with a nicer default message.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertGreaterEqual",
                "name": "assertGreaterEqual",
                "description": "Just like self.assertTrue(a >= b), but with a nicer default message.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertIn",
                "name": "assertIn",
                "description": "Just like self.assertTrue(a in b), but with a nicer default message.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertIs",
                "name": "assertIs",
                "description": "Just like self.assertTrue(a is b), but with a nicer default message.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertIsInstance",
                "name": "assertIsInstance",
                "description": "Same as self.assertTrue(isinstance(obj, cls)), with a nicer\ndefault message.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertIsNone",
                "name": "assertIsNone",
                "description": "Same as self.assertTrue(obj is None), with a nicer default message.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertIsNot",
                "name": "assertIsNot",
                "description": "Just like self.assertTrue(a is not b), but with a nicer default message.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertIsNotNone",
                "name": "assertIsNotNone",
                "description": "Included for symmetry with assertIsNone.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertLess",
                "name": "assertLess",
                "description": "Just like self.assertTrue(a < b), but with a nicer default message.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertLessEqual",
                "name": "assertLessEqual",
                "description": "Just like self.assertTrue(a <= b), but with a nicer default message.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertListEqual",
                "name": "assertListEqual",
                "description": "A list-specific equality assertion.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertLogs",
                "name": "assertLogs",
                "description": "Fail unless a log message of level *level* or higher is emitted\non *logger_name* or its children.  If omitted, *level* defaults to\nINFO and *logger* defaults to the root logger.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertMultiLineEqual",
                "name": "assertMultiLineEqual",
                "description": "Assert that two multi-line strings are equal.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertNoLogs",
                "name": "assertNoLogs",
                "description": "Fail unless no log messages of level *level* or higher are emitted\non *logger_name* or its children.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertNotAlmostEqual",
                "name": "assertNotAlmostEqual",
                "description": "Fail if the two objects are equal as determined by their\ndifference rounded to the given number of decimal places\n(default 7) and comparing to zero, or by comparing that the\ndifference between the two objects is less than the given delta.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertNotEqual",
                "name": "assertNotEqual",
                "description": "Fail if the two objects are equal as determined by the '!='\noperator.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertNotIn",
                "name": "assertNotIn",
                "description": "Just like self.assertTrue(a not in b), but with a nicer default message.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertNotIsInstance",
                "name": "assertNotIsInstance",
                "description": "Included for symmetry with assertIsInstance.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertNotRegex",
                "name": "assertNotRegex",
                "description": "Fail the test if the text matches the regular expression.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertRaises",
                "name": "assertRaises",
                "description": "Fail unless an exception of class expected_exception is raised\nby the callable when invoked with specified positional and\nkeyword arguments. If a different type of exception is\nraised, it will not be caught, and the test case will be\ndeemed to have suffered an error, exactly as for an\nunexpected exception.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertRaisesRegex",
                "name": "assertRaisesRegex",
                "description": "Asserts that the message in a raised exception matches a regex.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertRegex",
                "name": "assertRegex",
                "description": "Fail the test unless the text matches the regular expression.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertSequenceEqual",
                "name": "assertSequenceEqual",
                "description": "An equality assertion for ordered sequences (like lists and tuples).",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertSetEqual",
                "name": "assertSetEqual",
                "description": "A set-specific equality assertion.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertTrue",
                "name": "assertTrue",
                "description": "Check that the expression is true.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertTupleEqual",
                "name": "assertTupleEqual",
                "description": "A tuple-specific equality assertion.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertWarns",
                "name": "assertWarns",
                "description": "Fail unless a warning of class warnClass is triggered\nby the callable when invoked with specified positional and\nkeyword arguments.  If a different type of warning is\ntriggered, it will not be handled: depending on the other\nwarning filtering rules in effect, it might be silenced, printed\nout, or raised as an exception.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.assertWarnsRegex",
                "name": "assertWarnsRegex",
                "description": "Asserts that the message in a triggered warning matches a regexp.\nBasic functioning is similar to assertWarns() with the addition\nthat only warnings whose messages also match the regular expression\nare considered successful matches.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.countTestCases",
                "name": "countTestCases",
                "description": "",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.debug",
                "name": "debug",
                "description": "Run the test without collecting errors in a TestResult",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.defaultTestResult",
                "name": "defaultTestResult",
                "description": "",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.doCleanups",
                "name": "doCleanups",
                "description": "Execute all cleanup functions. Normally called for you after\ntearDown.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.enterContext",
                "name": "enterContext",
                "description": "Enters the supplied context manager.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.fail",
                "name": "fail",
                "description": "Fail immediately, with the given message.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.id",
                "name": "id",
                "description": "",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.run",
                "name": "run",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.unit_converter.TestUnitConverter.setUp",
                "name": "setUp",
                "description": "",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.shortDescription",
                "name": "shortDescription",
                "description": "Returns a one-line description of the test, or None if no\ndescription has been provided.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.skipTest",
                "name": "skipTest",
                "description": "Skip this test.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.subTest",
                "name": "subTest",
                "description": "Return a context manager that will return the enclosed block\nof code in a subtest identified by the optional message and\nkeyword parameters.  A failure in the subtest marks the test\ncase as failed but resumes execution at the end of the enclosed\nblock, allowing further test code to be executed.",
                "parameters": {}
            },
            {
                "path": "unittest.case.TestCase.tearDown",
                "name": "tearDown",
                "description": "Hook method for deconstructing the test fixture after testing it.",
                "parameters": {}
            },
            {
                "path": "moapy.unit_converter.TestUnitConverter.test_area_conversion",
                "name": "test_area_conversion",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.unit_converter.TestUnitConverter.test_density_conversion",
                "name": "test_density_conversion",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.unit_converter.TestUnitConverter.test_force_conversion",
                "name": "test_force_conversion",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.unit_converter.TestUnitConverter.test_length_conversion",
                "name": "test_length_conversion",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.unit_converter.TestUnitConverter.test_length_exponential_conversion",
                "name": "test_length_exponential_conversion",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.unit_converter.TestUnitConverter.test_mass_conversion",
                "name": "test_mass_conversion",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.unit_converter.TestUnitConverter.test_strain_conversion",
                "name": "test_strain_conversion",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.unit_converter.TestUnitConverter.test_stress_conversion",
                "name": "test_stress_conversion",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.unit_converter.TestUnitConverter.test_volume_conversion",
                "name": "test_volume_conversion",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.unit_converter.UnitConverter.__init__",
                "name": "__init__",
                "description": "Initializes the unit conversion ratios.",
                "parameters": {}
            },
            {
                "path": "moapy.unit_converter.UnitConverter.area",
                "name": "area",
                "description": "Converts area units between SI and US systems.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number",
                            "description": "No description provided"
                        },
                        "from_unit": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "to_unit": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "value",
                        "from_unit",
                        "to_unit"
                    ]
                }
            },
            {
                "path": "moapy.unit_converter.UnitConverter.density",
                "name": "density",
                "description": "Converts density units between SI and US systems.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number",
                            "description": "No description provided"
                        },
                        "from_mass_units": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "from_volumn_units": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "to_mass_units": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "to_volumn_units": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "value",
                        "from_mass_units",
                        "from_volumn_units",
                        "to_mass_units",
                        "to_volumn_units"
                    ]
                }
            },
            {
                "path": "moapy.unit_converter.UnitConverter.force",
                "name": "force",
                "description": "Converts force units between SI and US systems.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number",
                            "description": "No description provided"
                        },
                        "from_unit": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "to_unit": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "value",
                        "from_unit",
                        "to_unit"
                    ]
                }
            },
            {
                "path": "moapy.unit_converter.UnitConverter.length",
                "name": "length",
                "description": "Converts length units between SI and US systems.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number",
                            "description": "No description provided"
                        },
                        "from_unit": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "to_unit": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "value",
                        "from_unit",
                        "to_unit"
                    ]
                }
            },
            {
                "path": "moapy.unit_converter.UnitConverter.length_exponential",
                "name": "length_exponential",
                "description": "Converts length units between SI and US systems with exponents.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number",
                            "description": "No description provided"
                        },
                        "exponent": {
                            "type": "integer",
                            "description": "No description provided"
                        },
                        "from_unit": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "to_unit": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "value",
                        "exponent",
                        "from_unit",
                        "to_unit"
                    ]
                }
            },
            {
                "path": "moapy.unit_converter.UnitConverter.mass",
                "name": "mass",
                "description": "Converts mass units between SI and US systems.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number",
                            "description": "No description provided"
                        },
                        "from_unit": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "to_unit": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "value",
                        "from_unit",
                        "to_unit"
                    ]
                }
            },
            {
                "path": "moapy.unit_converter.UnitConverter.moment",
                "name": "moment",
                "description": "Converts moment units between SI and US systems.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number",
                            "description": "No description provided"
                        },
                        "from_force_units": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "from_length_units": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "to_force_units": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "to_length_units": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "value",
                        "from_force_units",
                        "from_length_units",
                        "to_force_units",
                        "to_length_units"
                    ]
                }
            },
            {
                "path": "moapy.unit_converter.UnitConverter.strain",
                "name": "strain",
                "description": "Converts strain units between unitless, percent, and permil.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number",
                            "description": "No description provided"
                        },
                        "from_unit": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "to_unit": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "value",
                        "from_unit",
                        "to_unit"
                    ]
                }
            },
            {
                "path": "moapy.unit_converter.UnitConverter.stress",
                "name": "stress",
                "description": "Converts stress units between SI and US systems.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number",
                            "description": "No description provided"
                        },
                        "from_unit": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "to_unit": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "value",
                        "from_unit",
                        "to_unit"
                    ]
                }
            },
            {
                "path": "moapy.unit_converter.UnitConverter.temperature",
                "name": "temperature",
                "description": "Converts temperature units between Kelvin, Celsius, and Fahrenheit.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number",
                            "description": "No description provided"
                        },
                        "from_unit": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "to_unit": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "value",
                        "from_unit",
                        "to_unit"
                    ]
                }
            },
            {
                "path": "moapy.unit_converter.UnitConverter.volume",
                "name": "volume",
                "description": "Converts volume units between SI and US systems.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number",
                            "description": "No description provided"
                        },
                        "from_unit": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "to_unit": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "value",
                        "from_unit",
                        "to_unit"
                    ]
                }
            }
        ],
        "moapy.vector": [
            {
                "name": "check_coplanar",
                "cause": "issubclass() arg 1 must be a class"
            },
            {
                "path": "moapy.vector.VectorCalculation.convert_to_global_coordinates",
                "name": "convert_to_global_coordinates",
                "description": "Convert local coordinates to global coordinates",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "origin": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "normalz_vector": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "local_point": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        }
                    },
                    "required": [
                        "origin",
                        "normalz_vector",
                        "local_point"
                    ]
                }
            },
            {
                "path": "moapy.vector.VectorCalculation.find_angle_from_vector",
                "name": "find_angle_from_vector",
                "description": "Find the angle from the vector",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "normalz_vector": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        }
                    },
                    "required": [
                        "normalz_vector"
                    ]
                }
            },
            {
                "path": "moapy.vector.VectorCalculation.find_angle_to_fit_vector",
                "name": "find_angle_to_fit_vector",
                "description": "Find the angle to fit the target vector",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "direction": {
                            "type": "string",
                            "description": "No description provided"
                        },
                        "normalz_vector": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "target_vector": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        }
                    },
                    "required": [
                        "direction",
                        "normalz_vector",
                        "target_vector"
                    ]
                }
            },
            {
                "path": "moapy.vector.VectorCalculation.find_xyz_vector",
                "name": "find_xyz_vector",
                "description": "Find the XYZ vector",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "basePoint": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "xpoint": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "local_z_vector": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        }
                    },
                    "required": [
                        "basePoint",
                        "xpoint",
                        "local_z_vector"
                    ]
                }
            },
            {
                "path": "moapy.vector.VectorCalculation.local_vector_from_2points",
                "name": "local_vector_from_2points",
                "description": "Calculate the local vector from two points",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "start_point": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "end_point": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        }
                    },
                    "required": [
                        "start_point",
                        "end_point"
                    ]
                }
            },
            {
                "path": "moapy.vector.VectorCalculation.node_vector_3points",
                "name": "node_vector_3points",
                "description": "Calculate the node vector from 3 points",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "P0": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "P1": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "P2": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        }
                    },
                    "required": [
                        "P0",
                        "P1",
                        "P2"
                    ]
                }
            },
            {
                "path": "moapy.vector.VectorCalculation.node_vector_angle",
                "name": "node_vector_angle",
                "description": "Calculate the node vector from the rotation angle",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "rotation_angle": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "angle_units": {
                            "type": "string",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "rotation_angle",
                        "angle_units"
                    ]
                }
            },
            {
                "path": "moapy.vector.VectorCalculation.node_vector_global",
                "name": "node_vector_global",
                "description": "Calculate the global node vector",
                "parameters": {}
            },
            {
                "path": "moapy.vector.VectorCalculation.node_vector_line_vector",
                "name": "node_vector_line_vector",
                "description": "Calculate the node vector from a line vector",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "origin": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "P0": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "P1": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "REFTYPE": {
                            "type": "integer",
                            "description": "No description provided"
                        },
                        "G_DIR": {
                            "type": "integer",
                            "description": "No description provided"
                        },
                        "L_DIR": {
                            "type": "integer",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "origin",
                        "P0",
                        "P1",
                        "REFTYPE",
                        "G_DIR",
                        "L_DIR"
                    ]
                }
            },
            {
                "path": "moapy.vector.VectorCalculation.node_vector_line_vector_direct",
                "name": "node_vector_line_vector_direct",
                "description": "Calculate the node vector from a line vector",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "LV0": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "LV1": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "LV2": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        }
                    },
                    "required": [
                        "LV0",
                        "LV1",
                        "LV2"
                    ]
                }
            },
            {
                "path": "moapy.vector.VectorCalculation.node_vector_vectors",
                "name": "node_vector_vectors",
                "description": "Calculate the node vector from 2 vectors",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "V1": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "V2": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        }
                    },
                    "required": [
                        "V1",
                        "V2"
                    ]
                }
            },
            {
                "path": "moapy.vector.VectorCalculation.nomalize_vector",
                "name": "nomalize_vector",
                "description": "Normalize the vector",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "vector": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        }
                    },
                    "required": [
                        "vector"
                    ]
                }
            },
            {
                "path": "moapy.vector.VectorCalculation.nomarlz_vector_skew_info",
                "name": "nomarlz_vector_skew_info",
                "description": "Calculate the normal vector from the skew information",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "skew_info": {
                            "type": "object",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "skew_info"
                    ]
                }
            },
            {
                "path": "moapy.vector.VectorCalculation.rotation_matrix",
                "name": "rotation_matrix",
                "description": "Calculate the rotation matrix",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "axis": {
                            "type": "array",
                            "description": "No description provided",
                            "items": {
                                "type": "number"
                            }
                        },
                        "angle": {
                            "type": "number",
                            "description": "No description provided"
                        }
                    },
                    "required": [
                        "axis",
                        "angle"
                    ]
                }
            }
        ],
        "moapy.project.__init__": [],
        "moapy.project.baseplate_KDS41_30_2022.__init__": [],
        "moapy.steel.__init__": [],
        "moapy.steel.steelutil": [
            {
                "path": "moapy.steel.steelutil._get_fy_for_thickness",
                "name": "_get_fy_for_thickness",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.steel.steelutil._read_materials_from_json",
                "name": "_read_materials_from_json",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.steel.steelutil.get_bolt_Fnt",
                "name": "get_bolt_Fnt",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.steel.steelutil.get_bolt_Fnv",
                "name": "get_bolt_Fnv",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.steel.steelutil.get_bolt_Fu",
                "name": "get_bolt_Fu",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.steel.steelutil.get_fu",
                "name": "get_fu",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.steel.steelutil.get_fy",
                "name": "get_fy",
                "description": "",
                "parameters": {}
            },
            {
                "path": "moapy.steel.steelutil.safe_divide",
                "name": "safe_divide",
                "description": "",
                "parameters": {}
            }
        ]
    }
}